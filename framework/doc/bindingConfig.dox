/**
 * @page bindingConfig  IPC Binding Configuration Data
 *
 * Binding lists are generated by the mk tools (i.e., mkapp and mksys) and are installed into
 * the "system" configuration tree by the installer.  They are in the "system" tree to keep
 * them protected from sandboxed applications.
 *
 * Bindings between clients and servers are stored under the @b client's configuration.  If the
 * client is an application, the bindings are stored under the application's configuration in the
 * "system" tree.  If the client is a non-application user, the bindings are stored under the
 * "/users/bindings" branch of the "system" tree.
 *
@verbatim

system:/
    apps/
        <app name>/
            bindings/
                <client interface name>
                    protocol    <string>
                    server/
                            app         <string>
                            user        <string>
                            interface   <string>
    users/
        <user name>/
            bindings/
                <client interface name>
                    protocol    <string>
                    server/
                            app         <string>
                            user        <string>
                            interface   <string>

@endverbatim
 *
 * Each <c>\<client interface name\></c> corresponds to an IPC interface imported by a component.
 *
 * The @c protocol is the globally unique protocol identifier of the interface protocol that the
 * client and server share.  This is usually a cryptographic hash that uniquely identifies the
 * protocol content, even if the name of the protocol changes.
 *
 * Either <c>server/app</c> or <c>server/user</c> must exist, but never both.
 *
 * The <c>server/app</c> is the name of the application that will run the server on the target.
 *
 * The <c>server/user</c> is the name of the user account that will run the server on the target.
 *
 * The <c>server/interface</c> names correspond to IPC interfaces exported by components.
 *
 * @note Changing the binding configuration in the configuration tree does not automatically
 *       result in changes to the actual IPC bindings that are in effect in the Service Directory.
 *       The @ref sdTool implements a @c sync command that can be used to update the Service
 *       Directory with the latest binding configuration from the configuration tree.
 *
 * <hr>
 *
 * Copyright (C) Sierra Wireless, Inc. 2014. Use of this work is subject to license.
 */
