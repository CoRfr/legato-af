/** @page basicAppsIPC Use IPC

Lets explore how to use inter-process communication (IPC) between components:

 - Define a simple interface protocol that clients can use to ask servers to "Greet".
 - Create a server that prints "Hello world" whenever a client asks it to "Greet",
 - Create a client that asks the server to "Greet",

Here's what it looks like at runtime:

@image html HelloIPC.png

When we show the static view of components inside executables, it looks like this:

@image html HelloIPCWithComponents.png

Note that each interface has
 - an interface protocol
 - a friendly name.

In our example, the client and server both use the same friendly name "hello" for their
interfaces, and must use the same protocol (or they wouldn't be able to
communicate with each other!).

@section helloIPCDefiningTheAPI Define Interface Protocol

First, create a directory for our little project and change directories:

@verbatim
$ mkdir helloIPC
$ cd helloIPC
@endverbatim

Next, define the interface protocol to use between the client and the server.

To create our greet function-call API, we create a definition file called "greet.api".

@verbatim
$ gedit greet.api
@endverbatim

Add this inside greet.api:

@verbatim
FUNCTION Greet
(
);
@endverbatim

This will declare a function called @c Greet that takes no arguments and returns nothing.

@section basicAppsIPC_helloIPCCreateServer Create Server Component

Next, create a server component called @c greetServer that offers a greeting service
called "hello" to be accessed using our simple "greet" API.
Do this by creating a file called "Component.cdef" in a new directory
called "greetServer".

@verbatim
$ mkdir greetServer
$ gedit greetServer/Component.cdef
@endverbatim

@note Keeping components in separate directories from each other is a requirement of
      the framework.

greetServer/Component.cdef should contain the following:

@code

provides:
{
    api:
    {
        hello = greet.api
    }
}

sources:
{
    greetServer.c
}

@endcode

This declares that the component named @c greetServer (the name of the directory is the name
of the component) provides a service called @c hello accessed using the API defined
in @c greet.api where the source code can be found in the file @c greetServer.c.

@note The source code file name extension is used to identify the programming language
      it's written in.

To implement the server (in C), create a file @c greetServer/greetServer.c:

@verbatim
$ gedit greetServer/greetServer.c
@endverbatim

Make it contain the following:

@code

#include "legato.h"
#include "interfaces.h"

void hello_Greet(void)
{
    LE_INFO("Hello world.");
}

COMPONENT_INIT
{

}

@endcode

The file @c interfaces.h is auto-generated based on the contents of @c greet.api and
greetServer's @c Component.cdef. It'll contain a prototype of the function
@c hello_Greet(), which we implemented in @c greetServer.c.

The function @c hello_Greet() will be called when a client binds to our @c hello service
and calls the function @c Greet().  The name @c hello_Greet follows this pattern:

@verbatim
<interface-name> '_' <api-function-name>
@endverbatim

The <interface-name> is the name given to the provided interface.  In our example, it's
the name @c hello before the @c = in the line @c hello @c = @c greet.api.

@note If you forget to implement a service function on the server or if you give it the wrong name,
      the link stage will fail and complain that the symbol is unresolved. You'll know you
      missed a function, and you'll be able to see what the correct name of the function should be.

@section basicAppsIPC_helloIPCCreatingTheClient Create Client Component

Now that we have a server, let's create a client to use its service.

First, create a directory for the @c greetClient component and a file in it called
@c Component.cdef:

@verbatim
$ mkdir greetClient
$ gedit greetClient/Component.cdef
@endverbatim

greetClient/Component.cdef should contain:

@code

requires:
{
    api:
    {
        hello = greet.api
    }
}

sources:
{
    greetClient.c
}

@endcode

To implement the client using C, create a file called @c greetClient/greetClient.c:

@verbatim
$ gedit greetClient/greetClient.c
@endverbatim

Make it contain the following:

@code

#include "legato.h"
#include "interfaces.h"

COMPONENT_INIT
{
    hello_Greet();
}

@endcode

The @c interfaces.h file the client includes is different than the one the
server uses. This client one is specially generated  based on the contents of
@c greetClient/Component.cdef and @c greet.api.

In the client, we use the component initializer to call @c hello_Greet() at start-up.

You can add a message to the COMPONENT_INIT so the logs will show the client calling the
server:
@code
 {
    LE_INFO("greetClient is calling hello_Greet \n");
    hello_Greet();
}
@endcode

@section basicAppsIPC_createIPCadef Declare IPC Bindings

You can create an @ref defFilesAdef file with an @ref defFilesAdef_extern
section to declare it's available for binding:

@code

extern:
{
    helloWorld.greetServer.greet.api
}
@endcode

You only need to do this if you want to leave your interface unbound, and bind it later in the
@ref defFilesSdef file @ref defFilesSdef_bindings section.

<HR>

Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.

**/
