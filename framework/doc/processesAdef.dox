/** @page processesAdef  adef processes

@ref processRun <br>
@ref processenvVars <br>
@ref processPriority <br>
@ref processvMemSize <br>
@ref processcoreFileSize <br>
@ref processmaxFileSize <br>
@ref processmemLockSize <br>
@ref processnumFds <br>


Specify processes to run when the app is started. The processes section of the .adef has optional subsections.

Contains environment variables, limits, and handling actions that apply to all the processes listed.
If different processes have different variables, they must be in a separate processes: sections.

@code
processes:

    // Start up these processes when the app starts
    run: myProc1 ( myExe --foo -b 43 )
    run: myProc2 ( myExe –bar --b 92 )
    run: ( myExe2 "Hello, world." )  // If no proc name is specified, uses the exe name by default.

    // Env var settings (name = value) for all processes in this section.
    envVars:
        LE_LOG_LEVEL = DEBUG
        LE_LOG_LOCATION = "stderr + syslog"

    priority: medium    // Starting (and maximum) scheduling priority.  Process can only lower its priority from here.

    vMemSize: 200K      // Maximum number of bytes of virtual memory that can be allocated to the process.
    coreFileSize: 100K  // Maximum size of core dump files.
    maxFileSize: 50K    // Files are not allowed to grow bigger than this.
    memLockSize: 32K    // Maximum number of bytes allowed to be locked into physical memory using mlock().
    numFds: 20          // Maximum number of file descriptors allowed to be open at the same time.

processes:

    run: ( realTimeExe )

    priority: rt10
    vMemSize: 500K

    /*-- Exception handling policy for processes in this section. --*/
    faultAction: restart   // Restart the process if it fails.
    watchdogAction: restart  // If the process doesn't kick its watchdog timer, kill it and restart it.
 @endcode

@section processRun run

Names a process to be started by the Supervisor when the app is started. Also specifies executable and command-line arguments.

@code
run: myProc1 ( myExe --foo -b 43 )
@endcode

Process name and command-line arguments are optional
@code
run: ( myexe ) @endcode

Executables launched multiple times can appear in multiple “run” sections.
@code
run: ( myexe )
run: ( myexe ) @endcode

Command-line arguments passed to the process when started can appear after the executable name.
@code
run: ( myexe --foo ) @endcode

@code
run: ( myexe --bar  // Note that the command-line can be broken into multiple lines for readability.
           --toto ) // And it can be commented too. @endcode

Runtime process name is the same as the executable by default.
If the process name should be different, add the process name before the executable name.

@code
run: procA ( myexe2 --foo )
run: procB ( myexe2 --bar ) @endcode

Executable names can be the ones listed in the app’s “executables:” section,
listed in the “import:” section or the "files:" section, in Component.cdef “files:” section of an included component.

Quotation marks (either single ' or double ") can be used if white-space (spaces, tabs, //, /*, etc.)
is needed inside a command-line argument, or if an empty argument is needed ("").

@code
    run: ( greet "Hello world" )
    run: ( greet "Hello \"Mr. Smarty-pants\"" )
    run: ( greet 'Hello "Mr. Smarty-pants"' )
    run: ( fetchFromSmbShare "\\\\Server\\Share\\Directory\\file" ) 
    @endcode
    

@section processenvVars environment variarbles 

Environment variables appear as "name = value" pairs. The first value is the environment variable name; the second part is the variable value. Enclose the value in quotation marks (either single ' or double ") if white-space is required (spaces, tabs, //, /*, etc.).
@code
    envVars:
        LE_LOG_LEVEL = DEBUG
        LE_LOG_LOCATION = "stderr + syslog"
@endcode


@section processPriority priority

Specifies the starting (and maximum) scheduling priority. A running app process can only lower
 its priority from this point. Once it has lowered its priority, it can't raise it again. If the process starts at 
 medium priority and reduces to low priority, it can't go back to medium priority.
 
 Values:
- @b idle -  for very low priority processes that only get CPU time if no other processes waiting for the CPU.
- @b low, @b medium, @b high - intended for normal processes that contend for the CPU. 
Processes with these priorities don't preempt each other, but their priorities affect how they're 
inserted into the schdeduling queue (high to low).
- @b rt1 to @b rt32  - intended for (soft) realtime processes. A higher realtime priority
 will pre-empt a lower realtime priority (ie. "rt2" would pre-empt "rt1"). 
 Processes with any realtime priority will pre-empt processes with high, medium, low and idle priorities. 
 Processes with these realtime priorities pre-empt the Legato framework processes. 
 Ensure design lets realtime processes relinquish the CPU appropriately.

@code
priority: medium
@endcode

@section processvMemSize virtual memory

Specifies the maximum number of virtual memory bytes processes in this section are permitted.

@code
vMemSize: 200K
@endcode

@section processcoreFileSize core dump files

Specifies the maximum size of core dump files that can be created when processes crash. Default is @b zero.
The @a K suffix permits specifying in kilobytes (multiples of 1024 bytes).

@code
coreFileSize: 100K
@endcode

@section processmaxFileSize max file size

Specifies the maximum size processes can make files. The @a K suffix permits specifying in kilobytes (multiples of 1024 bytes).

@code
maxFileSize: 50K
@endcode

@section processmemLockSize max memory lock

Specifies the maximum bytes of memory the process can lock into physical RAM (e.g., using mlock () ).

@code
memLockSize: 32K
@endcode

@section processnumFds file descriptors

Specifies the maximum number of file descriptors a process can have open at one time.

@code
numFds: 20 
@endcode

 <br>
<HR>


Copyright (C) Sierra Wireless, Inc. 2013. All rights reserved. Use of this work is subject to license.

**/
