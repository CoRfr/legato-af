/** @page languageIndependentSyntax API Definition Syntax

The API file supports defining functions, events, handlers and user defined types.
Functions are similar to C functions.  They can take input and output parameters, and
can return a result.
An event is similar to a function and is used for registering handlers/callbacks, which
are called when the corresponding event occurs.
A handler defines a handler/callback function, which can be used with functions and events.
The API file currently supports a limited number of pre-defined types.  There is
also support for a number of different user-defined types.

@section languageIndependentSyntax_types Type Support

The API file currently supports a limited number of pre-defined types.  These are:

@verbatim
uint8
uint16
uint32
uint64

int8
int16
int32
int64

string
file
handler
@endverbatim

The unsigned and signed integer types are self-explanatory.
See @ref languageIndependentSyntax_function for details on the @c string type.
The @c file type is used to pass an open file descriptor (fd) as a parameter.  This is
used for passing an fd between a client and server.
The @c handler type is used for passing a handler as a parameter.

The following user-defined types are supported:

 - DEFINE
 - ENUM
 - BITMAP
 - REFERENCE

Type definitions can also be shared between API files with USETYPES.

Also, all C types defined in the @c legato.h file are available. The most commonly used of these is
the @ref le_result_t type. Support for directly using these C types is a temporary measure and will
be removed in a future release.


@subsection languageIndependentSyntax_typesDefine DEFINE

A DEFINE is specified as:

@verbatim
DEFINE <name> = <value>;
@endverbatim

The @c value can be a string or an expression evaluated to a numeric value (when the definition is
read).


@subsection languageIndependentSyntax_typesEnum ENUM

An ENUM is specified as:

@verbatim
ENUM <name>
{
    [<elementList>]
};
@endverbatim

The @c elementList is a comma separated list of elements.  The elements should all be uppper-case.
Element values assigned are internally generated and can't be explicitly given.


@subsection languageIndependentSyntax_typesBitmask BITMASK

A BITMASK is a special type of ENUM.  It is specified the same way as an ENUM, but the internally
generated element values are bit positions, i.e. 0x1, 0x2, 0x4, etc.


@subsection languageIndependentSyntax_typesReference REFERENCE

A REFERENCE is specified as:

@verbatim
REFERENCE <name>;
@endverbatim

The REFERENCE is used to define a reference to an object. The object reference is mapped to an
opaque reference in C and an object instance or similar in other languages.


@subsection languageIndependentSyntax_typesUsetypes USETYPES

You can share type definitions between .api files with USETYPES. This is commonly referred to as
importing, although only the type definitions are imported or used. Any code related definitions in
a .api file, e.g. FUNCTION, are ignored.  These USETYPES can even be nested.

As an example of usage, suppose the files defs.api, common.api and example.api are defined as
follows:

defs.api
@verbatim
DEFINE FIVE = 5;
@endverbatim

common.api
@verbatim
USETYPES defs.api;

DEFINE TEN = defs.FIVE + 5;
@endverbatim

example.api
@verbatim
USETYPES common.api;

DEFINE twenty = common.TEN + defs.FIVE + 5;
@endverbatim

This example illustrates that nesting causes an implicit USETYPES.  Thus, any definitions from
defs.api, can be used in example.api, in the same way as if it had explicitly imported defs.api.


@section languageIndependentSyntax_function Specifying a Function

A function is specified as:

@verbatim
FUNCTION [<returnType>] <name>
(
    [<parameterList>]
);
@endverbatim

The @c parameterList can contain one or more parameters separated by commas, or can be empty
if there are no parameters.  The scalar type refers to anything that's not an array or string
(i.e. scalar types do not have a length). These parameters types are supported:

@code
<tt> \<type\> \<name\> [ ( "IN" | "OUT" ) ]</tt>@endcode
     - scalar type
     - defaults to IN if a direction is not specified

@code
<tt> \<type\> \<name\> "[" [ \<minSize\> ".." ] \<maxSize\> "]" "IN" </tt>@endcode
     - an IN array
     - @c maxSize specifies the maximum number of elements allowed for the array
     - optional @c minSize specifies the minimum number of elements required for the array


@code<tt> \<type\> \<name\> "[" \<minSize\> "]" "OUT" </tt>@endcode
     - an OUT array
     - array should be large enough to store @c minSize elements;  if supported by the
       function implemention, a shorter OUT array can be used.


@code<tt> "string" \<name\> "[" [ \<minSize\> ".." ] \<maxSize\> "]" "IN" </tt>@endcode
     - an IN string
     - @c maxSize specifies the maximum string length allowed,
     - optional @c minSize specifies the minimum string length required
     - string length is given as number of characters, excluding any terminating characters


@code<tt> "string" \<name\> "[" \<minSize\> "]" "OUT" </tt>@endcode
     - an OUT string
     - string should be large enough to store @c minSize characters; if supported by the
       function implemention, a shorter OUT string can be used.
     - string length is given as number of characters, excluding any terminating characters

The @c returnType is optional, and if specified, must be a scalar type as described above.

The @c handler type is treated a little differently than other scalar types.  In this case,
the @c name is that of an already defined handler.  See @ref languageIndependentSyntax_handler
for details.


@section languageIndependentSyntax_event Specifying an Event

Do this to specify an event:

@verbatim
EVENT <eventType>
(
    <parameterList>
);
@endverbatim

The @c parameterList can contain one or more parameters separated by commas.
It can contain anything that's valid for a function, but it must contain one handler parameter.
The parameters are used when registering a handler for the specified event.

See @ref languageIndependentC_event for details on the C code generated from the above event
definition.


@section languageIndependentSyntax_handler Specifying a Handler

Do this to specify a handler:

@verbatim
HANDLER <handlerType>
(
    [<parameterList>]
);
@endverbatim

The @c parameterList can contain one or more parameters separated by commas, or can be empty
if there are no parameters.  
It can only contain scalar types or string types, as described above for 
@ref languageIndependentSyntax_function.
All the parameters should be IN parameters.  

See @ref languageIndependentC_handler for details on the C code generated from the above handler
definition.


@section languageIndependentSyntax_comments Comments

The API file supports both C and C++ comment styles.  Comments that use the doxygen formats
@verbatim /** @endverbatim to start a multi-line comment or @verbatim ///< @endverbatim
to start a one line comment receive special processing.  Multi-line comments at the start of the
API file will be copied directly to the start of the appropriate generated files.

Comments given in the function definition will be copied to the appropriate generated files
under the following conditions:
 - Multi-line comments must start with @verbatim /** @endverbatim
 - Single-line comments must start with @verbatim ///< @endverbatim
 - In a block of single-line comments, each line must start with @verbatim ///< @endverbatim
   rather than just the first line.  This is different from typical doxygen usage.
 - If the function definition is preceded by a multi-line comment then this comment will be
   copied to the appropriate generated files.
 - If any parameter is followed by a multi-line comment or one or more single line comments,
   then all these comments will be copied to the appropriate generated files.

If an event or handler definition is preceded by a multi-line comment, then this comment will be
copied to the appropriate generated files, under the same conditions as function definitions.

Any comments provided after an element in an ENUM or BITMASK, will be copied to the appropriate
generated files, under the same conditions as function parameter comments.


@section languageIndependentSyntax_sample Sample API

Here's the @c defn.api file containing just type defintions

@verbinclude defn.api

Here's the @c common.api file containing just type defintions, and using the types defined
in @c defn.api

@verbinclude common.api

Here's the @c example.api file containing various definitions, and using the types defined
in @c defn.api and @c common.api

@verbinclude example.api

<HR>

Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.

**/
