/** @page defFilesAdef Application Definition .adef

<c>.adef</c> files can contain these sections:

@section defFilesAdef_bindings Bindings

Bindings allow client-side IPC API interfaces (listed in the @a requires sections of
Component.cdef files) to be bound to server-side interfaces (listed in the @a provides sections
of Component.cdef files).

This gives direct control over how IPC interfaces are interconnected so reusable
components and/or apps can be bound (wired) together to form a working system.

Bindings can be between two interfaces inside the same app (internal binding), or can be
between a client-side interface in an app and a server-side interface provided by another
app (or non-app user).

Interface instances inside the app use the executable name, component name,
and the service instance name separated by a period (‘.’).

The client interface always appears first with an arrow (<c> -> </c>) to separate
the client interface from the server interface.

@warning The @c bindings: section must be listed in the @c .adef file after the
@ref  defFilesAdef_executables section.

Here's a code sample binding @c clientExe.clientComponent.clientInterface to
@c serverExe.serverComponent.serverInterface:

@verbatim
bindings:
{
    clientExe.clientComponent.clientInterface -> serverExe.serverComponent.serverInterface
}
@endverbatim

External services provided by other apps use the app name and the service name,
separated by a period ('.'):

@verbatim
bindings:
{
    clientExe.clientComponent.clientInterface -> otherApp.serverInterface
}
@endverbatim

To bind to a service provided by a non-app user, the app name is replaced by a user name inside
angle brackets:

@verbatim
bindings:
{
    clientExe.clientComponent.clientInterface -> <root>.serverInterface
}
@endverbatim

If client-side code was built using the @c ifgen tool or
@ref buildToolsmkcomp or @ref buildToolsmkexe with requires or bundles sections,
the tool reading your .adef file won't know about the client-side interface. Use a special
work-around to bind those interfaces:

@verbatim
bindings:
{
    *.le_data -> dataConnectionService.le_data
}
@endverbatim

This would bind any unknown client-side @c le_data interfaces in the current app to the @c le_data
server-side interface on the @c dataConnectionService app.

@section defFilesAdef_bundles Bundles

Lists additional files or directories to be copied from the build host into the app
so they’re available to the app at runtime (e.g., audio files, web pages, executable scripts
or programs built using some external build system).

@verbatim
bundles:
{
    file:
    {
        // Include the web server executable (built using some other build tool) in the app's /bin.
        [x] 3rdParty/webServer/bin/wwwServ  /bin/

        // Put the company logo into the app's /var/www/ for read-only access by the web server.
        images/abcCorpLogo.jpg  /var/www/

        // Make the appropriate welcome page for the product appear at /var/www/index.html.
        webContent/$PRODUCT_ID/welcome.html  /var/www/index.html

        // Create a file to record persistent custom audio messages into.
        [w] audio/defaultMessage.wav  /usr/share/sounds/customMessage.wav
    }

    dir:
    {
        // Recursively bundle the directory containing all the audio files into the app.
        // It will appear to the app read-only under /usr/share/sounds/.
        audio   /usr/share/sounds
    }
}
@endverbatim

Three things need to be specified for each file or directory:
- access permissions
- build system path
- target path

<b>Access permissions</b> - any combination of one or more of the following letters, enclosed in
square brackets:
- r = readable
- w = writeable
- x = executable

If permissions values are not specified, then read-only ([r]) is the default.

Directories always have executable permission set so they can be traversed. Setting the
<c>[x]</c> permission in the @c dir: subsection causes the files under the directory to be made
executable.

Setting <c>[w]</c> in the @c dir: subsection causes all files under that directory to be writeable,
but the directory itself will not be writeable.

@warning    Access permissions aren't implemented yet.  For now, everything that gets installed in
            the app's @c bin directory on the target gets @c rx permission, all other files
            get @c r, and directories get @c rx.

@note   Directories in the persistent (flash) file system are never made writeable because the
        on-target flash file system does not support usage quotas (yet).

<b>Build system path</b> - file system path on the build PC where the file is located at build time.

The path can be relative to the directory where the @c .adef file is located.

@note   Environment variables can be used inside these paths.

<b>Target path</b> - file system path on the target where the file will appear at runtime.

It's an absolute path inside the app's sandbox file system.

If the path ends with '/', it means the directory path where the source object (file or directory)
will be copied. The destination object will have the same name as the source object.

If the path doesn't end in a '/', it's a full destination object path. The destination object
could have a different name than the source object.

@note  If the app is running unsandboxed, the bundled files and directories can be found
        in their installation location under @c /opt/legato/apps/xxxx, where xxxx is replaced by
        the app name.

<b>Quoting Paths</b>

File paths can be enclosed in quotation marks (either single ' or double ").
This is required when the file path contains spaces or comment start sequences
@verbatim
"//" or  "/*"
@endverbatim


<b>File Ownership and Set-UID Bits</b>

When the app is installed on a target: <br>
- the owner and group are set to @c root on all files in the app.
- the @c setuid bit is cleared on everything in the app.

@section defFilesAdef_cpuShare CPU Share

Specifies the relative cpu share for an app.

Cpu share calculates the cpu percentage for a process relative to all other processes
in the system.  New cgroups and processes default value of @b 1024 if not otherwise configured.
The actual percentage of the cpu allocated to a process is calculated like this:

 (share value of process) / (sum of shares from all processes contending for the cpu)

All processes within a cgroup share the available cpu percentage share for that cgroup like this:

- cgroupA is configured with the default share value, 1024.
- cgroupB is configured with 512 as its share value.
- cgroupC is configured with 2048 as its share value.

- cgroupA has one process running.
- cgroupB has two processes running.
- cgroupC has one process running.

This assumes all processes in cgroupA, cgroupB and cgroupC are running and not blocked waiting
for an I/O or timer event, and another system process is also running.

Sum of all shares (including the one system process) is 1024 + 512 + 2048 + 1024 = 4608

The process in cgroupA will get 1024/4608 = 22% of the cpu.
The two processes in cgroupB will share 512/4608 = 11% of the cpu, each process getting 5.5%.
The process in cgroupC will get 2048/4608 = 44% of the cpu.
The system process will get 1024/4608 = 22% of the cpu.

@verbatim
cpuShare: 512
@endverbatim

@section defFilesAdef_executables Executables

Lists executables to be constructed and moved to the @c bin directory inside the app.

An executable’s content is specified inside parentheses after the name, and can be one of these:
- relative file system path to source code file
- component
- relative file system path to library file (e.g., .a or .so file).

@note    Only C/C++ source files, components, and libraries are currently supported. The
@c excutable: section must be listed in the @c .adef file before the @c bindings: section.

@verbatim
executables:
{
    myexe1 = ( file1.c libgoodstuff.so )
    myexe2 = ( foobar toto )
}
@endverbatim

Components included in an executable will be built and linked into
the executable, and its COMPONENT_INIT function will be run at process start-up.
The component’s runtime files (shared libraries, source code, etc.) will be
packaged inside the app to be installed on the target.

Source files included in an executable will be searched for by the build tools in the file system
based on the source search path. If found, it'll be compiled (if written in a compiled
language) and linked into the executable. All source files specified for an executable
together are considered a component, which will have the same name as the executable. One
of the source files will be expected to implement a COMPONENT_INIT function,
called at start-up.

If a library is included in an executable, it's expected to be found in the @c requires or
@c bundles section of the app’s .adef file or the Component.cdef file included in the app.
When the executable is linked, it'll be linked with these libraries in the order listed.
You can list the same library more than once; sometimes it's necessary
in order to satisfy all unresolved symbols, due to the single-pass nature of the linker.

The mechanism use to construct both executables and components depend on the type of content and the
target device.

C and C++ files will be compiled and linked using the appropriate
compiler tool chain based on the target.

Java code will be compiled to Java bytecode.
Interpreted code, such as Python code will be simply copied into the app.

@note There may be incompatibilities between components or source code files that
prevent them from being included in the same executable (e.g., Java sources and C sources
into the same executable together). The build tools will advise if there's a problem.

@section defFilesAdef_groups Groups

Add an app's user to groups on the target system.

@verbatim
groups:
{
    www-data
    modem
}
@endverbatim

@section defFilesAdef_maxFileSystemBytes Max File System Bytes

Specifies the maximum amount of RAM that can be consumed by an app's temporary (volatile) file
system at runtime.

Default is @b 128K

@verbatim
maxFileSystemBytes: 120K
@endverbatim

@note The file system size will also be limited by the @c maxMemoryBytes limit.

@section defFilesAdef_maxMemoryBytes Max Memory Bytes

Specifies the maximum amount of memory (in bytes) that all processes in an app can share.
Default is @b 40960K (40MB).

@verbatim
maxMemoryBytes: 1000K
@endverbatim

@note Will be rounded to the nearest memory page boundary.

@section defFilesAdef_maxMQueueBytes Max MQueue Bytes

Specifies the maximum number of bytes that can be allocated for POSIX MQueues. Default is @b 512.

@verbatim
maxMQueueBytes: 16K
@endverbatim

@section defFilesAdef_maxQueuedSignals Max Queued Signals

Specifies the maximum number of signals that can be waiting for delivery to processes in the app.

This limit will only be enforced when using @c sigqueue() to send a signal.
Signals sent using @c kill() are limited to at most one of each type of signal anyway.

Default is @b 100.

@verbatim
maxQueuedSignals: 200
@endverbatim

@section defFilesAdef_maxThreads Max Threads

Specifies the maximum number of threads allowed to run at one time: an integer number.

@note A single-threaded process (a running program that doesn't start any
threads other than the one running the <c>main()</c> function) counts as one thread.

If @c fork() calls or @c pthread_create() calls start failing with error code @c EAGAIN (seen in strace
output as @c clone() system calls), then you are probably running into this limit.

Default is @b 20.

@verbatim
maxThreads: 4
@endverbatim

@section defFilesAdef_process Processes

A @c processes section specifies processes to run when the app is started including
environment variables, command-line arguments, limits, and fault handling actions.

The @c processes section is divided into subsections.
@ref

If different processes have different variables, they must be in separate @c processes: sections.

@verbatim
processes:
{
    // Start up these processes when the app starts
    run:
    {
        myProc1 = ( myExe --foo -b 43 )
        myProc2 = ( myExe –bar --b 92 )
        ( myExe2 "Hello, world." )  // If no proc name is specified, uses the exe name by default.
    }

    // Env var settings (name = value) for all processes in this section.
    envVars:
    {
        LE_LOG_LEVEL = DEBUG
    }

    priority: medium    // Starting (and maximum) scheduling priority.
                        // Process can only lower its priority from here.

    maxCoreDumpFileBytes: 100K  // Maximum size of core dump files.
    maxFileBytes: 50K           // Files are not allowed to grow bigger than this.
    maxLockedMemoryBytes: 32K   // Can't mlock() more than this many bytes.
    maxFileDescriptors: 20      // Can't have more than this number of FDs open at the same time.
}

processes:
{
    run:
    {
        ( realTimeExe )
    }

    priority: rt10   // Allow real-time scheduling (max priority 10) for processes in this section.

    /*-- Exception handling policy for processes in this section. --*/
    faultAction: restart   // Restart the process if it fails.
}
@endverbatim


@subsection defFilesAdef_processRun Run

Names a process to be started by the Supervisor when the app is started. Also specifies executable
and command-line arguments.

@code
run:
{
    myProc1 = ( myExe --foo -b 43 )
}
@endcode

Process name and command-line arguments are optional.

@code
run:
{
    ( myexe )
}
@endcode

If the process name is not specified, then the process will be given the same name as the
executable it's running (e.g.  @c myexe)

A given executable can be launched multiple times.
@code
run:
{
    process1 = ( myexe )
    process2 = ( myexe )
}
@endcode

Command-line arguments passed to the process when started can appear after the executable name.
@code
run:
{
    ( myexe --foo )
}
@endcode

@code
run:
{
    ( myexe --bar  // Note that the command-line can be broken into multiple lines for readability.
            --toto ) // And it can be commented too.
}
@endcode

Executable names can be the ones listed in the app’s @c executables: section.
They can also be the names of files that are bundled into the app with <c>[x]</c> (executable)
permission.

Quotation marks (either single @b ' or double @b ") can be used if white-space
(spaces, tabs, @c //, etc.) is needed inside a command-line argument, or if an empty argument is
needed ("").

@subsection defFilesAdef_processEnvVars Env Vars

Environment variables appear as name = value pairs. First is the environment variable
name and second is the variable value.

Enclose the value in quotation marks (either single ' or double ") if white-space is required:

@code
envVars:
{
    LE_LOG_LEVEL = DEBUG
    MESSAGE = "The quick brown fox jumped over the lazy dog."
}
@endcode

@subsection defFilesAdef_processFaultAction Fault Action

Specifies the action the Supervisor should take when the process terminates
with a non-zero exit code or because of an un-caught signal (e.g., SIGSEGV, SIGBUS, SIGKILL).

Possible values are:

 - @c ignore - Supervisor just logs a warning message; no further action taken.
 - @c restart - log a critical message and restart the process.
 - @c restartApp - log a critical message and restart the entire app.
 - @c stopApp - log a critical message and terminate the entire app (send all processes
the SIGTERM signal, followed shortly by SIGKILL).
 - @c reboot - log an emergency message and reboot the system.

Default is @b ignore.

@code
faultAction: restart
@endcode

@subsection defFilesAdef_processPriority Priority

Specifies the starting (and maximum) scheduling priority. A running app process can only lower
its priority from this point. Once it has lowered its priority, it can't raise it again (e.g., if
the process starts at medium priority and reduces to low priority, it can't go back to medium
priority). The default is @b medium.

Values:
- @b idle - for low priority processes that get CPU time only if no other processes are waiting.
- @b low, @b medium, @b high - intended for normal processes that contend for the CPU.
Processes with these priorities don't preempt each other, but their priorities affect how they're
inserted into the scheduling queue (high to low).
- @b rt1 to @b rt32  - intended for (soft) realtime processes. A higher realtime priority
will preempt a lower realtime priority (ie. rt2 would preempt rt1).
Processes with any realtime priority will preempt processes with high, medium, low and
idle priorities.

@warning Processes with realtime priorities preempt the Legato framework processes.
         Ensure that your design lets realtime processes relinquish the CPU appropriately.

@code
priority: medium
@endcode

@subsection defFilesAdef_processMaxCoreDumpFileBytes Max Core Dump File Bytes

Specifies the maximum size (in bytes) of core dump files that can be generated by processes.

Default is @b 8K

@note   Core dump file size is limited by @ref defFilesAdef_processMaxFileBytes. If the
        the core file is generated in the sandbox's temporary runtime file system, it 'll
        also be limited by @ref defFilesAdef_maxFileSystemBytes.

@code
maxCoreDumpFileBytes: 100K
maxFileBytes: 100K
maxFileSystemBytes: 200K
@endcode

@subsection defFilesAdef_processMaxFileBytes Max File Bytes

Specifies the maximum size processes can make files. The @a K suffix permits specifying in
kilobytes (multiples of 1024 bytes).

Default is @b 88K

@code
maxFileBytes: 200K
@endcode

Exceeding this limit results in a @c SIGXFSZ signal sent to the process. By default, this
 kills the process, but it can be blocked or caught to receive an error
 with @c errno set to @c EFBIG.

@note   If the file is in the sandbox's temporary runtime file system, the file size will also
        be limited by @ref defFilesAdef_maxFileSystemBytes and @ref defFilesAdef_maxMemoryBytes.

@subsection defFilesAdef_processMaxFileDescriptors Max File Descriptors

Specifies the maximum number of file descriptors a process can have open at one time.

Default is @b 256

@code
maxFileDescriptors: 100
@endcode

@subsection defFilesAdef_processMaxLockedMemoryBytes Max Locked Memory Bytes

Specifies the maximum bytes of memory the process can lock into physical RAM
(e.g., using @c mlock() ).

Can't be higher than @ref maxMemoryBytes.

Default is @b 8K

@code
maxLockedMemoryBytes: 100K
@endcode

@note   Also limits the maximum number of bytes of shared memory the app can lock into
        memory using @c shmctl().

@subsection defFilesAdef_processWatchdogAction Watchdog Action

Specifies the action the Supervisor should take when a process subscribed
to the watchdog service fails to kick the watchdog before it expires. Possible values are the same
as in @ref defFilesAdef_processFaultAction as well as:

@c stop -  Supervisor terminates the process if it's still running.
If a watchdog action has not been supplied, the default action will restart the process.

@subsection defFilesAdef_processWatchdogTimeout Watchdog Timeout

Specifies the timeout length (in milliseconds) for watchdogs called by processes
in the enclosing processes section.

Once a process has called @c le_wdog_Kick(),  it's registered with
the software watchdog service. If it then fails to call @c le_wdog_Kick() within the given timeoutout,
the Supervisor is notified will take the action specified in @ref defFilesAdef_processWatchdogAction

@section defFilesAdef_provides Provides

The @c provides: section is used to specify things the app provides to other apps
(or non-app processes) in its runtime environment.

For now, only @c api: subsections are supported.

@subsection defFilesAdef_providesApi API

Declares that a server-side IPC API interface is available for other
apps (or non-app users) to use via @ref defFilesAdef_bindings.

This code sample declares the @c temperature interface on the @c thermistor
component in the @c sensor executable should be made into a bindable external interface
called @c spaceTemp:

@verbatim
provides:
{
    api:
    {
        spaceTemp = sensor.thermistor.temperature
    }
}
@endverbatim

If the app was called @a thermometer, then other apps could bind their client-side
interfaces to @c thermometer.spaceTemp to receive temperature readings from this sensor app.

Internal interface instances are identified by the executable, component, and
component's interface names. The different interface instance identifier parts are
separated by a period (‘.’).

@section defFilesAdef_requires Requires

The @c requires: section specifies things the app needs from its runtime
environment.

It can contain various subsections.

@subsection defFilesAdef_requiresApi API

Declares a client-side IPC API interface on an executable inside the app needs to be bound
to a service provided by something outside the app.

Interfaces inside the app are identified by the executable, component, and
component's interface names (separated by a period ‘.’).

This code sample declares that the @c temperature interface on the @c tempInput
component in the @c controller executable should be made into a bindable external interface:

@verbatim
requires:
{
    api:
    {
        controller.tempInput.temperature
    }
}
@endverbatim

Outside the app, this client-side interface will be called @c temperature (hiding
from other apps the details of what executable and component implements the interface).

To have other apps to see an interface with a different name,
add @c alias = differentname in front of the interface specification:

@verbatim
requires:
{
    api:
    {
        airTemp = controller.tempInput.temperature
    }
}
@endverbatim

If this app were called thermostat, then in a @c .sdef file, the interface would be called
thermostat.airTemp.

@subsection defFilesAdef_requiresConfigTree Config Tree

Declares the app requires access to a specified configuration tree.
Each app has its own configuration tree named after the app.
There's also a system configuration tree that contains privileged system data.

By default, an app only has read access to its own configuration tree.

Apps can be granted read access or both read and write access to trees using an optional
access permission specifier:

 - <c>[r]</c> - grant read-only access
 - <c>[w]</c> - grant read and write access

If access is granted to a tree, but the access mode ([r] or [w]) is not specified,
 only read permission will be granted.

A special tree name "." can be used to refer to the app's own configuration data tree.

@verbatim
requires:
{
    configTree:
    {
        [w] .       // I need write access to my configuration data.
        otherApp    // I need read access to another app's configuration data.
    }
}
@endverbatim

@warning    Because configuration data can be saved to flash storage, granting write access to a
            configuration tree can make it possible for the app to wear out
            your flash device.  Granting an app write access to another
            app's configuration settings creates a security hole, because it
            it's possible for one app to interfere with the operation of another
            app. It's especially dangerous to grant write access to the system tree, because
            it's possible to completely compromise the target device. Even read access may
            be dangerous if any kind of security key, including PIN and PUK codes, are kept in
            the system tree. <b>Apps should never be given direct access
            to the system tree.</b>

@subsection defFilesAdef_requiresDir Dir

Used to declare that certain directories that reside on the target device outside of the
app are to be made accessible to the app.

The location inside the app's sandbox at which the directory will appear is also specified.

Things listed here are expected to be found on the target at runtime.
They are not copied into the app at build time; they are made accessible to the app inside of
its sandbox at runtime.

Each entry consists of two file system paths:

 - The @b first path is the path to the directory @b outside of the app.
   This must be an absolute path (beginning with ‘/’) and can never end in a '/'.

 - The @b second path is the absolute path @b inside the app’s sandbox where the directory
   will appear at runtime.

Paths can be enclosed in quotation marks (either single ' or double "). This is required when
it contains spaces or character sequences that would start comments.

If the second path ends in a '/', then it's specifying the directory into which the object will
appear, and the object will have the same name inside the sandbox as it has outside the sandbox.

@verbatim
requires:
{
    dir:
    {
        // I need access to /proc for debugging.
        /proc   /

        // For now, I want access to all executables and libraries in /bin and /lib.
        // Later I'll remove this and replace with just the files I really need in the field.
        // Also, I don't want to hide the stuff that the tools automatically bundle into my app's
        // /bin and /lib for me, so I'll make the root file system's /bin and /lib accessible as
        // my app's /usr/bin and /usr/lib.
        /bin    /usr/bin
        /lib    /usr/lib
    }
}
@endverbatim

@note   Even though the directory appears in the app's sandbox
        doesn't mean the app can access it. The directory permissions settings
        must also allow it.  File permissions (both DAC and MAC) and ownership
        (group and user) on the original files in the target system remain in effect inside
        the sandbox.

@warning    Any time anything is made accessible from inside an app sandbox, the security
            risks must be considered carefully.  Ask yourself if access to the object can be
            exploited by the app (or a hacker who has broken into the app) to access sensitive
            information or launch a denial-of-service attack on other apps within the target
            device or other devices connected to the target device?

@note   It's not possible to put anything inside of a directory that was mapped into the
        app from outside of the sandbox.  If you @a require @c /bin to appear at
        @c /usr/bin, you can't then @a bundle a file into @c /usr/bin or @a require something to appear
        in @c /usr/bin; that would have an effect on the contents of the /bin directory outside
        of the app.

@subsection defFilesAdef_requiresFile File

Declares:
- specific files that reside on the target outside of the app,
but made accessible to the app.
-  location inside the app's sandbox where the file will appear.

Things listed in @c requires are expected to be found on the target at runtime.
They're not copied into the app at build time; they are made accessible to the app inside of
its sandbox at runtime.

Each entry consists of two file system paths:

 - path to the object in the file system outside of the app, which
    must be an absolute path (beginning with ‘/’).

 - absolute file system path inside the app’s sandbox where the object will
   appear at runtime.

A file path can be enclosed in quotation marks (either single ' or double "). This is required when
it contains spaces or character sequences that would start comments.

The first path can't end in a '/'.

If the second path ends in a '/', then it's specifying the directory where the object
appears, and the object has the same name inside the sandbox as it has outside the sandbox.

@verbatim
requires:
{
    file:
    {
        // I get character stream input from outside via a named pipe (read-only)
        /var/run/someNamedPipe  /var/run/

        // I need read and write access to UART2.
        /dev/ttyS1  /dev/

        // I need to be able to play back audio files installed in /usr/local/share/audio.
        "/usr/local/share/audio/error message.wav" /usr/share/audio/
        '/usr/local/share/audio/success message.wav' /usr/share/audio/
    }
}
@endverbatim

@note   Even though the file system object appears in the app's sandbox it still needs
         permissions settings on the file.  File permissions (both DAC and MAC) and ownership
        (group and user) on the original file in the target system remain in effect inside
        the sandbox.

It's also possible to give the object a different names inside and outside of the sandbox by
 adding a name to the end of the second path.

@verbatim
requires:
{
    file:
    {
        /dev/ttyS0  /dev/port1     // Program uses /dev/port1, but UART0 is called /dev/ttyS0.
    }
}
@endverbatim

@warning  When something is accessible from inside an app sandbox, there are potential security
            risks  (e.g., access to the object could be exploited by the app, or hacker, to access sensitive
            information or launch a denial-of-service attack on other apps within the target
            device or other devices connected to the target device).

@section defFilesAdef_sandbox Sandbox

Specifies if the app will be launched inside a sandbox.

Permitted content in this section is:

 - @b true - app will be run inside of a sandbox.
 - @b false - app won't be run in a sandbox.

The default is @b true.

If an app is unsandboxed (app is not inside of a sandbox), it can see the target device's real root file
system. A sandboxed app can't see the target's real root file system; a sandboxed app has a
separate root file system, which it can't leave.

Each app has its own user and primary group IDs. The app's user name and primary group name
are both @c appxxxx", where the @c xxxx is the name of the app.

User and/or group will be automatically created if missing for the specified app, but
only users and groups of sandboxed apps will automatically be deleted when those apps are
uninstalled.

@verbatim
sandboxed: false
@endverbatim

@section defFilesAdef_start Start

Specifies if the app should start automatically at start-up:
- @b auto starts automatically by the Supervisor.
- @b manual" starts through manual prompt to the Supervisor.
Default is @b auto.

@verbatim
start: auto
@endverbatim

@section defFilesAdef_version Version

Optional field that specifies a string to use as the app's version string.

@verbatim
version: 0.3a
@endverbatim

@note
 - The @b <c>--append-to-version</c> option to @c mkapp can be used to add to the app's
   version string.
 - <b><c>app foo version</c></b> can be run on-target to get the version string of the app called "foo".

@section defFilesAdef_watchdogAction Watchdog Action

The @c watchdogAction section sets the recovery action to take if a process in this app
expires its watchdog. This value will be used if there is no value set in the processes section
for a given process. See @ref defFilesAdef_processWatchdogAction in the processes section.

@section defFilesAdef_watchdogTimeout Watchdog Timeout

The @c watchdogTimeout section sets the default timeout in milliseconds for processes in this
app. Will be used if there's no value set in the processes section for
a given process. See @ref defFilesAdef_processWatchdogTimeout in the processes section.

<HR>

Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.

**/
