/** @page howToConfigTreeTransactions Config Tree Transactions

This topic summarizes how to create read and write transactions to manage a target's configuration
database (config tree).

There are also pre-built @ref legatoServicesConfigTree APIs and a target @ref toolsTarget_config tool.

@section howToConfigTree_read Read from own Tree

By default, every app gets read access to their own tree (but not @ref howToConfigTree_write "write"
access).

This sample shows how an app can read a value from its own tree:

@code
le_cfg_IteratorRef_t iteratorRef = le_cfg_CreateReadTxn("/test");
bool myBoolVal = le_cfg_GetBool(iteratorRef, "isBoolSet", false);

if (myBoolVal)
{
    LE_INFO("The test value was set.");
}
else
{
    LE_INFO("The test value was not set.");
}
@endcode

This code tries to read a value from the tree named, @e myApp. If the value
@e /test/isBoolSet was previously written to the tree, that value will be returned.
Otherwise, the default value @e false is returned.

@section howToConfigTree_write Write to Tree

Before you can write to a tree, you need to run as a user with the correct permissions.
Permission settings are handled slightly differently, instead of writing under apps in the system
tree, you write permission settings under the user's branch.

Processes running under the root user or those with the same user ID as the config tree process
aren't restricted by permissions.

To create permissions, as the root user on the target console run <c>config set</c> using the
@c write option:

@code
$ config set /apps/myApp/configLimits/acl/myApp write
@endcode

The permissions are added to the system tree under @c /apps/myApp/configLimits/acl/myApp.

Once the permissions are set, you can add a write function like this:

@code
le_cfg_IteratorRef_t iteratorRef = le_cfg_CreateWriteTxn("/test");
@endcode

@section howToConfigTree_twoApps Two Apps One Tree

You may need to have one app read and another app read and write from a common tree.

You set permissions through the each apps' @c .adef file. Granting write permission on a tree also
gives read permission.

@b readerApp.adef:
@code
  requires:
  {
      configTree:
      {
          [r] sharedTree
      }
  }
@endcode

@b writerApp.adef
@code
  requires:
  {
      configTree:
      {
          [w] sharedTree
      }
  }
@endcode

Once the permissions are set, you need to create a read to the tree name that includes the iterator
path @c common: like this:

@code
le_cfg_IteratorRef_t iteratorRef = le_cfg_CreateReadTxn("common:/test");
bool myBoolVal = le_cfg_GetBool(iteratorRef, "isBoolSet", false);

if (myBoolVal)
{
    LE_INFO("The test value was set.");
}
else
{
    LE_INFO("The test value was not set.");
}
@endcode

A write also needs the tree name to include the iterator path @c common like this:
@code

le_cfg_IteratorRef_t iteratorRef = le_cfg_CreateWriteTxn("common:/test");
le_cfg_SetBool(iteratorRef, "isBoolSet", true);
@endcode

@section howToConfigTree_readAnyTree Read Any Tree

You can create read access to @e any tree, but typically you won't want it to run as a root process.

This code sample shows a supervisorApp with read access to any tree:

@code
$ config set /apps/supervisorApp/configLimits/allAccess read
@endcode

If you don't specify a tree name, the read will be created on the user's default tree: the tree
with the same name as the app.

@section howToConfigTree_process Write Any Tree Process

You may need to create a write for a process to @e any tree for a process that isn't part of app.
This code sample uses the user name instead of the app name:

@code
$ config set /users/testUser/configLimits/allAccess write
@endcode

@section howToConfigTree_nonTxn Read/Write Access

You need to setup permissions in the @c requires section of your app's @c .adef file
so you have read/write access to the config tree. These permissions apply to transactional and
non-transactional (@ref cfg_quick "quick") access to specified trees.

Add read/write access to your app's own tree:
@code
requires:
{
  configTree:
  {
      [rw] .
  }
}
@endcode

Or just use @c [w] as that gives @c [r] access automatically:

@code
requires:
{
  configTree:
  {
      [w] .
  }
}
@endcode

Add write access to your app's own tree and read access to a tree named @c foo:
@code
requires:
{
  configTree:
  {
      [w] .
      [r] foo
  }
}
@endcode

In this @c foo example, @c le_cfg_CreateWriteTxn on the @c foo tree will
fail, because it only has read access.

@note Processes running as root user automatically get read/write permission on all trees.

Copyright (C) Sierra Wireless Inc.

**/
