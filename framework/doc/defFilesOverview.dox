/** @page defFilesOverview Overview

Legato definition files are used as input to the @ref buildTools tools @c mksys, @c mkapp,
@c mkcomp, and @c mkexe (known collectively as the mk tools). The definition files, together
with @ref languageIndependentAPIs, make it easier to develop
component-based software, automatically generating a lot of boiler-plate code.

Interfaces are defined using <c>.api</c> files. Implementations of those interfaces are constructed
as reusable components. Components can be combined into apps. Apps can
be installed and run on target devices and integrated into
systems of inter-communicating applications deployed together to
target devices in a single step.

All def files use a @subpage defFilesFormat.

@section defFilesOverview_adef .adef Files

Application definition @c .adef files are used to specify the external interfaces and internal
content of applications that can be built, installed, and run on target devices.

<c>.adef</c> files can also be used to override some settings of components without having to change
those components themselves, thereby making the components more reusable.

Each application has a <c>.adef</c> file that describes:
 - which executables should be built from which components
 - additional files from the build system to be included in the app
 - processes to be started (by running what executables with what command-line arguments
   and environment variables) when the app starts
 - if the app should automatically start when the target device boots
 - files (or other file system objects) from the target root file system to be
   available to the app at runtime
 - limits on the app at runtime (e.g., cpu limits, memory limits, etc.)
 - overrides for memory pool sizes and configuration settings for components in the app (future)
 - IPC bindings between components within the app
 - IPC interfaces will be made visible to other apps

@section defFilesOverview_cdef .cdef Files

Component definition @c .cdef files are used to specify the external interfaces and internal
content of reusable software components.

Each component has a single <c>Component.cdef</c> file that defines:
 - source code files used to build the component
 - files from the build system to be included in any app that includes the component
 - files on the target to be accessible to any app that includes the component
 - IPC interfaces the component implements
 - other components needed by this component
 - memory pool sizes
 - configuration settings for the component (future)

@section defFilesOverview_sdef .sdef Files

System definition @c .sdef files are used to interconnect applications with each other and
with the target's runtime environment (e.g., hardware devices).

.sdef files can also override some app settings.

An <c>.sdef</c> file defines a system of one or more applications that can be deployed to
target devices in the field.  Each <c>.sdef</c> file lists:
 - apps are to be installed on the device
 - IPC connections permitted between apps
 - overrides for limits, configuration settings, and IPC bindings within apps

@section defFilesOverview_searchPaths Build Tool Search Paths

Two are used:
 - @b source search path - lists file system directories where the build tools look for source code files and components.
 - @b interface search path - lists file system directories where the build tools look for interface definition files (.h files and .api files).

The default search path “.” is the current working directory where the build tool ran.

Search paths can be changed through mk tools command-line options:
- '-s' sets the source search path
- ‘-i’ sets the interface search path

@code
$ mksys packageTracker.sdef -i ~/work/interfaces -s ~/work/components
@endcode

@section defFilesOverview_overriding Precedence and Overriding

Settings in a <c>.sdef</c> file override settings from @e both the <c>.adef</c> and <c>Component.cdef</c>,
while the <c>.adef</c> overrides settings in the <c>Component.cdef</c>.
This increases reusability by allowing an integrator to override a component's or app's settings
without having to change that component or app.

Most configuration settings can be overridden on the target device at runtime (although, some
won't take effect until the app is restarted).

<HR>

Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.

**/
