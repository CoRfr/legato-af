#!/bin/bash

TMP_DIR=.av-pack.tmp

copyright="
Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
"

. "$(dirname "${BASH_SOURCE[0]}")/shlib"

help_short_desc="Generate package for upload to AirVantage."

help_usage=(
"[OPTIONS]"
"-h"
"--help"
)

help_long_description=(
"Generates a package for a legato application or system that can be uploaded to AirVantage"
"and pushed to devices."
""
"Options:"
""
"-u, --update-file, <string>"
"    Include an update file.  This gets pushed to the device when an \"install application\" is "
"requested for this application."
""
"-b, --build-dir, <string>"
"    File system path of the build directory to be searched for the manifest.app file. Please ensure"
"that the build directory specified corresponds to your *.update file. This will be used to"
"determine whether av-pack should be generating an application pack or system pack."
""
"-n, --name, <string>"
"    (Optional) Identify the name of the system."
""
"-t, --type, <string>"
"    (Optional) Internal type field used by AirVantage to identify the system or application."
""
"-h, --help"
"    Display this help text.  (Cannot be used with other options.)"
)

# Function to set the UPDATE_FILE variable, checking for duplicates and if file is valid
function SetUpdateFile()
{
    if [ -n "$UPDATE_FILE" ]
    then
        ExitWithError "Only one update file permitted."
    fi

    if [ ! -f "$1" ]
    then
        ExitWithError "Update file does not exists."
        exit 1
    fi

    UPDATE_FILE="$1"
    FILE_NAME="$(basename $UPDATE_FILE)"
}

# Function to set the BUILD_DIR variable, checking for duplicates and if build directory is valid
function SetBuildDir()
{
    if [ -n "$BUILD_DIR" ]
    then
        ExitWithError "Only one build directory permitted."
    fi

    if [ ! -d "$1" ]
    then
        ExitWithError "Build directory path does not exists."
        exit 1
    fi

    BUILD_DIR="$1"
}

# Function to set the NAME variable, checking for duplicates.
function SetName()
{
    if [ -n "$NAME" ]
    then
        ExitWithError "Only one type permitted."
    fi

    NAME="$1"
}

# Function to set the TYPE variable, checking for duplicates.
function SetType()
{
    if [ -n "$TYPE" ]
    then
        ExitWithError "Only one type permitted."
    fi

    TYPE="$1"
}

# Function used to determine the type of package (app or system)
function GetUpdateType()
{
    # a version file in the build directory is an indicator that is it a system
    systemIdentifier=$(find $BUILD_DIR -name version)
    if [ -z "$systemIdentifier" ]
    then
        echo "app"
    else
        echo "system"
    fi
}

# Function used to parse the value of a field from a manifest
function GetManifestField()
{
    value=$(cat "$1" | grep "$2=\"" | sed "s/^.*$2=\"//" | sed "s/\".*$//")
    echo $value
}

# Function used to override the value of a field in a manifest
function SetManifestField()
{
    sed -i "0,/$2=\"/{s/$2=\"/$2=\"$3/}" "$1"
}

# Function used to get the hash of an application
function GetAppHash()
{
    value=$(cat "$1" | grep "app.md5" | cut -d '=' -f2)
    echo $value
}

# Add application update file to manifest
function IncludeBinaryFile()
{
    cp $UPDATE_FILE $1

    sed -e "/<\/app:application>/d" -i "$1/manifest.app"
(
cat << EOF
  <binaries>
    <binary file="${FILE_NAME}"/>
  </binaries>
</app:application>
EOF
) >> "$1/manifest.app"
}

# Generate manifest for application(s)
function CreateAppPack()
{
    manifest=$(find $BUILD_DIR -name manifest.app)

    if [ "$UPDATE_TYPE" == "app" ]
    then
        numOfManifest=$(echo "$manifest" | wc -l)

        # An application pack must include on manifest.app
        if [ -z "$manifest" ]
        then
            ExitWithError "Can't find any built applications."
        fi

        if [ "$numOfManifest" -gt 1 ]
        then
            ExitWithError "Only one manifest permitted. Please be more specific"
        fi

        if [ ! -f "$manifest" ]
        then
            ExitWithError "Not a regular file: '$manifest'"
        fi

        appName=$(GetManifestField "$manifest" "name")

        if [ -z "$appName" ]
        then
            ExitWithError "Failed to extract app name from manifest file '$MANIFEST'"
        fi

        # Generate a copy of the manifest file in the temp directory
        cat "$manifest" > $TMP_DIR/manifest.app

        if [ -z "$TYPE" ]
        then
            TYPE="$appName-legato-application"
        fi

        # Set type attribute in manifest
        SetManifestField "$TMP_DIR/manifest.app" "type" "$TYPE"

        # Check application version, if none, we will replace it with the applications hash
        appVersion=$(GetManifestField "$manifest" "revision")
        if [ -z "$appVersion" ]
        then
            appInfoProperties=$(find $BUILD_DIR -name "info.properties")

            if [ -z "$appInfoProperties" ]
            then
                ExitWithError "Failed to extract app hash from info.properties"
            fi

            SetManifestField "$TMP_DIR/manifest.app" "revision" "$(GetAppHash $appInfoProperties)"
        fi

        IncludeBinaryFile "$TMP_DIR/"
    else
        for appManifest in $manifest
        do
            if [ ! -f $appManifest ]
            then
                ExitWithError "Not a regular file: $appManifest"
            fi

            appName=$(GetManifestField "$appManifest" "name")
            appManifestDir="$TMP_DIR/$appName"
            mkdir $appManifestDir

            cat "$appManifest" > $appManifestDir/manifest.app

            # Set type attribute in manifest
            SetManifestField "$appManifestDir/manifest.app" "type" "$appName-$TYPE"

            # Check application version, if none, we will replace it with the applications hash
            appVersion=$(GetManifestField "$appManifest" "revision")
            if [ -z "$appVersion" ]
            then
                searchPath=$(dirname $appManifest)
                appInfoProperties=$(find $searchPath -name "info.properties")

                if [ -z "$appInfoProperties" ]
                then
                    ExitWithError "Failed to extract app hash from info.properties"
                fi

                SetManifestField "$appManifestDir/manifest.app" "revision" "$(GetAppHash $appInfoProperties)"
            fi
        done
    fi
}

# Generate manifest for system
function CreateSystemPack()
{
    # A system pack must include the update file
    if [ -z "$UPDATE_FILE" ]
    then
        ExitWithError "No update file specified. Required when building an airvantage system package."
    fi

    if [ -z "$NAME" ]
    then
        NAME="${FILE_NAME%%.*}"
    fi

    if [ -z "$TYPE" ]
    then
        TYPE="${FILE_NAME%%.*}-legato-system"
    fi

    systemManifestDir="$TMP_DIR/main"
    mkdir $systemManifestDir

    systemVersion=$(find $BUILD_DIR -name version | head -n 1 | xargs cat)
    echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" >> $systemManifestDir/manifest.app
    echo "<app:application xmlns:app=\"http://www.sierrawireless.com/airvantage/application/1.0\" name=\"${NAME}\" type=\"${TYPE}\" revision=\"${systemVersion}\">" >> $systemManifestDir/manifest.app
    echo "  <application-manager use=\"LWM2M_LEGATO_BUNDLE\"/>" >> $systemManifestDir/manifest.app
    echo "</app:application>" >> $systemManifestDir/manifest.app

    IncludeBinaryFile "$systemManifestDir/"

    # Package all the apps from the system
    CreateAppPack
}

# Update file
UPDATE_FILE=""

# Directory to search for the manifest file.
BUILD_DIR=""

# The "name" the will be declared in the manifest file
NAME=""

# The "type" that will be declared in the manifest file
TYPE=""

# Parse the command line.
while [ $# -ne 0 ]
do
    case "$1" in
        -u|--update-file)
            if [ $# -lt 2 ] || [ -z "$2" ]
            then
                ExitWithError "Missing update file for -u option."
            fi
            SetUpdateFile "$2"
            shift 2
            ;;
        -n|--name)
            if [ $# -lt 2 ] || [ -z "$2" ]
            then
                ExitWithError "Missing name for -n option."
            fi
            SetName "$2"
            shift 2
            ;;
        -t|--type)
            if [ $# -lt 2 ] || [ -z "$2" ]
            then
                ExitWithError "Missing type for -t option."
            fi
            SetType "$2"
            shift 2
            ;;
        -b|--build-dir)
            if [ $# -lt 2 ] || [ -z "$2" ]
            then
                ExitWithError "Missing build directory for -b option."
            fi
            SetBuildDir "$2"
            shift 2
            ;;
        *)
            CheckForHelp $@
            ExitWithError "Invalid option"
            ;;
    esac
done

# Make sure build directory has been specified
if [ -z "$BUILD_DIR" ]
then
    ExitWithError "No build directory specified."
fi

UPDATE_TYPE=$(GetUpdateType)

# create temp directory
rm -rf $TMP_DIR
mkdir $TMP_DIR

case $UPDATE_TYPE in
    app)
        echo "Generating an airvantage package for a legato application."
        CreateAppPack
        ;;
    system)
        echo "Generating an airvantage package for a legato system."
        CreateSystemPack
        ;;
esac

# building our final zip package to upload to the server
rm -rf ${FILE_NAME%%.*}.zip
cd $TMP_DIR && zip -r ../"${FILE_NAME%%.*}".zip * && cd ..
rm -rf $TMP_DIR