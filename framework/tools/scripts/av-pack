#!/bin/bash

TMP_DIR=.av-pack.tmp

copyright="
Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
"

. "$(dirname "${BASH_SOURCE[0]}")/shlib"

help_short_desc="Generate package for upload to AirVantage."

help_usage=(
"[OPTIONS] TYPE [BUILD_DIR]"
"-h"
"--help"
)

help_long_description=(
"Generates a ZIP-compressed package containing a manifest file generated by mkapp,"
"with the AirVantage application \"type\" set to TYPE."
""
"TYPE must be globally unique among all applications on the AirVantage service."
"Multiple versions of the same application should have the same TYPE."
""
"BUILD_DIR is the file system path of the build directory to be searched for the"
"manifest.app file. If not specified, the current directory (and its subdirectories)"
"will be searched. Only one manifest file can be used. If multiple are found, the"
"command will abort with an error message."
""
"Options:"
""
"-f, --full-update=FILE"
"    Include a full application update file.  This gets pushed to the device when an"
"\"upgrade firmware\" is requested for this application."
""
"-h, --help"
"    Display this help text.  (Cannot be used with other options.)"
)


# If not empty, include this file in the zip as the application's full update file.
FULL_UPDATE=""

# Directory to search for the manifest file.
BUILD_DIR=""

# The "type" string to i.
TYPE=""


# Function to set the FULL_UPDATE variable, checking for duplicates.
function SetFullUpdate()
{
    if [ "$FULL_UPDATE" != "" ]
    then
        ExitWithError "Only one full update file permitted."
    fi

    FULL_UPDATE=$1
}


# Function to set the build directory or type variable and check for too many arguments.
# First time this is called, it will store its argument in the TYPE variable.  Second time it
# will store its argument in the BUILD_DIR variable.  If called a third time, it will report an
# error and terminate the program.
function SetTypeOrBuildDir()
{
    if [ "$BUILD_DIR" ]
    then
        echo "BUILD_DIR = '$BUILD_DIR'"
        ExitWithError "Too Many arguments."
    else
        if [ "$TYPE" ]
        then
            BUILD_DIR=$1
        else
            TYPE=$1
        fi
    fi
}


# Parse the command line.
while [ $# -ne 0 ]
do
    case "$1" in
        -f)
            if [ $# -lt 2 ]
            then
                ExitWithError "Missing file path for -b option."
            fi
            SetFullUpdate $2
            shift
            shift
            ;;
        --full-update=*)
            SetFullUpdate $(echo $1 | sed 's/--full-update=//')
            shift
            ;;
        *)
            CheckForHelp $@
            SetTypeOrBuildDir $1
            shift
            ;;
    esac
done

# Make sure a type was specified.
if [ "$TYPE" == "" ]
then
    ExitWithError "TYPE not specified."
fi

# Search for manifest.app files.
MANIFEST=$(find $BUILD_DIR -name manifest.app)

# Check that we found exactly one manifest file.
if [ "$MANIFEST" == "" ]
then
    ExitWithError "Can't find any built applications."
fi

NUM_MANIFESTS=$(echo "$MANIFEST" | wc -l)

if [ $NUM_MANIFESTS -gt 1 ]
then
    echo "Multiple manifests found:" 1>&2
    for manifest in $MANIFEST
    do
        echo "  $manifest" 1>&2
    done
    ExitWithError "Only one manifest permitted.  Please be more specific."
fi

if ! [ -f "$MANIFEST" ]
then
    ExitWithError "Not a regular file: '$MANIFEST'"
fi


# Extract the application name from the manifest file.
# NOTE: This acts as a sort of sanity test for the manifest file contents.
APP_NAME=$(cat "$MANIFEST" | grep 'name=\"' | sed 's/^.* name=\"//' | sed 's/\" .*$//')
if [ "$APP_NAME" == "" ]
then
    ExitWithError "Failed to extract app name from manifest file '$MANIFEST'"
fi


# If there's a full update file specified, make sure it exists.
if [ "$FULL_UPDATE" ]
then
    if ! [ -f "$FULL_UPDATE" ]
    then
        ExitWithError "Not a regular file: '$FULL_UPDATE'"
    fi
fi

echo -n "Packing application '$APP_NAME' of type '$TYPE' with manifest '$MANIFEST'"
if [ "$FULL_UPDATE" ]
then
    echo " and application full update file '$FULL_UPDATE'."
else
    echo " without any application update files."
fi


# Create a temporary working directory.
rm -rf $TMP_DIR
mkdir $TMP_DIR


# Generate a copy of the manifest file in the temp directory, with the "type" attribute set.
cat $MANIFEST | sed "0,/type=\"/{s/type=\"/type=\"$TYPE/}" > $TMP_DIR/manifest.app

# If a full update file was specified,
if [ "$FULL_UPDATE" ]
then
    # Copy the full application update file to the temporary directory.
    cp "$FULL_UPDATE" $TMP_DIR

    # Add the full application update file to the manifest.
    sed -e "/<\/app:application>/d" -i $TMP_DIR/manifest.app
    echo "  <binaries>" >> $TMP_DIR/manifest.app
    echo "    <binary file=\"$(basename $FULL_UPDATE)\"/>" >> $TMP_DIR/manifest.app
    echo "  </binaries>" >> $TMP_DIR/manifest.app
    echo "</app:application>" >> $TMP_DIR/manifest.app
fi


# Zip the files in the temporary directory into a zip archive for AirVantage.
rm -rf $APP_NAME.zip
zip -j $APP_NAME.zip $TMP_DIR/*


# Delete the temporary working directory.
rm -rf $TMP_DIR
