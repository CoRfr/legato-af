#!/bin/bash

# Search in known locations for a cross-build tool chain.
# The first argument is the target type (ar7, wp85, etc.)
function PrintHelp()
{
cat << ENDHELP
NAME
        $(basename $0) - search for an installed cross-build toolchain for a given type of target.

SYNOPSIS
        $(basename $0) TARGET [dir or prefix]

DESCRIPTION
        Will output the toolchain directory directory (or prefix) to stdout and exit with code 0 on success.

        Prints an error message to stderr and exits with a non-zero exit code on error.
ENDHELP
}

HOST_ARCH=$(uname -m)
TARGET=$1
CMD=${2:-dir}

TOOLCHAIN_DIRS=()

# In the case of a Yocto build, enable the detection of the usage of the internal Yocto tools.
AppendYoctoBuildToolchain() {
    local build_dir=$1
    local gcc_prefix=$2

    TOOLCHAIN_DIRS+=("${LEGATO_ROOT}/../${build_dir}/tmp/sysroots/${HOST_ARCH}-linux/usr/bin/${gcc_prefix}")
}

# To detect toolchains installed in /opt/swi
AppendYoctoSwiToolchain() {
    local swi_prefix=$1
    local gcc_prefix=$2

    if ! [ -e "/opt/swi" ]; then
        return 0
    fi

    for entry_dir in $(find /opt/swi -maxdepth 1 -name "${swi_prefix}" | sort -r); do
        TOOLCHAIN_DIRS+=("${entry_dir}/sysroots/${HOST_ARCH}-pokysdk-linux/usr/bin/${gcc_prefix}")
    done
}

# Select the appropriate list of toolchain directories to search, in order of preference
# (most preferred first) based on the target name given.
SelectToolchainDirs() {
    local target=$1

    case "$target" in
    ar7 | ar86)
        AppendYoctoBuildToolchain 'build_src' 'arm-poky-linux-gnueabi'
        AppendYoctoBuildToolchain 'build_bin' 'arm-poky-linux-gnueabi'
        AppendYoctoSwiToolchain "SWI9X15A_*"        'arm-poky-linux-gnueabi'
        AppendYoctoSwiToolchain "y16-ext-${target}" 'arm-poky-linux-gnueabi'
        AppendYoctoSwiToolchain "y16-ext"           'arm-poky-linux-gnueabi'
        ;;
    wp85 | wp750x | wp76xx | wp77xx | ar758x | ar759x)
        AppendYoctoBuildToolchain 'build_src' 'arm-poky-linux-gnueabi'
        AppendYoctoBuildToolchain 'build_bin' 'arm-poky-linux-gnueabi'

        # LxSwi releases
        case "$target" in
        wp85 | wp750x)
            local lxswi_target=wp85xx
            AppendYoctoSwiToolchain "LXSWI*+${lxswi_target}" 'arm-poky-linux-gnueabi'
            ;;
        *)
            AppendYoctoSwiToolchain "LXSWI*+${target}" 'arm-poky-linux-gnueabi'
            ;;
        esac

        # Firmware releases
        case "$target" in
        wp85 | wp750x)
            AppendYoctoSwiToolchain "SWI9X15Y_*" 'arm-poky-linux-gnueabi'
            ;;
        wp76xx | wp77xx)
            AppendYoctoSwiToolchain "SWI9X07Y_*" 'arm-poky-linux-gnueabi'
            AppendYoctoSwiToolchain "SWI9X06Y_*" 'arm-poky-linux-gnueabi'
            ;;
        ar758x)
            AppendYoctoSwiToolchain "SWI9X28*_*" 'arm-poky-linux-gnueabi'
            ;;
        ar759x)
            AppendYoctoSwiToolchain "SWI9X40*_*" 'arm-poky-linux-gnueabi'
            ;;
        esac

        for v in y22 y17; do
            AppendYoctoSwiToolchain "${v}-ext-${target}" 'arm-poky-linux-gnueabi'
            AppendYoctoSwiToolchain "${v}-ext"           'arm-poky-linux-gnueabi'
        done
        ;;
    raspi)
        TOOLCHAIN_DIRS+=(/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin)
        AppendYoctoSwiToolchain "LXSWI*+${target}" 'arm-poky-linux-gnueabi'
        # Use virt toolchain since there is no raspi system ref at the moment.
        AppendYoctoSwiToolchain "LXSWI*+virt"      'arm-poky-linux-gnueabi'
        for v in y22 y17; do
            AppendYoctoSwiToolchain "${v}-${target}"     'arm-poky-linux-gnueabi'
            AppendYoctoSwiToolchain "${v}"               'arm-poky-linux-gnueabi'
        done
        ;;
    virt_arm)
        AppendYoctoBuildToolchain 'build_virt-arm' 'arm-poky-linux-gnueabi'
        AppendYoctoSwiToolchain "LXSWI*+virt"      'arm-poky-linux-gnueabi'
        for v in y22 y17; do
            AppendYoctoSwiToolchain "${v}-${target}"     'arm-poky-linux-gnueabi'
            AppendYoctoSwiToolchain "${v}"               'arm-poky-linux-gnueabi'
        done
        ;;
    virt_x86)
        AppendYoctoBuildToolchain 'build_virt-x86' 'i586-poky-linux'
        AppendYoctoSwiToolchain "LXSWI*+virt"      'i586-poky-linux'
        for v in y22 y17; do
            AppendYoctoSwiToolchain "${v}-${target}"     'i586-poky-linux'
            AppendYoctoSwiToolchain "${v}"               'i586-poky-linux'
        done
        ;;
    virt)
        VIRT_TARGET_ARCH=${VIRT_TARGET_ARCH:-x86}
        SelectToolchainDirs "virt_${VIRT_TARGET_ARCH}"
        ;;
    *)
        local toolchain_dir_env="${target^^}_TOOLCHAIN_DIR"
        local toolchain_prefix_env="${target^^}_TOOLCHAIN_PREFIX"
        if [ -n "${!toolchain_prefix_env}" ]; then
            if [ -n "${!toolchain_dir_env}" ]; then
                TOOLCHAIN_DIRS+=("${!toolchain_dir_env}/${!toolchain_prefix_env}")
            else
                TOOLCHAIN_DIRS+=("${!toolchain_prefix_env}")
            fi
        else
            echo "****ERROR: Unrecognized target type '$1'." >&2
            return 1
        fi
        ;;

    esac

    return 0
}

if [[ "$TARGET" == "help" ]] ||
   [[ "$TARGET" == "--help" ]] ||
   [[ "$TARGET" == "-h" ]]; then
    PrintHelp
    exit 0
fi

SelectToolchainDirs $TARGET

CheckToolchainDir() {
    local toolchain_dir=$1

    COMPILER_EXEC=gcc
    if [[ "$USE_CLANG" == "1" ]]; then
        COMPILER_EXEC=clang
    fi

    for entry in $(find "${toolchain_dir}" -name "*$COMPILER_EXEC" 2>/dev/null); do
        if [[ "$CMD" == "dir" ]]; then
            echo "$toolchain_dir"
        elif [[ "$CMD" == "prefix" ]]; then
            echo "$(basename "$entry" | sed 's/'$COMPILER_EXEC'$//')"
        else
            echo "Unknown option $CMD"
            exit 1
        fi

        return 0
    done

    return 1
}

TOOLCHAIN_DIR_ENV="${TARGET^^}_TOOLCHAIN_DIR"
TOOLCHAIN_DIR="${!TOOLCHAIN_DIR_ENV}"
if [ -n "$TOOLCHAIN_DIR" ]
then
    if ! CheckToolchainDir "$TOOLCHAIN_DIR"; then
        echo "Toolchain specified for target '$1' is invalid." >&2
        exit 1
    fi

    exit 0
fi

# Go down the list until we find one that exists.
for dir in "${TOOLCHAIN_DIRS[@]}"
do
    if CheckToolchainDir "$dir"; then
        exit 0
    fi
done

exit 1

