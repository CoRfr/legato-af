#!/bin/bash

# Search in known locations for a cross-build tool chain.
# The first argument is the target type (ar7, wp85, etc.)
function PrintHelp()
{
cat << ENDHELP
NAME
        $(basename $0) - search for an installed cross-build toolchain for a given type of target.

SYNOPSIS
        $(basename $0) TARGET [dir or prefix]

DESCRIPTION
        Will output the toolchain directory directory (or prefix) to stdout and exit with code 0 on success.

        Prints an error message to stderr and exits with a non-zero exit code on error.
ENDHELP
}

HOST_ARCH=$(uname -m)
TARGET=$1
CMD=${2:-dir}

TOOLCHAIN_DIRS=()

AppendYoctoBuildToolchain() {
    local build_dir=$1
    local gcc_prefix=$2

    TOOLCHAIN_DIRS+=("${LEGATO_ROOT}/../${build_dir}/tmp/sysroots/${HOST_ARCH}-linux/usr/bin/${gcc_prefix}")
}

# Select the appropriate list of toolchain directories to search, in order of preference
# (most preferred first) based on the target name given.
SelectToolchainDirs() {
    local target=$1

    case "$target" in
    ar7 | ar86)
        AppendYoctoBuildToolchain 'build_src' 'arm-poky-linux-gnueabi'
        AppendYoctoBuildToolchain 'build_bin' 'arm-poky-linux-gnueabi'
        TOOLCHAIN_DIRS+=(/opt/swi/y16-ext/sysroots/$HOST_ARCH-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi)
        ;;
    wp85 | wp750x)
        AppendYoctoBuildToolchain 'build_src' 'arm-poky-linux-gnueabi'
        AppendYoctoBuildToolchain 'build_bin' 'arm-poky-linux-gnueabi'
        TOOLCHAIN_DIRS+=(/opt/swi/y17-ext/sysroots/$HOST_ARCH-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi)
        ;;
    ar758x | wp76xx)
        AppendYoctoBuildToolchain 'build_src' 'arm-poky-linux-gnueabi'
        AppendYoctoBuildToolchain 'build_bin' 'arm-poky-linux-gnueabi'
        TOOLCHAIN_DIRS+=(/opt/swi/y17-ext/sysroots/$HOST_ARCH-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi)
        ;;
    ar759x)
        AppendYoctoBuildToolchain 'build_src' 'arm-poky-linux-gnueabi'
        AppendYoctoBuildToolchain 'build_bin' 'arm-poky-linux-gnueabi'
        TOOLCHAIN_DIRS+=(/opt/swi/y17-ext/sysroots/$HOST_ARCH-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi)
        ;;
    em75xx)
        AppendYoctoBuildToolchain 'build_src' 'arm-poky-linux-gnueabi'
        AppendYoctoBuildToolchain 'build_bin' 'arm-poky-linux-gnueabi'
        TOOLCHAIN_DIRS+=(/opt/swi/y17-ext/sysroots/$HOST_ARCH-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi)
        ;;
    raspi)
        TOOLCHAIN_DIRS+=(/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin)
        TOOLCHAIN_DIRS+=(/opt/swi/y17/sysroots/$HOST_ARCH-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi)
        TOOLCHAIN_DIRS+=(/opt/swi/y17-ext/sysroots/$HOST_ARCH-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi)
        ;;
    virt_arm)
        AppendYoctoBuildToolchain 'build_virt-arm' 'arm-poky-linux-gnueabi'
        TOOLCHAIN_DIRS+=(/opt/swi/y17/sysroots/$HOST_ARCH-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi)
        TOOLCHAIN_DIRS+=(/opt/swi/y17-ext/sysroots/$HOST_ARCH-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi)
        ;;
    virt_x86)
        AppendYoctoBuildToolchain 'build_virt-x86' 'i586-poky-linux'
        TOOLCHAIN_DIRS+=(/opt/poky/y17/sysroots/$HOST_ARCH-pokysdk-linux/usr/bin/i586-poky-linux)
        ;;
    virt)
        VIRT_TARGET_ARCH=${VIRT_TARGET_ARCH:-x86}
        SelectToolchainDirs "virt_${VIRT_TARGET_ARCH}"
        ;;
    *)
        echo "****ERROR: Unrecognized target type '$1'." >&2
        return 1
        ;;

    esac

    return 0
}

if [[ "$TARGET" == "help" ]] ||
   [[ "$TARGET" == "--help" ]] ||
   [[ "$TARGET" == "-h" ]]; then
    PrintHelp
    exit 0
fi

SelectToolchainDirs $TARGET

CheckToolchainDir() {
    local dir=$1

    COMPILER_EXEC=gcc
    if [[ "$USE_CLANG" == "1" ]]; then
        COMPILER_EXEC=clang
    fi

    for entry in $(find $dir -name "*$COMPILER_EXEC" 2>/dev/null); do
        if [[ "$CMD" == "dir" ]]; then
            echo "$dir"
        elif [[ "$CMD" == "prefix" ]]; then
            echo $(basename $entry | sed 's/'$COMPILER_EXEC'$//')
        else
            echo "Unknown option $CMD"
            exit 1
        fi

        return 0
    done

    return 1
}

TOOLCHAIN_DIR_ENV="${TARGET^^}_TOOLCHAIN_DIR"
TOOLCHAIN_DIR="${!TOOLCHAIN_DIR_ENV}"
if [ -n "$TOOLCHAIN_DIR" ]
then
    if ! CheckToolchainDir $TOOLCHAIN_DIR; then
        echo "Toolchain specified for target '$1' is invalid." >&2
        exit 1
    fi

    exit 0
fi

# Go down the list until we find one that exists.
for dir in ${TOOLCHAIN_DIRS[*]}
do
    if CheckToolchainDir $dir; then
        exit 0
    fi
done

echo "No toolchain found for target '$1'." >&2
exit 1

