#!/bin/bash

SUPPORTED_TARGETS="ar7 ar86 wp7 wp85"

copyright="
Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
"

if ! [ $LEGATO_ROOT ]; then echo "Run bin/legs first" >&2; exit 1; fi
. "$(dirname "${BASH_SOURCE[0]}")/shlib"

help_short_desc="Create an update package for a target device."

help_usage=(
"TARGET OPTIONS"
"-d UPDATE_FILE"
"-h"
"--help"
"-v"
)

help_long_description=(
"Creates a package containing update instructions and/or content to be installed"
"on a target device."
""
"TARGET is the type of target device. The following targets are supported:"
"    $SUPPORTED_TARGETS"
""
"When creating an update pack for a target device,"
""
"Options used when creating an update pack:"
""
"-ai APP_FILE"
"    Add an application to the update for installation on the target."
""
"-ar APP_NAME"
"    Specify an application to be removed from the target."
""
"-m FIRMWARE_FILE"
"    Add a modem firmware image to the update for installation on the target."
""
"-o FILE_NAME"
"    Specify output update file name. If not specified, default.update is used."
"    If \"-\" is specified, then output will be sent to the standard output stream."
""
"Other options:"
""
"-v"
"    Prints the Legato framework version."
""
"-d UPDATE_FILE"
"    Prints an update file's manifest to the standard output stream."
""
"-h"
"--help"
"    Print this help text."
""
"Examples:"
""
"# Create an update package helloWorld.update that installs helloWorld app on an AR7xxx."
"$(basename "$0")  ar7  -o helloWorld.update -ai  helloWorld.ar7"
""
"# Create update package which will install helloWorld and remove OldApp on an AR7XXX."
"$(basename "$0")  ar7  -o InstallRemove.update -ai  helloWorld.ar7 -ar OldApp"
""
"# Display manifest information from an update file."
"$(basename "$0") -d helloWorld.update"
)


# Define some shell constant(should match with manifest specification).

readonly VERSION_PATH=$LEGATO_ROOT/version
readonly TARGET_ID=$1
readonly MIN_PARAMS=3

readonly JSON_LE_VERSION_ID="\"versionID\""
readonly JSON_DEVICE_ID="\"deviceID\""
readonly JSON_PAYLOAD_SIZE="\"payload\""

readonly JSON_FIELD_ITEMS="\"items\""
readonly JSON_FIELD_TYPE="\"type\""
readonly JSON_FIELD_NAME="\"name\""
readonly JSON_FIELD_VERSION="\"version\""
readonly JSON_FIELD_COMMAND="\"command\""
readonly JSON_FIELD_SIZE="\"size\""

readonly APP_PLATFORM="\"app\""
readonly FIRMWARE_PLATFORM="\"firmware\""
readonly SCRIPT_PLATFORM="\"script\""
readonly CMD_INSTALL="\"install\""
readonly CMD_REMOVE="\"remove\""
readonly MANIFESTSIZE_FIELD_WIDTH=8

# Shell global variables

UpdateFile="default.update"
ItemStr=""
ManifestStr=""
AllInputFileList=""
PayLoadSize=0
Size=0


# Checks that its first argument is one of the supported target types.
ValidateTarget()
{
    for target in $SUPPORTED_TARGETS
    do
        if [ "$1" == "$target" ]
        then
            return 0
        fi
    done

    ExitWithError "Unsupported target: '$1'"
}


# Returns Manifest string size
GetManifestSize()
{
    Str=$1
    StrLen=$(echo ${#Str} | sed -e :a -e "s/^.\{1,`expr $MANIFESTSIZE_FIELD_WIDTH - 1`\}$/0&/;ta")
    echo $StrLen
}


# Returns Legato version.
GetLegatoVersion()
{
    LEGATO_VERSION=`cat $VERSION_PATH`
    printf "$LEGATO_VERSION"
}


# Makes manifest string. PayLoadSize variable should be set properly before calling this function.
MakeManifestStr()
{
    echo
    echo   "{"
    echo   " $JSON_LE_VERSION_ID: \"$(GetLegatoVersion)\","
    echo   " $JSON_DEVICE_ID: \"$TARGET_ID\","
    echo   " $JSON_PAYLOAD_SIZE: $PayLoadSize,"
    echo   " $JSON_FIELD_ITEMS: ["
    echo   "$ItemStr"
    echo   " ]"
    printf "}"
}


# Makes app item string. Size variable should be set properly before calling this function.
MakeAppItemStr()
{
    appName=$(basename "$2" | sed 's/\.[^.]*$//')
    echo
    echo "  {"
    echo "   $JSON_FIELD_TYPE: $APP_PLATFORM,"
    echo "   $JSON_FIELD_NAME: \"$appName\","

    case $1 in

    i)  # Install Command
        echo "   $JSON_FIELD_COMMAND: $CMD_INSTALL,"
        echo "   $JSON_FIELD_SIZE: $Size"
        ;;

    r)  #Remove command
        echo "   $JSON_FIELD_COMMAND: $CMD_REMOVE"
        ;;

    esac

    printf "  }"
}


# Makes script item string. Size variable should be set properly before calling this function.
MakeScriptItemStr()
{
    scriptName=$(basename "$1")
    echo
    echo   "  {"
    echo   "   $JSON_FIELD_TYPE: $SCRIPT_PLATFORM,"
    echo   "   $JSON_FIELD_NAME: \"$scriptName\","
    echo   "   $JSON_FIELD_SIZE: $Size"
    printf "  }"
}


# Makes firmware item string. Size variable should be set properly before calling this function.
MakeFirmwareItemStr()
{
    echo
    echo   "  {"
    echo   "   $JSON_FIELD_TYPE: $FIRMWARE_PLATFORM,"
    echo   "   $JSON_FIELD_SIZE: $Size"
    printf "  }"
}

if ! [ -f "$VERSION_PATH" ]
then
    ExitWithError "Bad legato version file: $VERSION_PATH"
fi

# If no parameter given, just print the help.
if [ $# -eq 0  ]
then
    ExitWithError "Too few arguments."
fi

# Check if they are asking for help.
CheckForHelp $@

# Check if they are asking for version.
if [ "$1" = "-v" -o "$1" = "version" -o "$1" = "--version" ]
then
    echo "Legato version: $(GetLegatoVersion)"
    exit 0
fi

# Check if they are asking for pretty printing manifest.
if [ "$1" = "-d" -o "$1" = "dump" -o "$1" = "--dump" ]
then
    UpdateFile=$2
    ManifestSize=$(head -c $MANIFESTSIZE_FIELD_WIDTH $UpdateFile)
# Follow if checks whether ManifestSize is a number or not.
    if [ "$ManifestSize" -eq "$ManifestSize" ] 2>/dev/null
    then
        echo "Manifest size: `expr $ManifestSize + 0` bytes"
        echo "Manifest string, including manifest size:"
        echo "$(head -c `expr $ManifestSize + $MANIFESTSIZE_FIELD_WIDTH` $UpdateFile)"
        exit 0
    else
        ExitWithError "Bad manifest size: $ManifestSize"
    fi
fi

# Do the TARGET_ID validation
ValidateTarget "$TARGET_ID"

# Minimum number of parameter must be 3, otherwise exit
if [ $# -lt $MIN_PARAMS ]
then
    ExitWithError "Missing parameters. Minimum number of params: $MIN_PARAMS"
fi

# Flag to check whether App & firmware are not put together.
OtherItemFlag=0
FwFlag=0

# Update-pack received right number of params. Now shift (to avoid TARGET_ID)  & start parsing options.
shift

while getopts ":am:o:" opt; do
    case $opt in

    a)
        # Application item, it should be followed by install/remove command.
        OtherItemFlag=1   # Mark the OtherItemFlag
        getopts ":i:r:" cmd

        case $cmd in

        i)
            # Install command
            Size=$(stat -c%s "$OPTARG")

            if [ $? -ne 0 ] || [ $Size -eq 0 ]
            then
                ExitWithError "Bad app file: $OPTARG"
            fi
            PayLoadSize=`expr $PayLoadSize + $Size`
            AllInputFileList=$AllInputFileList" ""$OPTARG"
            ItemStr=$ItemStr$(MakeAppItemStr $cmd "$OPTARG")","
            ;;

        r)
            # Remove command
            ItemStr=$ItemStr$(MakeAppItemStr $cmd "$OPTARG")","
            ;;

        \?)
            ExitWithError "Invalid command option: -$OPTARG"
            ;;

        :)
            ExitWithError "Option -$OPTARG requires an argument."
            ;;

        esac
        ;;
    m)
        # Modem firmware item
        FwFlag=1    # Mark the firmware flag
        Size=$(stat -c%s "$OPTARG")
        if [ $? -ne 0 ] || [ $Size -eq 0 ]
        then
            ExitWithError "Bad firmware file: $OPTARG"
        fi
        PayLoadSize=`expr $PayLoadSize + $Size`
        AllInputFileList=$AllInputFileList" ""$OPTARG"
        ItemStr=$ItemStr$(MakeFirmwareItemStr "$OPTARG")","
        ;;

    o)
        # Output file
        UpdateFile="$OPTARG"
        ;;

    \?)
        ExitWithError "Invalid command option: -$OPTARG"
        ;;

    :)
        ExitWithError "Option -$OPTARG requires an argument."
        ;;

    esac

done

# Other items can't be put with firmware
if [ $OtherItemFlag -eq 1 ]  && [ $FwFlag -eq 1 ]
then
    ExitWithError "Firmware can't packed with other install items."
fi

# Delete the last Comma
ItemStr=${ItemStr%?}

# Now obtain the manifest string size and prepend it with manifest string
ManifestStr=$(MakeManifestStr)
ManifestStr=$(GetManifestSize "$ManifestStr")$ManifestStr

if [ "$AllInputFileList" = "" ]
then
    # Only remove instructions are given.
    if [ "$UpdateFile" = "-" ]
    then
        (printf "$ManifestStr")
    else
        (printf "$ManifestStr") > "$UpdateFile"
    fi
else
    # Now merge manifest string and all input file, and create final update file.
    if [ "$UpdateFile" = "-" ]
    then
        (printf "$ManifestStr" && cat $AllInputFileList)
    else
        (printf "$ManifestStr" && cat $AllInputFileList) > "$UpdateFile"
    fi
fi

if [ $? -ne 0 ]
then
    ExitWithError "Failed to create update file.">&2
else
    exit 0
fi
