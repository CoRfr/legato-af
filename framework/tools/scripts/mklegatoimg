#!/bin/bash
copyright="
Copyright (C) Sierra Wireless Inc.
"

. "$(dirname "${BASH_SOURCE[0]}")/shlib"

help_short_desc="create Legato image partition"

help_usage=(
"[OPTIONS]"
)

help_long_description=(
"Generate a partition for a Legato target."
""
"Options:"
" - -t [TARGET]: target the image should be generated for (ar7, ...)"
" - -d [STAGING_DIR]: staging directory for that platform"
" - -o [OUTPUT_DIR]: output directory where the image will be stored"
""
"For ar7/ar86/wp85/wp750x/wp76xx targets:"
""
"   This creates a partition that you can use with fwupdate or airvantage"
"   to update the legato within your target."
)

CheckForHelp $@

CheckRet() {
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        echo "Exit Code $RETVAL"
        exit $RETVAL
    fi
}

while getopts ":t:o:d:v:s" arg
do
    case $arg in
    t)
        TARGET=$OPTARG
        ;;
    d)
        STAGING_DIR=$(readlink -f $OPTARG)
        ;;
    o)
        OUTPUT_DIR=$(readlink -f $OPTARG)
        ;;
    v)
        VERSION=$OPTARG
        ;;
    s)
        STRIP_STAGING_TREE=true
        ;;
    ?)
        echo "$0: invalid option -$OPTARG"
        usage_and_exit 1
        ;;
    esac
done

if [ -z "$VERSION" ]; then
    if [ -z "$LEGATO_ROOT" ]; then
        echo "Unable to determine version"
        exit 1
    fi

    VERSION="$(cat $LEGATO_ROOT/version)"
    if [ -e "$LEGATO_ROOT/.git" ]; then
        VERSION="$VERSION $(git rev-parse --short HEAD)"
    fi
    VERSION="$VERSION $(hostname) $(date +'%Y/%m/%d %H:%M:%S')"
fi

if [ -z "$TARGET" ]; then
    echo "Target (-t) not set"
    exit 1
fi

FindToolchain

CheckFakerootVersion() {
    FAKEROOT_BIN=$1
    FAKEROOT_VERSION=$($FAKEROOT_BIN --version | awk '{print $3}')
    REQUIRED_VERSION="1.20.2"
    [ "$REQUIRED_VERSION" = "$(echo -e "$REQUIRED_VERSION\n$FAKEROOT_VERSION" | sort -V | head -1)" ]
}

# Need to appear as root to prepare images
if [ $(id -u) -ne 0 ]; then
    FindTool "fakeroot" FAKEROOT
    if [ $? -eq 0 ]; then
        CheckFakerootVersion $FAKEROOT
        if [ $? -eq 0 ]; then
            echo "Using fakeroot $FAKEROOT ..."
            $FAKEROOT $0 $*
            exit $?
        fi
    fi
else
    echo $*
fi

echo "Target: $TARGET"

if [ -z "$STAGING_DIR" ]; then
    echo "Staging dir (-d) not set"
    exit 1
fi
echo "Input: $STAGING_DIR"

if [ -z "$OUTPUT_DIR" ]; then
    echo "Output dir (-o) not set"
    exit 1
fi
echo "Output: $OUTPUT_DIR"

echo "Version: $VERSION"

StripExeAndLibs() {
    if [[ "$STRIP_STAGING_TREE" != "true" ]]; then
        return
    fi

    PATH="${TOOLCHAIN_DIR}:${PATH}"

    FindTool "${TOOLCHAIN_PREFIX}strip" STRIP
    CheckRet

    FindTool "${TOOLCHAIN_PREFIX}nm" NM
    CheckRet

    for file in $(find $STAGING_DIR -type f); do
        if [ -n "$(${NM} ${file} 2>/dev/null)" ]; then
            echo "Stripping $file"
            ${STRIP} ${file}
        fi
    done
}

GenerateUbinizeCfg() {
    local image_path=$1
    local ubinize_cfg_path=$2

    rm -f $ubinize_cfg_path
    touch $ubinize_cfg_path
    echo "[legato-volume]" >> $ubinize_cfg_path
    echo "mode=ubi" >> $ubinize_cfg_path
    echo "image=$image_path" >> $ubinize_cfg_path
    echo "vol_id=0" >> $ubinize_cfg_path
    echo "vol_type=dynamic" >> $ubinize_cfg_path
    echo "vol_name=legato" >> $ubinize_cfg_path
    echo "vol_flags=autoresize" >> $ubinize_cfg_path
}

CreateImgFs() {
    local img_type=${1:-yaffs2}
    local img_suffix=${2:-$img_type}
    local ubi_img_type=${3:-squashfs}
    local page_size=${4:-4096}
    local oob_size=$5
    local peb_size=$6

    echo "$TARGET: Generating the framework image ($img_suffix)"

    if [ -z "$TOOLCHAIN_DIR" ]; then
        echo "Unable to find toolchain"
        exit 1
    fi

    local legato_img="$OUTPUT_DIR/legato.$img_suffix"

    local temp_dir="$OUTPUT_DIR/legatoimg/$img_type"
    mkdir -p $temp_dir

    cd $temp_dir

    case $img_type in
        yaffs2)
            FindTool "mkyaffs2image" MKYAFFS2
            CheckRet

            $MKYAFFS2 -c $page_size -s $oob_size "$STAGING_DIR" "$legato_img" > yaffs2.log
            CheckRet
            ;;

        ubifs)
            FindTool "mkfs.ubifs" MKUBIFS
            if [ $? -ne 0 ]; then
                echo "Warning: Unable to produce ubifs image: mkfs.ubifs needed"
                return 1
            fi

            $MKUBIFS -r "$STAGING_DIR" -o "$legato_img" -m $page_size -e $LAB_SIZE -c $MAX_LEB_COUNT -F > ubifs.log
            CheckRet
            ;;

        squashfs)
            FindTool "mksquashfs" MKSQUASHFS
            if [ $? -ne 0 ]; then
                echo "Warning: Unable to produce squashfs image: mksquashfs needed"
                return 1
            fi

            $MKSQUASHFS "$STAGING_DIR" "$legato_img" -noappend -all-root > squashfs.log
            CheckRet
            ;;

        ubi)
            CreateImgFs ${ubi_img_type} ${ubi_img_type} "" ${page_size} $oob_size $peb_size

            FindTool "ubinize" UBINIZE
            if [ $? -ne 0 ]; then
                echo "Warning: Unable to produce ubi image: ubinize needed"
                return 1
            fi

            GenerateUbinizeCfg $LEGATO_IMG ${temp_dir}/ubinize.cfg

            $UBINIZE -o $legato_img -m $page_size -p $peb_size -s $page_size ${temp_dir}/ubinize.cfg > ubinize.log
            CheckRet
            ;;

        *)
            echo "Unknown image type '$img_type'"
            exit 1
            ;;
    esac

    export LEGATO_IMG=$legato_img
}

GenerateCwe() {
    local img_path=$1
    local img_suffix=${2:-yaffs2}
    local pid=$3

    echo "$TARGET: Generating the framework cwe ($img_suffix)"

    if ! [ -f ${img_path} ] ; then
        echo "$TARGET: $img_path does not exist"
        exit 1
    fi

    FindTool "hdrcnv" HDRCNV
    CheckRet

    FindTool "cwezip" CWEZIP
    CheckRet

    local temp_dir="$OUTPUT_DIR/legatoimg/$img_suffix"
    mkdir -p $temp_dir

    cd $temp_dir

    local tmpmbn=$temp_dir/temp.mbn
    if [ -f ${tmpmbn}.hdr ] ; then rm -f ${tmpmbn}.hdr; fi
    if [ -f ${tmpmbn}.cwe ] ; then rm -f ${tmpmbn}.cwe; fi
    if [ -f ${tmpmbn}.cwe.z ] ; then rm -f ${tmpmbn}.cwe.z; fi
    if [ -f legato.cwe ] ; then rm -f legato.cwe; fi
    if [ -f legato.hdr ] ; then rm -f legato.hdr; fi
    if [ -f legatoz.cwe ] ; then rm -f legatoz.cwe; fi
    if [ -f legatoz.hdr ] ; then rm -f legatoz.hdr; fi

    $HDRCNV ${img_path} -OH ${tmpmbn}.hdr -IT USER -PT $PLATFORM -V "$VERSION" -B $COMPAT_BYTE > hdrcnv-tmp.log
    CheckRet

    cat ${tmpmbn}.hdr ${img_path} > ${tmpmbn}.cwe
    CheckRet

    # legato.cwe
    $HDRCNV ${tmpmbn}.cwe -OH legato.hdr -IT APPL -PT $pid -V "$VERSION" -B $COMPAT_BYTE > hdrcnv-legato.log
    CheckRet

    cat legato.hdr ${tmpmbn}.cwe > $OUTPUT_DIR/legato-${img_suffix}.cwe
    CheckRet

    # legatoz.cwe
    if $SUPPORT_COMPRESSION; then
        $CWEZIP ${tmpmbn}.cwe -c -o ${tmpmbn}.cwe.z > cwezip.log
        CheckRet

        $HDRCNV ${tmpmbn}.cwe.z -OH legatoz.hdr -IT APPL -PT $pid -V "$VERSION" -B $COMPAT_BYTE > hdrcnv-legatoz.log
        CheckRet

        cat legatoz.hdr ${tmpmbn}.cwe.z > $OUTPUT_DIR/legatoz-${img_suffix}.cwe
        CheckRet
    fi
}

CreateImg_mdm9x15() {
    local img_type=${1:-yaffs2}
    local ubi_img_type=${2:-squashfs}

    local page_size=4096
    local pid='9X15'
    local oob_size=160
    local peb_size=256KiB
    COMPAT_BYTE=00000001
    PLATFORM='9X15'
    SUPPORT_COMPRESSION=true

    case $TARGET in
        ar7|ar86)
            pid='A911'
            ;;
        wp85|wp750x)
            pid='Y912'
            page_size=2048
            oob_size=64
            peb_size=128KiB
            ;;
        *)
            echo "Unknown product '$TARGET'"
            exit 1
            ;;
    esac

    local img_suffix=$img_type
    if [[ "$img_type" == "ubi" ]]; then
        img_suffix="${ubi_img_type}.${img_type}"
    fi

    CreateImgFs $img_type $img_suffix $ubi_img_type $page_size $oob_size $peb_size
    GenerateCwe $LEGATO_IMG $img_suffix $pid
}

CreateImg_mdm9x28() {
    local img_type=${1:-ubi}
    local ubi_img_type=${2:-squashfs}

    local img_indexes=(0)
    local page_size[0]=4096
    local pid[0]='9X28'
    local oob_size[0]=224
    local peb_size[0]=256KiB
    COMPAT_BYTE=00000001
    PLATFORM='9X28'
    SUPPORT_COMPRESSION=false
    case $TARGET in
        ar758x)
            ;;
        wp76xx)
            img_indexes+=(1)
            page_size[1]=2048
            pid[0]='Y921'
            pid[1]='Y922'
            oob_size[1]=80
            peb_size[1]=128KiB
            ;;
        *)
            echo "Unknown product '$TARGET'"
            exit 1
            ;;
    esac

    local img_suffix=$img_type
    for i in "${img_indexes[@]}"; do
        if [[ "$img_type" == "ubi" ]]; then
            if [ ${#page_size[@]} -gt 1 ]; then
                img_suffix="${ubi_img_type}.$(( ${page_size[$i]} / 1024 ))k.${img_type}"
            else
                img_suffix="${ubi_img_type}.${img_type}"
            fi
        fi

        CreateImgFs $img_type $img_suffix $ubi_img_type ${page_size[$i]} ${oob_size[$i]} ${peb_size[$i]}
        GenerateCwe $LEGATO_IMG $img_suffix ${pid[$i]}

        # Last image is the default
        export IMG_SUFFIX=$img_suffix
    done
}

CreateImg_mdm9x40() {
    local img_type=${1:-ubi}
    local ubi_img_type=${2:-squashfs}

    local page_size=4096
    local pid='9X40'
    local oob_size=224
    local peb_size=256KiB
    COMPAT_BYTE=00000001
    PLATFORM='9X40'
    SUPPORT_COMPRESSION=false

    local img_suffix=$img_type
    if [[ "$img_type" == "ubi" ]]; then
        img_suffix="${ubi_img_type}.${img_type}"
    fi

    CreateImgFs $img_type $img_suffix $ubi_img_type $page_size $oob_size $peb_size
    GenerateCwe $LEGATO_IMG $img_suffix $pid
}

DefaultImg() {
    local img_suffix=${1:-yaffs2}

    cd $OUTPUT_DIR

    ln -sf legato.${img_suffix} legato.default

    if [ -e "legato-${img_suffix}.cwe" ]; then
        ln -sf legato-${img_suffix}.cwe legato.cwe
    fi

    if [ -e "$OUTPUT_DIR/legatoz-${img_suffix}.cwe" ]; then
        ln -sf legatoz-${img_suffix}.cwe legatoz.cwe
    fi
}

StripExeAndLibs

case $TARGET in
    ar7 | ar86)
        CreateImg_mdm9x15 yaffs2
        DefaultImg yaffs2
        ;;
    wp750x | wp85)
        CreateImg_mdm9x15 yaffs2
        CreateImg_mdm9x15 ubi squashfs
        DefaultImg "squashfs.ubi"
        ;;
    ar758x | wp76xx)
        CreateImg_mdm9x28 ubi squashfs
        DefaultImg $IMG_SUFFIX
        ;;
    ar759x)
        CreateImg_mdm9x40 ubi squashfs
        DefaultImg "squashfs.ubi"
        ;;
    raspi)
        CreateImgFs squashfs
        DefaultImg "squashfs"
        ;;
    virt*)
        CreateImgFs squashfs
        DefaultImg "squashfs"
        ;;
    ?)
        echo "$0: nothing to do for target $TARGET"
        ;;
esac

exit 0

