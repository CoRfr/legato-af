#!/usr/bin/python2.7 -E
#
# Code generator main program
#
# Copyright (C) Sierra Wireless Inc.
#

# Python libraries
import os
import sys
import argparse
import collections
import hashlib
import importlib

# Need to init logging settings here, before any ifgen specific libraries are imported, in case
# they call logging functions in their module level code.  Prefix the message with 'IFGEN' so that
# it is easier to filter these messages, if ifgen is called during a build.
import logging
logging.basicConfig(format="IFGEN_%(levelname)s:%(module)s/%(funcName)s/%(lineno)s: %(message)s")

# This could probably be determined by calling the appropriate logging functions, but since
# this info is published in the documentation, no harm defining it explicitly.
LogLevelMapping = dict( DEBUG=10,
                        INFO=20,
                        WARNING=30,
                        ERROR=40,
                        CRITICAL=50 )


# ifgen specific libraries
import common
import interfaceParser


def GetInitialArguments(argList):
    # Define a parser for the '--lang' argument. Also include the logging/tracing arguments here,
    # so that they can be used as early as possible.
    #
    # Note that if there is an error in specifying the value for any of these args, then the error
    # output will only mention these args, and not the full list, e.g. incorrect level given for
    # --log-level. I don't see this as a significant issue that would need to be addressed.

    parser = argparse.ArgumentParser(add_help=False)

    parser.add_argument('--lang',
                        dest="language",
                        default='C',
                        help='specify target language; defaults to C')

    parser.add_argument('--log-level',
                        dest="logLevel",
                        action="store",
                        choices = LogLevelMapping,
                        default='',
                        help='set logging level')

    parser.add_argument('--trace',
                        dest="traceList",
                        action="append",
                        default=[],
                        help='enable tracing for given name')

    # Parse the command lines arguments for the initial args only.
    args, leftOver = parser.parse_known_args(argList)

    # Return the value of the initial arguments.
    # Also need to return the parser to add it to the main argument parser.  This is mainly
    # so it gets included in the --help output.
    return args, parser



def CreateArgumentParser(parentParser):
    # Define the command line arguments/options
    parser = argparse.ArgumentParser(description='Interface Code Generator', parents=[parentParser])

    parser.add_argument('interfaceFile',
                        metavar='FILE',
                        help='name of interface file')

    # TODO: This may actually be a C specific option
    parser.add_argument('--service-name',
                        dest="serviceName",
                        default='',
                        help='optional service instance name; defaults to input file name')

    # TODO: This may actually be a C specific option
    parser.add_argument('--output-dir',
                        dest="outputDir",
                        default='',
                        help='optional output directory for generated files')

    parser.add_argument('--get-import-list',
                        dest="getImportList",
                        action='store_true',
                        default=False,
                        help='print out the list of imported files')

    parser.add_argument('--import-dir',
                        dest="importDirs",
                        action="append",
                        default=[],
                        help='optional directory for imported files; may be given multiple times')

    parser.add_argument('--hash',
                        dest="hash",
                        action='store_true',
                        default=False,
                        help='print md5 hash for interface; NO files are generated')

    parser.add_argument('--dump',
                        dest="dump",
                        action='store_true',
                        default=False,
                        help='print info on parsed functions; NO files are generated')

    return parser



def ParseArguments(parser, argList):
    # Parse the command lines arguments
    args = parser.parse_args(argList)

    # Get the base file name, without any extensions.
    apiFileName = os.path.splitext( os.path.basename(args.interfaceFile) )[0]

    # Use the default service instance name, if none is given.
    if not args.serviceName:
        args.serviceName = apiFileName

    # fix relative paths for all paths that aren't ''
    args.importDirs = [ os.path.abspath(path) if path else path for path in args.importDirs ]
    if args.outputDir:
        args.outputDir = os.path.abspath(args.outputDir)

    return args



def MakeImportList(data, importDirs):
    importNameList =  interfaceParser.GetImportList(data)
    importPathList = []

    # The name does not contain any leading path or any suffix
    for name in importNameList:
        fullname = name+".api"

        # Try to find the imported file in the given directory list
        found = False
        for d in importDirs:
            path = os.path.join(d, fullname)
            if os.path.isfile(path):
                found = True
                break

        if not found:
            sys.stderr.write("ERROR: '%s' not found in %s\n" % (fullname, importDirs))
            sys.exit(1)

        # Found the imported file, so add it to the path list
        importPathList.append(path)

        # Process each imported file for nested imports.  The nested imported files
        # are added to the beginning of the list, so that they get processed first.
        data = open(path, 'r').read()
        importPathList = MakeImportList(data, importDirs) + importPathList

    # Ensure there are no duplicates in the list.  Any duplicates that appear later
    # in the list should be removed.  We must maintain the order of the elements in
    # the list, since this determines the processing order.  For an OrderedDict:
    #     "If a new entry overwrites an existing entry, the original insertion
    #      position is left unchanged"
    d = collections.OrderedDict()
    for p in importPathList:
        d[p] = 1
    importPathList = d.keys()

    return importPathList



def ImportLangPkg(lang):

    # The name of the package directory has 'lang' prepended to the selected language name
    langDir = 'lang' + lang

    # Import the language package, and get the language specific libraries.
    try:
        langPkg = importlib.import_module(langDir)
    except ImportError:
        # Can't find the package to import
        print >> sys.stderr, "ERROR: language package '%s' not available" % langDir
        sys.exit(1)

    logging.info("Using language package '%s'" % langDir)

    commandLib = langPkg.GetCommandLib()
    return commandLib



#
# Calculate the hash, based on the hash text for the currently processed file, as well as all
# the imported files.
#
def CalcHash(codeText, importList):
    hashTextList = [ interfaceParser.GetHashText( open(path, 'r').read() ) for path in importList ]
    hashTextList += interfaceParser.GetHashText(codeText)

    hashText = ''.join(hashTextList)

    h = hashlib.md5()
    h.update( hashText )
    hashValue = h.hexdigest()

    return hashValue, hashText



#
# Main
#
def Main():
    # Allow arguments to be specified through an environment variable. For example, this may be
    # useful to set a specific logging level, especially if ifgen is executed from a build.
    envOptions = os.environ.get('IFGEN_OPTIONS', '').split()
    argList = sys.argv[1:] + envOptions

    # Get the initial args, i.e. language choice, and logging/tracing
    initialArgs, langParser = GetInitialArguments(argList)

    # First handle logging/tracing args before anything else.
    # Note that this will not affect the logging level or tracing for any module level code
    # in this file or any other imported file, or any of the code above in this function.
    if initialArgs.logLevel:
        logging.getLogger().setLevel(LogLevelMapping[initialArgs.logLevel])

    if initialArgs.traceList:
        common.EnableTrace(initialArgs.traceList)

    # Init the package for the chosen language
    commandLib = ImportLangPkg(initialArgs.language)

    # Create a parser with both language independent and language specific arguments,
    # and parse the remaining arguments
    parser = CreateArgumentParser(langParser)
    commandLib.AddLangArgumentGroup(parser)

    args = ParseArguments(parser, argList)
    #print args

    # Read in the api file
    data = open(args.interfaceFile, 'r').read()

    # Create a list of all the imported files.
    importDirs = [ os.path.split(args.interfaceFile)[0] ] + args.importDirs
    importList =  MakeImportList(data, importDirs)

    # If we just want the import list, then print it out and exit
    if args.getImportList:
        print '\n'.join(importList)
        sys.exit(0)

    # Calculate the hashValue, as it is always needed
    hashValue, hashText = CalcHash(data, importList)

    # Handle the --hash argument here.  No need to generate any code
    if args.hash:
        if args.dump:
            # Print out the text used for generating the hash
            print hashText
        else:
            print hashValue
        sys.exit(0)

    # Run the target language specific version of this command
    commandLib.RunCommand(args, data, importList, hashValue)



#
# Init
#

Main()

