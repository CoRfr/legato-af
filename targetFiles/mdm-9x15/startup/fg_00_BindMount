#!/bin/sh

# Updated to include logic to unmount bind mounted drives - this may be called again
# after the system comes up in the case of legato install.

INSTALL_BASE=/mnt/flash
BUILTIN_BASE=/mnt/legato

# bind mount map
# Running built in
# $INSTALL_BASE/home /home
# $INSTALL_BASE/opt /opt
# $BUILTIN_BASE/usr/local /usr/local
# Running installed
# $INSTALL_BASE/home /home
# $INSTALL_BASE/opt /opt
# $INSTALL_BASE/usr/local /usr/local

if [ -f $BUILTIN_BASE/opt/legato/version ] && \
    ! diff $BUILTIN_BASE/opt/legato/version $INSTALL_BASE/opt/legato/builtInVersion >/dev/null
then
# built in versions differ ergo this is a new built in version
    USER_LOCAL=/mnt/legato/usr/local

elif diff $INSTALL_BASE/opt/legato/version $INSTALL_BASE/opt/legato/builtInVersion >/dev/null
then
# existing built in is installed version
    USER_LOCAL=/mnt/legato/usr/local

else
# newer installed version
    USER_LOCAL=/mnt/flash/usr/local
fi


# To see if it is already bind mounted
CheckBindMount()
{
    local dir_path=$1
    local mount_on=${2%$1}
    local mounted_on=$(df $dir_path | grep -v Filesystem | awk '{print $6}')
    if [ "$mounted_on" = "$mount_on" ]
    then
        return 0
    fi
    return 1
}

CreateMountpointsAndBind()
{
    local map=$1
    local as=$2
    echo "Remapping $map --> $as"
    mkdir -p $map
    mkdir -p $as
    mount --bind $map $as
}

BindMount()
{
    local dir_path=$1
    local mount_on=$3
    if CheckBindMount $dir_path $mount_on 2>/dev/null
    then
        echo "Already mapped $mount_on --> $dir_path"
    else
        if ! mount | grep $ >/dev/null
        then
            CreateMountpointsAndBind $mount_on $dir_path
        else
            # display current binding
            echo "$dir_path map needs updating"
            df $dir_path
            umount "$dir_path"
            CreateMountpointsAndBind $mount_on $dir_path
        fi
    fi
}

BindMount /opt on $INSTALL_BASE/opt
BindMount /usr/local on $USER_LOCAL
BindMount /home on $INSTALL_BASE/home

mkdir -p /home/root

# Make sure all the /etc/ mounted things below are unmounted
for mounted_etc in $(mount | grep /etc/ | awk '{print $3}')
do
    umount "$mounted_etc"
done

# Make certain files in /etc/ writeable but not persistent (changes will be lost on reboot).
# We do this by copying these files from /etc into /var/run (RAM file system) and bind mounting
# them back into /etc.
for filename in ld.so.conf profile
do
    echo "Remapping /etc/$filename --> /var/run/$filename"
    cp /etc/$filename /var/run/
    mount --bind /var/run/$filename /etc/$filename
done

# Make certain files in /etc writeable and persistent.
# Because the root file system is supposed to be read-only (to allow resetting back to factory
# settings), we create a writeable copy of these files in $INSTALL_BASE/etc and bind-mount them
# back into /etc.
# Only necessary if unionfs isn't being used.
if ! mount | grep unionfs >/dev/null; then
    if ! mount | grep "unionfs on /etc" >/dev/null; then
        mkdir -p $INSTALL_BASE/etc
        for filename in passwd group
        do
            # If the file already exists in $INSTALL_BASE/etc, don't overwrite it with the defaults
            # from the root fs.
            if ! [ -e $INSTALL_BASE/etc/$filename ]
            then
                echo "Copying /etc/$filename --> $INSTALL_BASE/etc/$filename"
                cp /etc/$filename $INSTALL_BASE/etc/
            fi
            echo "Remapping /etc/$filename --> $INSTALL_BASE/etc/$filename"
            mount --bind $INSTALL_BASE/etc/$filename /etc/$filename
        done
    else
        echo "$0 says:"
        echo "******** unionfs present but not used to mount /etc ********"
        echo "***** Not a supported configuration. Update this script ****"
        exit 1
    fi
fi

# Add /usr/local/bin to PATH in /etc/profile
echo "Adding /usr/local/bin to PATH."
echo 'export PATH=/usr/local/bin:$PATH' >> /etc/profile

# Add /usr/local/lib to the system's library search path, if it isn't already there.
if ! grep '/usr/local/lib' /etc/ld.so.conf > /dev/null
then
    echo "Adding /usr/local/lib to the system library search path."
    echo '/usr/local/lib' >> /etc/ld.so.conf
fi

# Update the ld library search cache.
# NOTE: The rootfs, including /etc will be read-only, so we have to actually create
# a library search cache file somewhere else and then bind-mount it back into /etc/ld.so.cache
# so that ld can find it when it needs it.
echo "Updating the the library search cache."
ldconfig -v -C /var/run/ld.so.cache > /dev/null
mount --bind /var/run/ld.so.cache /etc/ld.so.cache
