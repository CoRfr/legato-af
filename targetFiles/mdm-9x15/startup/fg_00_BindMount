#!/bin/sh

# Updated to include logic to unmount bind mounted drives - this may be called again
# after the system comes up in the case of legato install.

INSTALL_BASE=/mnt/flash
BUILTIN_BASE=/mnt/legato

CACHED_LIB_SOURCE=/etc/ld.so.cache.source

# bind mount map
# Running built in
# $INSTALL_BASE/home /home
# $INSTALL_BASE/opt /opt
# $BUILTIN_BASE/usr/local /usr/local
# Running installed
# $INSTALL_BASE/home /home
# $INSTALL_BASE/opt /opt
# $INSTALL_BASE/usr/local /usr/local

if [ -f $BUILTIN_BASE/opt/legato/version ] && \
    ! diff $BUILTIN_BASE/opt/legato/version $INSTALL_BASE/opt/legato/builtInVersion >/dev/null 2>&1
then
# built in versions differ ergo this is a new built in version
    USER_LOCAL=$BUILTIN_BASE/usr/local

elif diff $INSTALL_BASE/opt/legato/version $INSTALL_BASE/opt/legato/builtInVersion >/dev/null 2>&1
then
# existing built in is installed version
    USER_LOCAL=$BUILTIN_BASE/usr/local

else
# newer installed version
    USER_LOCAL=$INSTALL_BASE/usr/local
fi

# If we think we should use builtin, but the builtin usr/local is empty
# then we obviously cannot use it.
if [ "$USER_LOCAL" = "$BUILTIN_BASE/usr/local" ] && ! [ -d $BUILTIN_BASE/usr/local/bin ]
then
    echo "WARNING: Built in legato image is corrupted."
    USER_LOCAL=$INSTALL_BASE/usr/local
fi

# To see if it is already bind mounted
CheckBindMount()
{
    local dir_path=$1
    local mount_on=${2%$1}
    local mounted_on=$(df $dir_path | grep -v Filesystem | awk '{print $6}')
    if [ "$mounted_on" = "$mount_on" ]
    then
        return 0
    fi
    return 1
}

CreateMountpointsAndBind()
{
    local map=$1
    local as=$2
    echo "Remapping $map --> $as"
    mkdir -p $map
    mkdir -p $as
    mount --bind $map $as
}

BindMount()
{
    local dir_path=$1
    local mount_on=$3
    if CheckBindMount $dir_path $mount_on 2>/dev/null
    then
        echo "Already mapped $mount_on --> $dir_path"
    else
        if ! mount | grep $ >/dev/null
        then
            CreateMountpointsAndBind $mount_on $dir_path
        else
            # display current binding
            echo "$dir_path map needs updating"
            df $dir_path
            umount "$dir_path" 2>/dev/null
            CreateMountpointsAndBind $mount_on $dir_path
        fi
    fi
}

UpdateSoCache()
{
    # We have new libs. Rebuild the cache.
    # It is conceivable we are updating from an older version so we may need to add the search path

    # Add /usr/local/lib to the system's library search path, if it isn't already there.
    umount /etc/ld.so.conf 2>/dev/null
    if ! grep '/usr/local/lib' /etc/ld.so.conf > /dev/null
    then
        echo "Adding /usr/local/lib to the system library search path."
        echo '/usr/local/lib' >> /etc/ld.so.conf
    fi
    # Older frameworks bind-mounted /etc/ld.so.cache from tmpfs but we use a persistant cache
    # for faster startup.
    umount /etc/ld.so.cache 2>/dev/null
    echo "Updating the the library search cache."
    ldconfig > /dev/null
}

# Check that ld.so.cache is current
CheckAndUpdateSoCache()
{
    mounted_lib=$(cat /etc/mtab | grep /usr/local | awk '{print $1}')
    if [ -f $CACHED_LIB_SOURCE ]
    then
        cached_lib=$(cat $CACHED_LIB_SOURCE)
        if [ "$cached_lib" = "$mounted_lib" ]
        then
            return 0
        fi
    fi
    if UpdateSoCache
    then
        echo $mounted_lib >$CACHED_LIB_SOURCE
    fi
}

BindMount /opt on $INSTALL_BASE/opt
BindMount /usr/local on $USER_LOCAL
BindMount /home on $INSTALL_BASE/home

mkdir -p /home/root

# Make sure all the /etc/ mounted things below are unmounted
for mounted_etc in $(mount | grep /etc/ | awk '{print $3}')
do
    umount "$mounted_etc"
done

# Make certain files in /etc/ writeable but not persistent (changes will be lost on reboot).
# We do this by copying these files from /etc into /var/run (RAM file system) and bind mounting
# them back into /etc.
for filename in profile
do
    echo "Remapping /etc/$filename --> /var/run/$filename"
    cp /etc/$filename /var/run/
    mount --bind /var/run/$filename /etc/$filename
done

# Make sure this firmware supports us
if ! mount | grep unionfs >/dev/null &&
   ! mount | grep aufs; then
        echo "$0 says:"
        echo "***** Neither unionfs nor aufs used to mount /etc ********"
        echo "***** Not a supported configuration. Update the firmware. ******"
        exit 1
fi

# Add /usr/local/bin to PATH in /etc/profile
echo "Adding /usr/local/bin to PATH."
echo 'export PATH=/usr/local/bin:$PATH' >> /etc/profile

# If the place where /usr/local is mounted has changed then maybe the libs have too. We should update.
# And if we don't know where we created this cache from, we certainly need to update.
CheckAndUpdateSoCache
