#! /bin/sh

ecm_conf=/etc/legato/ecm.conf
usbmode=/etc/legato/usbmode
dhcp_conf=/etc/dnsmasq.conf
ecm_dhcp_conf=/etc/dnsmasq.ecm.conf
legato_bringup_ecm=/mnt/flash/startup/fg_05_BringUpDeveloperInterface

command_name=$(basename $0)
usage()
{
cat << END_HELP
    NAME
        configEcm - set up the ecm interface.

    SYNOPSIS
        $command_name show|off|on [target <ipV4_addr>] host <ipV4_addr> netmask <ipV4_netmansk>]

    DESCRIPTION
        $command_name show - shows current configuration

        $command_name off - deconfigures and turns off ecm

        $command_name on [target <ipV4_addr>] host <ipV4_addr> netmask <ipV4_netmansk>]
            configures ecm
                target: ipV4 address for target
                host: ipV4 address for the host PC
                netmask: ipV4 netmask for the connection

            If no values are given the default configuration is:
                target: 192.168.1.2
                host: 192.168.1.3
                netmask: 255.255.255.0

            If the given address and netmask (or the defaults if no parameters are given) conflicts
            with an existing network connection, no change will be made.
END_HELP
}

mask_from_bits()
{
    local mask=""
    local bits=$1
    local octets=4
    while true; do
        local mag=128
        local val=0
        while [ $mag -gt 0 ]; do
            if [ $bits = 0 ]; then
                break
            fi
            val=$(( $val + $mag ))
            mag=$(( $mag / 2 ))
            bits=$(( $bits - 1 ))
        done
        mask="$mask$val"
        octets=$(( $octets - 1 ))
        if [ $octets = 0 ]; then
            break
        fi
        mask="$mask."
    done

    echo $mask
}

and_addr()
{
    mask=$1
    addr=$2

    splitme="$mask.$addr"
    OldIFS=$IFS
    IFS=.
    set -- $splitme
    IFS=$OldIFS

    masked_addr=$(printf "%d.%d.%d.%d\n" \
            $(($1 & $5)) $(($2 & $6)) \
            $(($3 & $7)) $(($4 & $8))) 2>/dev/null
}

#ipV4 only
is_same_subnet()
{
    net1=$1
    net2=$2
    mask=$3

    and_addr $mask $net1
    subnet1=$masked_addr
    and_addr $mask $net2
    if [ "$subnet1" = "$masked_addr" ]; then
        return 0
    else
        return 1
    fi
}

get_param()
{
    local line=$( grep "$1" $ecm_conf 2>/dev/null )
    echo ${line#*:}
}


# adds the necessary configs to the dhcp server
config_dhcp()
{
    echo "interface=usb0" >$ecm_dhcp_conf
    echo "dhcp-range=$1,$1,12h" >>$ecm_dhcp_conf

    echo "conf-file=$ecm_dhcp_conf" >> $dhcp_conf
}

# remove the link to ecm config from the dnsmasq.conf file
unconfig_dhcp()
{
    local temp_file=/tmp/$(basename $dhcp_conf)
    grep -v "$ecm_dhcp_conf" $dhcp_conf >$temp_file
    mv -f $temp_file $dhcp_conf

    rm $ecm_dhcp_conf
    rm $ecm_conf
}

restart_ecm()
{
    host_addr=$1
    /etc/init.d/usb restart
# we need to clean out the leases database ourselves and it seems we
# need to delete the file completely!! Just clearing the entry doesn't work and
# dhcp_release doesn't work.
    /etc/init.d/dnsmasq stop
    rm -f /var/lib/misc/dnsmasq.leases
    /etc/init.d/dnsmasq start
}

validate_ipV4()
{
# simply find out if the address exists in the universal (sub) net
    and_addr "255.255.255.255" $1
    [ -n "$1" ] && [ "$masked_addr" = "$1" ]
}

#should be two ipV4 addrs and a netmask
check_values()
{
    for val in $@; do
        if ! validate_ipV4 $val; then
            echo "$val is not a valid ipV4 address"
            return 1
        fi
    done

    if ! is_same_subnet $1 $2 $3; then
        echo "Target ($1) and Host ($2) addresses must be on the same subnet"
        echo "as specified by netmask ($3)"
        return 1
    fi
    return 0
}

# find other ipV4 interfaces and make sure we aren't trying to set something up
# in an overlapping subnet
check_no_conflicts()
{
    targ_addr=$1
    ecm_mask=$2

    inet_list=$(ip -f inet addr | awk '/\d*:/,/inet/{ if (/\d*:/){a=$2}; if (/inet/){b=$2; print a b}}')
    inet_list="lo:127.0.0.1/8 eth0:10.1.28.211/24 usb0:192.168.1.2/24"
    for item in $inet_list; do
        case $item in
            lo:*|usb0:*)
            # loopback or usb0 we ignore
            ;;
            *)
            iface=${item%%:*}
            addr=${item##*:}
            maskbits=${addr##*/}
            addr=${addr%%/*}
            mask=$(mask_from_bits $maskbits)

            if is_same_subnet $targ_addr $addr $ecm_mask || is_same_subnet $targ_addr $addr $mask; then
                echo "$targ_addr ($ecm_mask) conflicts with subnet on $item"
                return 1
            fi
            ;;
        esac
    done
}

write_config()
{
    echo "Do not edit this file." > $ecm_conf
    echo "Use configEcm command to change these configs." >> $ecm_conf
    echo "" >> $ecm_conf
    echo "target.ipV4: $1" >> $ecm_conf
    echo "host.ipV4: $2" >> $ecm_conf
    echo "netmask.ipV4: $3" >> $ecm_conf
}

setup_usbmode()
{
    if [ -f $usbmode ]; then
        cp -f $usbmode $usbmode.bak
        if ! grep ecm $usbmode; then
            echo "ecm" >>$usbmode
        fi
    else
        echo "ecm" > $usbmode
    fi
}

revert_usbmode()
{
    if [ -f $usbmode.bak ];then
        cp -f $usbmode.bak $usbmode
    else
        rm -f $usbmode
    fi
}

create_conf()
{
    local targ_addr
    local host_addr
    local mask
    shift
    while [ $# -gt 1 ]
    do
        case $1 in
        target) shift; targ_addr=$1;;
        host) shift; host_addr=$1;;
        netmask) shift; mask=$1;;
        *)
            echo "unknown option $1"
            usage
            return 1
            ;;
        esac
        shift
    done

    if [ -z $targ_addr ]; then
        if [ -f $ecm_conf ]; then
            echo "No target address. Exiting without changes."
            return 1
        else
            echo "No target address. Using defaults."
            targ_addr="192.168.1.2"
            host_addr="192.168.1.3"
            mask="255.255.255.0"
        fi
    fi

    if check_values "$targ_addr" "$host_addr" "$mask" && \
        check_no_conflicts "$targ_addr" "$mask"; then
            write_config $targ_addr $host_addr $mask
    else
        echo "Exiting without changes."
        return 1
    fi

    return 0
}

case $1 in
    show)
        if [ -f $ecm_conf ]; then
            awk 'NR > 3' $ecm_conf
        else
            echo "ecm not configured"
            exit 1
        fi
        ;;
    off)
        local host=$(get_param host.ipV4)
        unconfig_dhcp
        revert_usbmode
        restart_ecm $host >/dev/null
        ;;
    on)
        # on requires some arguments else it will do default
        echo ""
        if create_conf $@; then
            setup_usbmode
            local host=$(get_param host.ipV4)
            config_dhcp $host
            restart_ecm >/dev/null
            if [ -f $legato_bringup_ecm ]; then
                echo bringing up interface
                $legato_bringup_ecm
            fi
        else
            echo "Could not create ecm configuration"
            exit 1
        fi
        ;;
    -h|--help|*)
        usage
        ;;
esac
echo "DONE"

