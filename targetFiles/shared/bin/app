#!/bin/sh

# Starts, stops, restarts, gets info/status, and removes Legato applications.

ACTION=$1
APP_NAME=$(basename "$2" | sed 's/\.[^.]*$//')

exitCode=0

# used to carry the result of GetAppStatus
appStatus="unknown"

# Make sure system bin is in the path.
# Search installed system bin first. Fallback to MTD3 if necessary.
export PATH=/legato/systems/current/bin:/mnt/legato/system/bin:$PATH


# Check if ps supports arguments.  If so, we need to run "ps aux" to be able
# to see the supervisor process if it is running.  Otherwise, we just run "ps".
PS='ps aux'
if ! $PS > /dev/null 2>&1
then
    PS=ps
fi


PrintUsage()
{
    echo
    echo "USAGE: `basename $0` [start|stop|restart|remove|status|version|info] APP_NAME [ APP_NAME ... ]"
    echo "   or: `basename $0` [start|stop|restart|remove|status|version|info] '*'"
    echo "   or: `basename $0` [list|status|info]"
    echo "   or: `basename $0` runProc APP_NAME [PROC_NAME] [options]"
    echo
    echo "In the first form, names of one or more applications are given."
    echo
    echo "In the second form, all installed applications will be acted upon."
    echo
    echo "In the third form, no application names are given."
    echo
    echo "There are two main usages of the forth form (runProc):"
    echo
    echo "`basename $0` runProc <appName> <procName> [options]"
    echo "   Runs a configured process inside an app using the process settings from the"
    echo "   configuration database.  If an exePath is provided as an option then the specified"
    echo "   executable is used instead of the configured executable."
    echo
    echo "`basename $0` runProc <appName> [<procName>] --exe=<exePath> [options]"
    echo "   Runs an executable inside an app.  The exePath must be provided and the optional"
    echo "   process name must not match any configured processes for the app.  Unless specified"
    echo "   using the options below the executable will be run with default settings."
    echo
    echo "`basename $0` runProc takes the following options that can be used to modify the process"
    echo " settings:"
    echo
    echo "   --exe=<exePath>"
    echo "       Use the executable at <exePath>.  <exePath> is from the perspective of the app"
    echo "       (ie. /exe would be at the sandbox root if the app is sandboxed)."
    echo
    echo "   --priority=<priorityStr>"
    echo "       Sets the priority of the process.  <priorityStr> can be either 'idle', 'low',"
    echo "       'medium', 'high', 'rt1', 'rt2', ... 'rt32'."
    echo
    echo "   --faultAction=<action>"
    echo "       Sets the fault action for the process.  <action> can be either 'ignore',"
    echo "       'restartProc', 'restartApp', 'stopApp'."
    echo
    echo "   -- [<args> ...]"
    echo "       The -- option is used to specify comamnd line arguments to the process."
    echo "       Everything following the -- option is taken as arguments to the process to be"
    echo "       started.  Therefore the -- option must be the last option to appCtrl runProc."
    echo "       If the -- option is not used then the configured arguments are used if available."
    echo
}


ListApps()
{
    appCtrl "list"
}


AppStatus()
{
    if [ $# -eq 0 ]
    then
        appCtrl "status"
        exit $?
    fi

    while [ $# -ge 1 ]
    do
        appCtrl "status" "$1"

        if [ $? -ne 0 ]
        then
            exit 1
        fi

        shift
    done
}


AppInfo()
{
    if [ $# -eq 0 ]
    then
        appCtrl "info"
        exit $?
    fi

    while [ $# -ge 1 ]
    do
        appCtrl "info" "$1"

        if [ $? -ne 0 ]
        then
            exit 1
        fi

        shift
    done
}


AppVersion()
{
    while [ $# -ge 1 ]
    do
        appCtrl "version" "$1"

        if [ $? -ne 0 ]
        then
            exit 1
        fi

        shift
    done
}


StartApp()
# Takes a list of applications as arguments.
{
    while [ $# -ge 1 ]
    do
        echo "Starting app '$1'..."

        appCtrl "start" "$1"

        if [ $? -ne 0 ]
        then
            exitCode=1
        else
            echo "DONE"
        fi

        shift
    done
}


StopApp()
# Takes a list of applications as arguments.
{
    while [ $# -ge 1 ]
    do
        echo "Stopping app '$1'..."

        appCtrl "stop" "$1"

        if [ $? -ne 0 ]
        then
            exitCode=1
        else
            echo "DONE"
        fi

        shift
    done
}


RemoveApp()
# Takes a list of applications as arguments.
{
    # loop through the list giving each app individual treatment
    # preserve any non-zero exit code
    while [ $# -ge 1 ]
    do
        GetAppStatus $1
        if [ "$appStatus" == "not_installed" ]
        then
            echo "App '$1' is not installed."
            shift
            continue
        fi

        echo "Removing app '$1'..."

        # NOTE: update --remove will make sure the app is stopped first.
        /legato/systems/current/bin/update --remove "$1"

        if [ $? -ne 0 ]
        then
            exitCode=1
            echo "***Error: Couldn't remove app '$1'." 1>&2
        fi

        shift
    done

    # Load the latest IPC binding configuration into the Service Directory.
    sdir load
    if [ $? -ne 0 ]
    then
        exitCode=1
        echo "Couldn't update Service Directory's IPC bindings."
    fi
}

RunProc()
{
    appCtrl "runProc" $ARGS_LIST
}


# Before we do any work, see if the framework is running.
$PS | grep supervisor | grep -v grep > /dev/null
if [ $? -ne 0 ]
then
    echo "The legato framework is not running. Please start it before proceeding."
    exit 1
fi

# Use the new appCtrl status to determine what state the app is currently in.
# Sets appStatus top 'not_installed' 'stopped' 'running' or 'unknown'
GetAppStatus()
{
    case $(appCtrl "status" "$1") in

    *installed*)
        appStatus='not_installed'
        ;;
    *stopped*)
        appStatus='stopped'
        ;;
    *running*)
        appStatus='running'
        ;;
    *)
        appStatus='unknown'
        ;;
    esac
}

# Check that something was given as an app name.
CheckAppNameAvail()
{
    if [ "$APP_NAME" = "" ]
    then
        echo "Missing application name."
        exit 1
    fi
}

# Check if they are asking for help.
if [ "$1" = "-h" -o "$1" = "help" -o "$1" = "--help" ]
then
    PrintUsage
    exit 0
fi

if [ "$ACTION" = "runProc" ]
then
    # Get the full list of arguments.
    if [ "$APP_NAME" = "*" ]
    then
        echo "Only one application can be specified with the runProc command."
        exit 1
    else
        shift

        for arg in "$@"
        do
            ARGS_LIST="$ARGS_LIST $arg"
        done
    fi
else
    # Build the list of applications to operate on.
    APP_LIST=
    if [ "$APP_NAME" = "*" ]
    then
        APP_LIST=`appCtrl list`
        if [ "$APP_LIST" = "" ]
        then
            echo "There are no applications currently installed."
            exit 0
        fi
    else
        shift

        for arg in "$@"
        do
            APP_LIST="$APP_LIST $(basename $arg | sed 's/\.[^.]*$//')"
        done
    fi
fi

case "$ACTION" in

start)
    CheckAppNameAvail
    StartApp $APP_LIST
    ;;

stop)
    CheckAppNameAvail
    StopApp $APP_LIST
    ;;

restart)
    CheckAppNameAvail
    StopApp $APP_LIST
    exitCode=0
    StartApp $APP_LIST
    ;;

remove)
    CheckAppNameAvail
    # NOTE: RemoveApp will make sure each app is stopped first.
    RemoveApp $APP_LIST
    ;;

status)
    AppStatus $APP_LIST
    ;;

version)
    CheckAppNameAvail
    AppVersion $APP_LIST
    ;;

list)
    ListApps
    ;;

info)
    AppInfo $APP_LIST
    ;;

runProc)
    CheckAppNameAvail
    RunProc
    ;;

*)
    PrintUsage
    exit 1
    ;;

esac

exit $exitCode
