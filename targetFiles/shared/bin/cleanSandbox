#!/bin/sh

# Check if ps supports arguments.  If so, we need to run "ps aux" to be able
# to see the supervisor process if it is running.  Otherwise, we just run "ps".
PS='ps aux'
if ! $PS > /dev/null 2>&1
then
    PS=ps
fi


PrintHelp()
{
    PROG_NAME=$(basename $0)

    echo "NAME"
    echo "        $PROG_NAME - Clean up a stopped application's sandbox."
    echo
    echo "SYNOPSIS"
    echo "        $PROG_NAME APP_NAME"
    echo
    echo "DESCRIPTION"
    echo "        APP_NAME is the name of the application."
}


if [ $# -ne 1 ]
then
    echo "ERROR: Invalid number of arguments." 1>&2
    exit 1
fi

if [ "$1" = "--help" -o "$1" = "-h" ]
then
    PrintHelp
    exit 0
fi

APP_NAME=$1

# Check if the application is still running.
if app status $APP_NAME | grep -E -e 'running$' -e 'paused$' > /dev/null
then
    app status $APP_NAME
    echo "Try stopping it (using 'app stop $APP_NAME')."
    exit 1
fi

# Check if there are processes still running inside the sandbox.
procsInSandboxes=`procInSandbox $APP_NAME`
if [ "$procsInSandboxes" ]
then
    echo "The following processes are currently inside the sandbox:"
    for pid in $procsInSandboxes
    do
        $PS | grep $pid | grep -v "grep $pid"
    done
    echo "Can't clean sandbox until these processes are terminated or moved out of the sandbox directory."
    exit 1
fi

# Look for file system mounts under the application's sandbox directory.
# Sort them reverse-alphabetically to ensure that mounts that are deeper in the directory tree
# are unmounted first.
for mountedObject in `mount | grep /legato/sandboxes/$APP_NAME 2> /dev/null | awk '{ print $3 }' | sort -r`
do
    echo "Unmounting $mountedObject"
    umount $mountedObject
    if [ $? -ne 0 ]
    then
        failed=1
    fi
done

if [ "$failed" ]
then
    exit 1
fi
