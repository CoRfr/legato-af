#!/bin/sh

# Starts/stops/restarts the Legato framework.

SUPERVISOR_CONFIG_ROOT=/tmp/LegatoConfigTree
CONFIG_DIR=/opt/legato/configTree
APPS_ROOT=/opt/legato/apps
SYS_PROCS_ROOT=/opt/legato

# Wait upto 10 seconds for appCtrl to stop legato
StopLegatoTimeout=10

ACTION=$1

# Make sure /usr/local/bin is in the path.
PATH=/usr/local/bin:$PATH


# Check if ps supports arguments.  If so, we need to run "ps aux" to be able
# to see the supervisor process if it is running.  Otherwise, we just run "ps".
PS='ps aux'
if ! $PS > /dev/null 2>&1
then
    PS=ps
fi


PrintUsage()
{
    echo "USAGE: `basename $0` [start|stop|restart|version]"
}


IsRunning()
# Checks if a process with a given name is running.
# Takes a single argument, which is the name of the process.
{
    $PS | grep $1 | grep -v grep > /dev/null
}


LegatoStatus()
{
    if IsRunning supervisor
    then
        echo "Legato framework is running."
        exit 0
    else
        echo "Legato framework is not running."
        exit 0
    fi
}


StartLegato()
{
    # Make sure it isn't running already.
    if IsRunning supervisor
    then
        echo "The Legato Supervisor is already running."
        exit 0
    fi

    echo "Starting Legato... "

    # Make sure the configTree's configuration directory exists.
    mkdir -p $CONFIG_DIR &&

    # Configure the Supervisor to start the sysProcs.
    mkdir -p $SUPERVISOR_CONFIG_ROOT &&
    > $SUPERVISOR_CONFIG_ROOT/sysProcs
    for procName in serviceDirectory logCtrlDaemon configTree watchdog
    do
        if [ ! -f "/usr/local/bin/$procName" ]
        then
            continue
        fi
        echo "/usr/local/bin/$procName" >> $SUPERVISOR_CONFIG_ROOT/sysProcs
        if ! [ $? ]
        then
            echo "***ERROR: Failed to configure $SUPERVISOR_CONFIG_ROOT/sysProcs."
            exit 1
        fi

        # Configure the Supervisor to use the sysProcs environment variables.
        if [ -f "$SYS_PROCS_ROOT/$procName/envVars" ]
        then
            # Copy the sysProc's environment variable file into the main configuration directory.
            mkdir "$SUPERVISOR_CONFIG_ROOT/$procName/"
            cp "$SYS_PROCS_ROOT/$procName/envVars" "$SUPERVISOR_CONFIG_ROOT/$procName/envVars"
        fi
    done

    # Start the Supervisor (it will Daemonize itself).
    echo "Starting the supervisor..."
    /usr/local/bin/supervisor

    # NOTE: The Supervisor will automatically start all the applications after it starts
    #       the "sysProcs".
}


StopLegato()
{
    if IsRunning supervisor
    then
        echo "Stopping Legato... "

        # Tell the Supervisor to shutdown Legato.
        appCtrl "stopLegato" 2> /dev/null &
        appCtrlPid=$!

        # wait for supervisor shutdown
        countDown=$StopLegatoTimeout
        while [ $countDown -ne 0 ]
        do
            if IsRunning supervisor
            then
                sleep 1
            else
                break
            fi
            countDown=`expr $countDown - 1`
        done

        # make sure supervisor shut down
        if IsRunning supervisor
        then
            if $PS | grep $appCtrlPid | grep appCtrl | grep -v grep > /dev/null
            then
                echo "appCtrl still trying to shut down supervisor after 10 seconds"
            else
                wait $appCtrlPid
                echo "appCtrl exited with code $? and supervisor still running after 10 seconds."
            fi

            echo "Killing supervisor ..."
            killall supervisor > /dev/null 2>&1
        fi

        # Delete the Configuration Tree we built in /tmp.
        rm -rf $SUPERVISOR_CONFIG_ROOT
    fi

    # Make sure the serviceDirectory isn't still running.
    if IsRunning serviceDirectory
    then
        echo "Service Directory still running. Killing it now ..."
        killall serviceDirectory > /dev/null 2>&1
    else
        echo "Legato wasn't running."
    fi
    echo "DONE."
}


AddUserToAppBinding()
{
    config set users/$1/bindings/$2/app        $3
    config set users/root/bindings/$2/interface  $2
}


InstallLegato()
{
    # Make sure the old version of the framework is shut down.
    StopLegato

    echo "Cleaning..."

    # Remove the old version of the Legato framework.
    rm -rf /usr/local/*

    # Remove the old default startup scripts.
    rm -rf /mnt/flash/startupDefaults

    echo "Checking target environment..."
    mount | grep ' /usr/local ' > /dev/null
    if [ $? -ne 0 ]
    then
        echo "Remapping /usr/local --> /mnt/flash/usr/local"
        mkdir -p /mnt/flash/usr/local
        mkdir -p /usr/local
        mount --bind /mnt/flash/usr/local   /usr/local
    fi

    mount | grep ' /opt ' > /dev/null
    if [ $? -ne 0 ]
    then
        # Make /opt actually be /mnt/flash/opt.
        echo "Remapping /opt --> /mnt/flash/opt"
        mkdir -p /mnt/flash/opt
        mkdir -p /opt
        mount --bind /mnt/flash/opt /opt
    fi

    echo "Unpacking..."

    # Change to the root directory.  The tarball containing the new framework is rooted there.
    cd / &&

    # Un-tar the framework into place.
    (
    if ! which bsdtar > /dev/null 2>&1
    then
        tar x &&

        # Make sure everything under /usr and /opt are owned by root and are in the root user's group.
        # TODO: This must be removed when switching to read-only root file system.
        # This can be removed when we have a better version of tar on target.
        chmod -R go-w /usr/local &&
        chown -R root:root /usr &&
        chown -R root:root /opt &&
        # Just in case busybox tar set non-root ownership of /
        # TODO: This must be removed when switching to read-only root file system.
        # This can be removed when we have a better version of tar on target.
        chown root:root /
    else
        bsdtar xpo -f -
    fi
    ) &&

    # Make sure the startup scripts are executable and owned by root.
    chown -R root:root /mnt/flash/startupDefaults &&
    chmod -R u+x /mnt/flash/startupDefaults || exit 1

    # If there are no startup scripts installed yet, we can't continue until the scripts have
    # been installed and the target has been rebooted.
    if ! ls /mnt/flash/startup/* > /dev/null 2>&1
    then
        echo "STARTUP SCRIPTS MISSING."
        echo "Installing startup scripts..."

        mkdir -p /mnt/flash/startup
        cp /mnt/flash/startupDefaults/* /mnt/flash/startup || exit 1

        echo "DONE."
        echo "**** REBOOT REQUIRED ****"
        echo "Reboot target and restart legato framework installation process."
        exit 42
    fi

    # If the startup scripts are out of date, we can't continue installation until the scripts
    # have been updated and the target has been rebooted.
    if ! diff /mnt/flash/startup /mnt/flash/startupDefaults
    then
        echo "STARTUP SCRIPTS OUT OF DATE."
        echo "Backing up old startup scripts to /mnt/flash/startupBackups..."

        rm -rf /mnt/flash/startupBackups
        mv /mnt/flash/startup /mnt/flash/startupBackups || exit 1

        echo "DONE."
        echo "Installing new startup scripts..."

        mkdir -p /mnt/flash/startup
        cp /mnt/flash/startupDefaults/* /mnt/flash/startup || exit 1

        echo "DONE."
        echo "**** REBOOT REQUIRED ****"
        echo "Reboot target and restart legato framework installation process."
        exit 42
    fi

    # Update the ld library cache such that all the new framework libraries under /usr/local/lib
    # can be found by the dynamic linker.
    echo "Updating dynamic linker configuration..."
    umount /etc/ld.so.cache
    /sbin/ldconfig -v -C /var/run/ld.so.cache &&
    mount --bind /var/run/ld.so.cache /etc/ld.so.cache &&

    # Start up the new version of the framework.
    StartLegato &&

    # Add binding configuration needed by the framework tools.
    # TODO: Remove this when the tools becomes command-line apps.
    (
        # cm tool
        AddUserToAppBinding root le_mdc modemService &&
        AddUserToAppBinding root le_mrc modemService &&
        AddUserToAppBinding root le_sim modemService &&
        AddUserToAppBinding root le_data dataConnectionService

        # fwupdate tool
        AddUserToAppBinding root le_info modemService &&
        AddUserToAppBinding root le_fwupdate modemService
        
        # agent
        AddUserToAppBinding root le_posCtrl positioningService &&
        AddUserToAppBinding root le_pos positioningService
    ) &&

    # Install and start the bundled applications.
    (
        # Remove old versions of the bundled apps.
        for appFile in `ls /usr/local/bin/apps`
        do
            APP_NAME=$(basename "$appFile" | sed "s/\.[^.]*$//") &&
            /usr/local/bin/app remove ""$APP_NAME""
        done

        # Install new versions of the bundled apps.
        for appFile in `ls /usr/local/bin/apps`
        do
            APP_NAME=$(basename "$appFile" | sed "s/\.[^.]*$//") &&
            cat /usr/local/bin/apps/$appFile | /usr/local/bin/app install ""$APP_NAME""
        done

        # Start the bundled apps.
        for appFile in `ls /usr/local/bin/apps`
        do
            APP_NAME=$(basename "$appFile" | sed "s/\.[^.]*$//") &&
            /usr/local/bin/app start $APP_NAME
        done
    ) &&

    # Remove the app package files for the bundled applications to save space in flash.
    rm -rf /usr/local/bin/apps &&

    if [ $? -eq 0 ]
    then
        echo "SUCCESS"
    else
        echo "FAILED"
        exit 1
    fi
}


case "$ACTION" in
start)
    StartLegato
    ;;

stop)
    StopLegato
    ;;

restart)
    StopLegato
    StartLegato
    ;;

status)
    LegatoStatus
    ;;

install)
    InstallLegato
    ;;

help | --help | -h)
    PrintUsage
    ;;

version)
    if [ -f /opt/legato/version ]
    then
        cat /opt/legato/version
    else
        echo "UNKNOWN"
        exit 1
    fi
    ;;

*)
    PrintUsage
    exit 1
    ;;

esac
