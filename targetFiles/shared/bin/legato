#!/bin/sh

# Starts/stops/restarts the Legato framework.

SUPERVISOR_CONFIG_ROOT=/tmp/LegatoConfigTree
CONFIG_DIR=/opt/legato/configTree
APPS_ROOT=/opt/legato/apps
SYS_PROCS_ROOT=/opt/legato

# Wait upto 10 seconds for appCtrl to stop legato
StopLegatoTimeout=10

ACTION=$1

# Make sure /usr/local/bin and /sbin is in the path.
PATH=/usr/local/bin:/sbin:$PATH


# Check if ps supports arguments.  If so, we need to run "ps aux" to be able
# to see the supervisor process if it is running.  Otherwise, we just run "ps".
PS='ps aux'
if ! $PS > /dev/null 2>&1
then
    PS=ps
fi

# Detect the PCONFIG file. This will disable the positioning service
if [ -f /mnt/userrw/PCONFIG ]
then
    ENABLE_POS=false
    ENABLE_OLDAV=false
else
    ENABLE_POS=true
    ENABLE_OLDAV=true
fi

PrintUsage()
{
    echo "USAGE: `basename $0` [start|stop|restart|version|install|help|bootcheck]"
}


IsRunning()
# Checks if a process with a given name is running.
# Takes a single argument, which is the name of the process.
{
    $PS | grep $1 | grep -v grep > /dev/null
}


LegatoStatus()
{
    if IsRunning supervisor
    then
        echo "Legato framework is running."
        exit 0
    else
        echo "Legato framework is not running."
        exit 1
    fi
}


StartLegato()
{
    # Provide information about the device model
    if [ ! -f "/tmp/deviceModel" ]
    then
        bsinfo -l | grep ' - '`bsinfo -t | cut -d ' ' -f 4` | sed 's/^BS//;s/ - .*$//' > /tmp/deviceModel
    fi

    # Make sure it isn't running already.
    if IsRunning supervisor
    then
        echo "The Legato Supervisor is already running."
        exit 0
    fi

    echo "Starting Legato... "

    # Make sure the configTree's configuration directory exists.
    mkdir -p $CONFIG_DIR &&

    # Configure the Supervisor to start the sysProcs.
    mkdir -p $SUPERVISOR_CONFIG_ROOT &&
    > $SUPERVISOR_CONFIG_ROOT/sysProcs
    for procName in serviceDirectory logCtrlDaemon configTree watchdog updateDaemon
    do
        if [ ! -f "/usr/local/bin/$procName" ]
        then
            continue
        fi
        echo "/usr/local/bin/$procName" >> $SUPERVISOR_CONFIG_ROOT/sysProcs
        if ! [ $? ]
        then
            echo "***ERROR: Failed to configure $SUPERVISOR_CONFIG_ROOT/sysProcs."
            exit 1
        fi

        # Configure the Supervisor to use the sysProcs environment variables.
        if [ -f "$SYS_PROCS_ROOT/$procName/envVars" ]
        then
            # Copy the sysProc's environment variable file into the main configuration directory.
            mkdir "$SUPERVISOR_CONFIG_ROOT/$procName/"
            cp "$SYS_PROCS_ROOT/$procName/envVars" "$SUPERVISOR_CONFIG_ROOT/$procName/envVars"
        fi
    done

    # Start the Supervisor (it will Daemonize itself).
    echo "Starting the supervisor..."
    /usr/local/bin/supervisor

    # NOTE: The Supervisor will automatically start all the applications after it starts
    #       the "sysProcs".
}


StopLegato()
{
    wasRunning="no"

    if IsRunning supervisor
    then
        wasRunning="yes"

        echo "Stopping Legato... "

        # Tell the Supervisor to shutdown Legato.
        appCtrl "stopLegato" 2> /dev/null &
        appCtrlPid=$!

        # wait for supervisor shutdown
        countDown=$StopLegatoTimeout
        while [ $countDown -ne 0 ]
        do
            if IsRunning supervisor
            then
                sleep 1
            else
                break
            fi
            countDown=`expr $countDown - 1`
        done

        # make sure supervisor shut down
        if IsRunning supervisor
        then
            if $PS | grep $appCtrlPid | grep appCtrl | grep -v grep > /dev/null
            then
                echo "appCtrl still trying to shut down supervisor after 10 seconds"
            else
                wait $appCtrlPid
                echo "appCtrl exited with code $? and supervisor still running after 10 seconds."
            fi

            echo "Killing supervisor ..."
            killall supervisor > /dev/null 2>&1
        fi

        # Delete the Configuration Tree we built in /tmp.
        rm -rf $SUPERVISOR_CONFIG_ROOT
    fi

    # Make sure the serviceDirectory isn't still running.
    if IsRunning serviceDirectory
    then
        wasRunning="yes"

        echo "Service Directory still running. Killing it now ..."

        killall serviceDirectory > /dev/null 2>&1

    fi

    # supervisor mounted smack. supervisor is dead now so unmount smack else it may
    # give us trouble if we need to unmount the things smack is mounted to
    umount /opt/legato/smack

    if [ $wasRunning = "yes" ]
    then
        echo "DONE."
    else
        echo "Legato wasn't running."
    fi
}


AddUserToAppBinding()
{
    config set users/$1/bindings/$2/app        $3
    config set users/root/bindings/$2/interface  $2
}

# Add binding configuration needed by the framework tools.
# TODO: Remove this when the tools becomes command-line apps.
# This should probably read a file created by the build to determine
# what needs to be bound.
AddBindings()
{
    # cm tool
    AddUserToAppBinding root le_mdc modemService &&
    AddUserToAppBinding root le_mrc modemService &&
    AddUserToAppBinding root le_sim modemService &&
    AddUserToAppBinding root le_sms modemService &&
    AddUserToAppBinding root le_temp modemService &&
    AddUserToAppBinding root le_adc modemService &&
    AddUserToAppBinding root le_data dataConnectionService

    # fwupdate tool
    AddUserToAppBinding root le_info modemService &&
    AddUserToAppBinding root le_fwupdate modemService

    # agent
    AddUserToAppBinding root le_posCtrl positioningService &&
    AddUserToAppBinding root le_pos positioningService
}

StartupScriptMissing()
{
    ! ls /mnt/flash/startup/* > /dev/null 2>&1
}

StartupScriptOld()
{
    ! diff /mnt/flash/startup /mnt/flash/startupDefaults > /dev/null 2>&1
}

CopyDefaultsToStartup()
{
    mkdir -p /mnt/flash/startup
    if ! cp -a /mnt/flash/startupDefaults/* /mnt/flash/startup/
    then
        echo "Copying default startup scripts failed"
        exit 1
    fi
    echo "DONE."
}

BackupOldStartup()
{
    rm -rf /mnt/flash/startupBackups
    if ! mv /mnt/flash/startup /mnt/flash/startupBackups
    then
        echo "Backing up old startup scripts failed"
        exit 1
    fi
    echo "DONE."
}

InstallStartupScripts()
{
    echo "STARTUP SCRIPTS MISSING."
    echo "Installing startup scripts..."

    CopyDefaultsToStartup

}

UpdateStartupScripts()
{
    echo "STARTUP SCRIPTS OUT OF DATE."
    echo "Backing up old startup scripts to /mnt/flash/startupBackups..."

    BackupOldStartup

    echo "Installing new startup scripts..."

    CopyDefaultsToStartup
}

# Remove functions always assume we are removing from /mnt/flash
# and never from built in /mnt/legato. /mnt/flash may or may not
# be blank but we will try to delete anyway.
RemoveAppUsers()
{
    for app in $(ls /mnt/flash/opt/legato/apps)
    do
        appName="app$app"
        /usr/sbin/deluser "$appName"
        rm -rf "/home/$appName"
    done
}

RemoveLegato()
{
    echo "Removing old install"
    RemoveAppUsers
    rm -rf /mnt/flash/usr/local/*
    rm -rf /mnt/flash/opt/*
}

UpdateAndRunApps()
{
    # Get the new app list
    APP_LIST=`ls /usr/local/bin/apps`

    if [ $ENABLE_POS = "false" ]
    then
        APP_LIST=$(echo $APP_LIST | sed 's/positioningService\.[^ ]*//')
        echo "Skipping installation of positioningService due to configuration"
    fi

    if [ $ENABLE_OLDAV = "false" ]
    then
        APP_LIST=$(echo $APP_LIST | sed 's/airvantage\.[^ ]*//')
        echo "Skipping installation of M3DA airvantage app due to configuration"
    fi

    # Install new versions of the bundled apps.
    for appFile in $APP_LIST
    do
        APP_NAME=$(basename "$appFile" | sed "s/\.[^.]*$//") &&
        cat /usr/local/bin/apps/$appFile | /usr/local/bin/app install ""$APP_NAME""
    done

    # Start the bundled apps.
    for appFile in $APP_LIST
    do
        APP_NAME=$(basename "$appFile" | sed "s/\.[^.]*$//") &&
        /usr/local/bin/app start $APP_NAME
    done
}

InstallApps()
{
    AddBindings &&

    UpdateAndRunApps
}

# This function is run during the boot sequence to see if a new Legato
# version has been installed in /mnt/legato. It will then set it up
BootCheck()
{
    if [ ! -f /mnt/legato/usr/local/bin/legato ]
    then
        echo "No legato installed in /mnt/legato"
    fi

    if ! diff /mnt/legato/opt/legato/version /mnt/flash/opt/legato/builtInVersion >/dev/null 2>&1
    then
        echo "*** Initializing new Legato version ***"

        echo -n "Installing new startup defaults..."
        if [ -d /mnt/flash/startupDefaults ]
        then
            rm -fr /mnt/flash/startupDefaults
        fi
        cp -a /mnt/legato/mnt/flash/startupDefaults /mnt/flash/
        echo "DONE"


        # remove any possible left-over or corrupted legato files in /mnt/flash
        RemoveLegato
        # Copy over built in legato to /mnt/flash/
        cp -a /mnt/legato/opt /mnt/flash/

        # Make sure the startup scripts are executable and owned by root.
        chown -R root:root /mnt/flash/startupDefaults &&
        chmod -R u+x /mnt/flash/startupDefaults || exit 1

        if StartupScriptMissing
        then
            InstallStartupScripts
        fi

        if StartupScriptOld
        then
            UpdateStartupScripts
        fi

        # Finally, touch a file to show that we need to run the post boot sequence
        touch /mnt/flash/startup/postcheck
    fi
}

# This is the second stage of the boot check sequence which will be
# run if the first stage had to do an install
PostBootCheck()
{
    if [ ! -f /mnt/flash/startup/postcheck ]
    then
        return 0
    fi

    InstallApps &&

    rm /mnt/flash/startup/postcheck

    # Setup the installed version file
    cp /mnt/legato/opt/legato/version /mnt/flash/opt/legato/builtInVersion
}

# To see if it is already bind mounted
CheckBindMount()
{
    local dir_path=$1
    local mount_on=${2%$1}
    local mounted_on=$(df $dir_path | grep -v Filesystem | awk '{print $6}')
    if [ "$mounted_on" = "$mount_on" ]
    then
        return 0
    fi
    return 1
}

CreateMountpointsAndBind()
{
    local map=$1
    local as=$2
    echo "Remapping $map --> $as"
    mkdir -p $map
    mkdir -p $as
    mount --bind $map $as
}

BindMount()
{
    local dir_path=$1
    local mount_on=$3
    if CheckBindMount $dir_path $mount_on 2>/dev/null
    then
        echo "Already mapped $mount_on --> $dir_path"
    else
        if ! mount | grep $ >/dev/null
        then
            CreateMountpointsAndBind $mount_on $dir_path
        else
            # display current binding
            echo "$dir_path map needs updating"
            df $dir_path
            umount "$dir_path"
            CreateMountpointsAndBind $mount_on $dir_path
        fi
    fi
}


InstallLegato()
{
    reboot_advised=""

    # Make sure the old version of the framework is shut down.
    StopLegato

    echo "Cleaning..."

    # RemoveLegato really removes what was installed and the next reboot would cause the
    # built in to be installed but we are installing a new legato so we should recopy the
    # builtInVersion file which marks this install as superceding the built in.
    if diff /mnt/legato/opt/legato/version /mnt/flash/opt/legato/builtInVersion >/dev/null 2>&1
    then
        RemoveLegato
        mkdir -p /mnt/flash/opt/legato
        cp -a /mnt/legato/opt/legato/version /mnt/flash/opt/legato/builtInVersion
    else
        RemoveLegato
    fi

    # Remove the old default startup scripts.
    rm -rf /mnt/flash/startupDefaults

    echo "Checking target environment..."
    # make sure all our bind mounts are pointing to the right places
    BindMount /opt on /mnt/flash/opt
    BindMount /usr/local on /mnt/flash/usr/local
    BindMount /home on /mnt/flash/home

    mkdir -p /home/root

    echo "Unpacking..."

    # Change to the root directory.  The tarball containing the new framework is rooted there.
    cd / &&

    # Un-tar the framework into place.
    (
    if ! which bsdtar > /dev/null 2>&1
    then
        tar x &&
        # Old versions of firmware may have r/w rootfs and busybox tar.
        echo "The firmware appears to be very old"
        echo "Probably there will be features that won't work on such old firmware."
        chmod -R go-w /usr/local &&
        chown -R root:root /usr &&
        chown -R root:root /opt &&
        chown root:root /
    else
        bsdtar xpom -f -
    fi
    ) &&

    # Make sure the startup scripts are executable and owned by root.
    chown -R root:root /mnt/flash/startupDefaults &&
    chmod -R u+x /mnt/flash/startupDefaults || exit 1 # This is a very uninformative failure

    if StartupScriptMissing
    then
        InstallStartupScripts
        reboot_advised="yes"
    fi

    if StartupScriptOld
    then
        UpdateStartupScripts
        reboot_advised="yes"
    fi

    # make sure we are really up to date on our bind mounts
    /mnt/flash/startup/fg_00_BindMount

    # Start up the new version of the framework.
    # This script makes sure the supervisor and installer runs with the "admin" SMACK label.
    /mnt/flash/startup/fg_10_StartLegato &&

    InstallApps &&

    # Remove the app package files for the bundled applications to save space in flash.
    rm -rf /usr/local/bin/apps

    if [ $? -eq 0 ]
    then
        echo "SUCCESS"
        if [ "$reboot_advised" = "yes" ]
        then
            echo "**** REBOOT ADVISED ****"
            echo "Startup scripts have changed. A reboot is recommended to avoid possibility of system instability"
            exit 42
        fi
    else
        echo "FAILED"
        exit 1
    fi
}


case "$ACTION" in
start)
    StartLegato
    ;;

stop)
    StopLegato
    ;;

restart)
    StopLegato
    StartLegato
    ;;

status)
    LegatoStatus
    ;;

install)
    InstallLegato
    ;;

help | --help | -h)
    PrintUsage
    ;;

version)
    if [ -f /opt/legato/version ]
    then
        cat /opt/legato/version
    else
        echo "UNKNOWN"
        exit 1
    fi
    ;;

bootcheck)
    BootCheck
    ;;

postbootcheck)
    PostBootCheck
    ;;

*)
    PrintUsage
    exit 1
    ;;

esac
