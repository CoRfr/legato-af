#!/bin/sh

# Installs Legato systems. System is a bundle of legato apps and IPC bindings.

# ASSUMPTION: Legato will run a single system, i.e. if anyone request to install system, it will
# replace all apps in current legato framework with apps included in the new system.

# NOTE: This system installation script doesn't support fall-back mechanism, i.e. if system
# installation failed, it can't fall-back to last known good system.


APPS_ROOT=/opt/legato/apps
TEMP_INSTALL_DIR=/tmp/_sysInstallTmpDir_
BINDING_FILE_DIR=/opt/legato/

ACTION=$1
SYS_BUNDLE_PATH=$2
SYS_FILES_LIST=""
OLD_APP_LIST=""
INSTALLED_APP_LIST=""
FAILED_APP_LIST=""
MAX_PARAMS=2
MIN_PARAMS=1
exitCode=0
SUCCESS_CODE=0

# Make sure /usr/local/bin is in the path.
export PATH=/usr/local/bin:$PATH

PrintUsage()
# Prints help message.
{
    echo
    echo "USAGE: `basename $0` install [FILE_PATH]"
    echo
    echo "FILE_PATH is system bundle path location or nothing if data is given through STDIN."
    echo
}

EchoErr()
# Print something to stderr
{
    echo "$@" 1>&2
}

RestartLegato()
# Restart legato framework
{
    echo
    echo "Restarting legato..."
    legato restart

    if [ $? -ne 0 ]
    then
        EchoErr "***ERROR: Failed to restart legato"
        exitCode=1
    fi
}

RemoveAppsOnlyInOldSystem()
# Remove apps that are in old system (S1) but not in new system (S2), i.e. apps in S1-S2.
# NOTE: Before calling this function, SYS_FILES_LIST and OLD_APP_LIST variable should be populated
# properly.
{

    APPS_TO_BE_DELETED=""

    for OLD_APP in $OLD_APP_LIST
    do
        for SYSTEM_FILE in $SYS_FILES_LIST
        do
            if  [ "$SYSTEM_FILE" != "bindings" ]
            then
                NEW_APP=$(basename "$SYSTEM_FILE" | sed 's/\.[^.]*$//')
                if [ "$OLD_APP" = "$NEW_APP" ]
                then
                    OLD_APP=""
                    break
                fi
            fi
        done

        if [ "$OLD_APP" != "" ]
        then
            APPS_TO_BE_DELETED=$APPS_TO_BE_DELETED$'\n'$OLD_APP
        fi
    done

    # Check whether APPS_TO_BE_DELETED has something, if yes then call app remove script.
    if [ "$APPS_TO_BE_DELETED" != "" ]
    then
        echo "List of old apps to be deleted:$APPS_TO_BE_DELETED"
        app remove $APPS_TO_BE_DELETED
        if [ $? -ne 0 ]
        then
            exitCode=1
        fi
    fi
}

InstallSysAppsFromSysFiles()
# Takes list of system files and  install system apps from them.
# Lists all sucessfully installed apps in INSTALLED_APP_LIST variable.
# Lists all apps failed to install in FAILED_APP_LIST variable.
{
    INSTALLED_APP_LIST=""
    FAILED_APP_LIST=""
    while [ $# -ge 1 ]
    do
        if [ -f "$TEMP_INSTALL_DIR/$1" ]
        then
            if  [ "$1" != "bindings" ]
            then
                APP_NAME=$(basename "$1" | sed 's/\.[^.]*$//')
                cat "$TEMP_INSTALL_DIR/$1"|app install $APP_NAME

                if [ $? -ne 0 ]
                then
                    # Failed to install the app, so clean the residual stuffs(if exists) and list it
                    # in failed list.
                    rm -rf "$APPS_ROOT/$APP_NAME" > /dev/null 2>&1
                    EchoErr "FAILED"
                    FAILED_APP_LIST=$APP_NAME$'\n'$FAILED_APP_LIST
                    exitCode=1
                else
                    # App install ok, so update the list of installed apps
                    INSTALLED_APP_LIST=$APP_NAME$'\n'$INSTALLED_APP_LIST
                fi
            fi
        else
            EchoErr "***ERROR: Bad app file: $1"
            EchoErr "FAILED"
            exitCode=1
        fi
        shift
    done
}

AddUserToAppBinding()
{
    (config set users/$1/bindings/$2/app        $3) &&
    (config set users/$1/bindings/$2/interface  $4)

    if [ $? -ne 0 ]
    then
        EchoErr "***ERROR: Failed installing binding"
        exitCode=1
    fi
}

AddUserToUserBinding()
{
    (config set users/$1/bindings/$2/user        $3) &&
    (config set users/$1/bindings/$2/interface  $4)

    if [ $? -ne 0 ]
    then
        EchoErr "***ERROR: Failed installing binding"
        exitCode=1
    fi
}

InstallOneBinding()
# Install a binding from bindings file. Binding string is sent as parameter to this function
{
    # Remove all spaces from line.
    local TRIMMED_LINE=${1//' '}
    # Extracts the first part of binding string
    local FIRST_PART=${TRIMMED_LINE%%->*}
    # Extracts the second part of binding string
    local SECOND_PART=${TRIMMED_LINE##*->}
    # Extracts all necessary things from binding string parts.
    local USER_NAME=${FIRST_PART%%.*}
    local CLIENT_INTERFACE=${FIRST_PART##*.}
    local INTERFACE_PROVIDER=${SECOND_PART%%.*}
    local SERVER_INTERFACE=${SECOND_PART##*.}

    if [ "$USER_NAME" = "" ] || [ "$CLIENT_INTERFACE" = "" ] || [ "$INTERFACE_PROVIDER" = "" ] \
        || [ "$SERVER_INTERFACE" = "" ]
    then
        EchoErr "***ERROR: Wrong binding $1. Missing field"
        exitCode=1
    elif [ "${USER_NAME##<*>}" != "" ]
    then
        EchoErr "***ERROR: Wrong username: $USER_NAME in binding: $1. Username should be inside <>."
        exitCode=1
    else
        #Check if the interface provider is app or not. If app, then there will be no <> bracket.
        USER_NAME=${USER_NAME%>}
        USER_NAME=${USER_NAME#<}
        if [ "${INTERFACE_PROVIDER##<*>}" = "" ]
        then
            #Non-app interface provider.
            INTERFACE_PROVIDER=${INTERFACE_PROVIDER%>}
            INTERFACE_PROVIDER=${INTERFACE_PROVIDER#<}
            AddUserToUserBinding $USER_NAME $CLIENT_INTERFACE $INTERFACE_PROVIDER $SERVER_INTERFACE
        else
            #Interface provider is app
            AddUserToAppBinding $USER_NAME $CLIENT_INTERFACE $INTERFACE_PROVIDER $SERVER_INTERFACE
        fi
    fi
}

InstallUserBindings()
# Install all bindings contained in bindings file.
{
    while read line
    do
        InstallOneBinding "$line"
    done < $1
}

RemoveOneUserBinding()
# Remove a binding from config tree. Binding string is sent as parameter to this function
{
    # Remove all spaces from line.
    local TRIMMED_LINE=${1//' '}
    # Extracts the first part of binding string
    local FIRST_PART=${TRIMMED_LINE%%->*}
    # Extracts the second part of binding string
    local SECOND_PART=${TRIMMED_LINE##*->}
    # Extracts all necessary things from binding string parts.
    local USER_NAME=${FIRST_PART%%.*}
    local CLIENT_INTERFACE=${FIRST_PART##*.}
    local INTERFACE_PROVIDER=${SECOND_PART%%.*}
    local SERVER_INTERFACE=${SECOND_PART##*.}

    if [ "$USER_NAME" = "" ] || [ "$CLIENT_INTERFACE" = "" ] || [ "$INTERFACE_PROVIDER" = "" ] \
        || [ "$SERVER_INTERFACE" = "" ]
    then
        EchoErr "***ERROR: Wrong binding $1. Missing field"
        exitCode=1
    elif [ "${USER_NAME##<*>}" != "" ]
    then
        EchoErr "***ERROR: Wrong username: $USER_NAME in binding: $1. Username should be inside <>."
        exitCode=1
    else
        USER_NAME=${USER_NAME%>}
        USER_NAME=${USER_NAME#<}
        # Remove user binding
        config delete users/$USER_NAME/bindings/$CLIENT_INTERFACE
        if [ $? -ne 0 ]
        then
            EchoErr "***ERROR: Failed while deleting binding"
            exitCode=1
        fi
    fi
}

RemoveUserBindings()
# Remove all bindings contained in a bindings file.
{
    while read line
    do
        RemoveOneUserBinding "$line"
    done < $1
}

# Before we do any work, check whether user has root access permission. This is used to be more
# defensive.
if ! [ $(id -u) = 0 ]
then
   echo "***ERROR: This script must be run as root!"
   exit 1
fi

# Check if the framework is running.
if ! legato status > /dev/null
then
    EchoErr "***ERROR: The legato framework is not running. Please start it before proceeding."
    exit 1
fi

# Minimum number of parameter must be 1, otherwise exit
if [ $# -lt $MIN_PARAMS ]
then
    EchoErr "***ERROR: Missing parameters. Minimum number of allowed params: $MIN_PARAMS, supplied: $#"
    PrintUsage
    exit 1
fi

# Maximum number of parameter must be 2, otherwise exit
if [ $# -gt $MAX_PARAMS ]
then
    EchoErr "***ERROR: Too many parameters. Maximum number of allowed params: $MAX_PARAMS, supplied: $#"
    PrintUsage
    exit 1
fi

# Check if they are asking for help.
if [ "$1" = "-h" -o "$1" = "help" -o "$1" = "--help" ]
then
    PrintUsage
    exit 0
fi

if [ "$SYS_BUNDLE_PATH" != "" ]
then
    # System bundle path is given, check whether it exists or not.
    if   [ ! -f "$SYS_BUNDLE_PATH" ]
    then
        # No such file exists, so exit with error.
        EchoErr "***ERROR: Cannot access: $SYS_BUNDLE_PATH, No such file"
        exit 1
    fi
else
    # File is coming via STDIN, STDIN should be specified via "-"
    SYS_BUNDLE_PATH="-"
fi

case "$ACTION" in

install)

    # GOAL: Change old system (S1) to new system (S2).
    # ALGORITHM (subject to change)
    #   - Initial tasks (Untaring S2 bundle file to tmp directory, building app list of S1 & S2 etc.)
    #   - Stop all legato apps
    #   - Remove user bindings from S1
    #   - Remove apps that are not in S2 (i.e. apps in S1-S2)
    #   - Install apps in S2
    #   - Add user bindings from S2
    #   - Finishing task (Cleaning files in tmp directory, printing status messages etc.)
    #   - Restart legato

    echo "Installing system ..."

    # STEP: Initial tasks (Untaring S2 bundle file, building app list of S1 & S2 etc.)
    # Build the list of applications that need to be deleted.
    OLD_APP_LIST=`app list`

    # look if there are old temporary installation file, if yes clear all contents from there.
    if [ -e "$TEMP_INSTALL_DIR" ]
    then
        echo "Cleaning old temporary system files"
        rm -rf "$TEMP_INSTALL_DIR"
    fi

    # Create a temporary installation directory.
    mkdir -p "$TEMP_INSTALL_DIR"

    # Unpack the system into the temporary directory. Please note that no need to fix the
    # permission here as all these files are temporary and will be deleted eventually when all apps
    # are installed.
    echo "Unpacking new system bundle"

    # NOTE: These tar option must be changed if bzip2 is used.
    tar xf "$SYS_BUNDLE_PATH" -C "$TEMP_INSTALL_DIR"

    if [ $? -ne 0 ]
    then
        rm -rf "$TEMP_INSTALL_DIR"
        EchoErr "***ERROR: Failed to unpack system bundle."
        EchoErr "INSTALLATION FAILED"
        exit 1
    fi

    SYS_FILES_LIST=`ls $TEMP_INSTALL_DIR`

    # check whether system file list is empty. If yes, then exit with failure.
    if [ "$SYS_FILES_LIST" = "" ]
    then
        EchoErr "***ERROR: No file is included in the system installer. Wrong system installer file"
        EchoErr "INSTALLATION FAILED"
        exit 1
    fi

    # STEP: Stopping all apps to avoid unwanted error logs.
    echo "Stopping all apps..."
    app stop "*"

    # STEP: Remove user bindings from old system (S1).
    # Check whether any binding file exists or not. Remove bindings if it exists and contains some
    # bindings.
    if [ -f "$BINDING_FILE_DIR/bindings" ]
    then
        if [ ! -s "$BINDING_FILE_DIR/bindings" ]
        then
            # Binding file is an empty file, so no binding will be installed.
            echo "Old non-app binding file is empty, so no non-app binding will be deleted."
        else
            echo
            echo "Deleting non-app bindings"
            RemoveUserBindings "$BINDING_FILE_DIR/bindings"
        fi
        # Remove old binding file
        rm -f "$BINDING_FILE_DIR/bindings"
    fi

    # STEP: Remove apps that are in old system (S1) but not in new system (S2), i.e. apps in S1-S2.
    RemoveAppsOnlyInOldSystem

    # STEP: Install apps for new system (S2).
    # Now install all apps contained inside untared system installer.
    echo
    echo "Installing system apps..."
    InstallSysAppsFromSysFiles $SYS_FILES_LIST

    # InstallSysAppsFromSysFiles lists installed apps in INSTALLED_APP_LIST variable. Check if
    # INSTALLED_APP_LIST has something, if yes then print the list, otherwise exit with error code.
    if [ "$INSTALLED_APP_LIST" != "" ]
    then
        # List successfully installed system apps
        echo "List of system apps successfully installed:"
        echo "$INSTALLED_APP_LIST"
    else
        EchoErr "***ERROR: Cannot install any system app."
        EchoErr "INSTALLATION FAILED"
        RestartLegato
        exit 1
    fi

    # List all system app that are failed to install.
    if [ "$FAILED_APP_LIST" != "" ]
    then
        EchoErr "List of system apps failed to install:"
        EchoErr "$FAILED_APP_LIST"
    fi

    # STEP: Add user bindings for new system (S2).
    # Check whether any binding file exists or not. Install bindings if it exists and contains some
    # bindings.
    if [ -f "$TEMP_INSTALL_DIR/bindings" ]
    then
        if [ ! -s "$TEMP_INSTALL_DIR/bindings" ]
        then
            # Binding file is an empty file, so no binding will be installed.
            echo "Non-app binding file is empty, so no non-app binding will be installed."
        else
            echo "Installing non-app bindings"
            InstallUserBindings "$TEMP_INSTALL_DIR/bindings"
            # Copy binding file in BINDING_FILE_DIR (i.e. it is current system binding file).
            cp -f "$TEMP_INSTALL_DIR/bindings" "$BINDING_FILE_DIR"
        fi
    fi

    # STEP: Finishing tasks
    echo "Deleting temporary files"
    rm -rf $TEMP_INSTALL_DIR

    if [ $exitCode -eq $SUCCESS_CODE ]
    then
        echo "INSTALLATION FINISHED"
    else
        EchoErr "INSTALLATION FAILED"
    fi

    # STEP: Restart legato to start apps those are marked as "start: auto"
    RestartLegato

    exit $exitCode
    ;;

*)
    EchoErr "Unsupported command: $ACTION"
    PrintUsage
    exit 1
    ;;

esac

