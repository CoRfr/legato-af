--------------------------------------------------------------------------------
-- This library provides bitwise operations.
--
--The library is taken from Lua 5.2, and this documentation also reuses 
--[Lua 5.2 Bitwise Operations documentation](http://www.lua.org/manual/5.2/manual.html#6.7).
--
--Unless otherwise stated, all functions accept numeric arguments in the range (-251,+251); 
--each argument is normalized to the remainder of its division by 232 and truncated to an integer
--(in some unspecified way), so that its final value falls in the range [0,232 - 1]. 
--Similarly, all results are in the range [0,232 - 1]. 
--Note that bit32.bnot(0) is 0xFFFFFFFF, which is different from -1.
--
--@module bit32
--


--------------------------------------------------------------------------------
-- Returns the number `x` shifted `disp` bits to the right. 
-- 
--The number `disp` may be any representable integer. Negative displacements shift to the left.
--This shift operation is what is called arithmetic shift. 
--Vacant bits on the left are filled with copies of the higher bit of `x`; 
--vacant bits on the right are filled with zeros. 
--In particular, displacements with absolute values higher than 31 result in 
--zero or 0xFFFFFFFF (all original bits are shifted out).
--
--@function [parent=#bit32] arshift
--@param x the number that will be shifted
--@param disp the number of bits to be shifted to the right
--@return the number resulting of the operation.
--
--@usage bit32.arshift(0x00F0000F, 2) --> 0x3C0003


--------------------------------------------------------------------------------
-- Returns the bitwise and of its operands.
--
--@function [parent=#bit32] band
--@param ... variable number of arguments to operate the bitwise and on, each
-- argument must be a number.
--@return the number resulting of the operation.
--
--@usage bit32.band(0xAFF, 0xFAF, 0xFFA)  --> 0xAAA


--------------------------------------------------------------------------------
-- Returns the bitwise negation of `x`.
--
--For any integer `x`, the following identity holds:
--      assert(bit32.bnot(x) == (-1 - x) % 2^32)
--
--@function [parent=#bit32] bnot
--@param x number to return the bitwise negation of.
--@return the number resulting of the operation.
--
--@usage bit32.bnot(0x00F0000F)  --> 0xFF0FFFF0


--------------------------------------------------------------------------------
-- Returns the bitwise or of its operands.
--
--@function [parent=#bit32] bor
--@param ... variable number of arguments to operate the bitwise or on, each
-- argument must be a number.
--@return the number resulting of the operation.
--
--@usage bit32.bor(0xA, 0xA0, 0xA00)  --> 0xAAA


--------------------------------------------------------------------------------
-- Returns a boolean signaling whether the bitwise and of its operands is different from zero.
--
--@function [parent=#bit32] btest
--@param ... variable number of arguments to test, each argument must be a number.
--@return a boolean signaling whether the bitwise and of the operands is different from zero.
--
--@usage bit32.btest(42, 1)  --> false
--@usage bit32.btest(43, 1)  --> true

--------------------------------------------------------------------------------
-- Returns the bitwise exclusive or of its operands.
--
--@function [parent=#bit32] bxor
--@param ... variable number of arguments to operate the bitwise exclusive or on
-- , each argument must be a number.
--@return the number resulting of the operation.
--
--@usage bit32.bxor(0, 0xBBB, 0)  --> 0xBBB


--------------------------------------------------------------------------------
-- Returns the unsigned number formed by the bits `field` to `field` + `width` - 1 from `n`. 
--
--Bits are numbered from 0 (least significant) to 31 (most significant). 
--All accessed bits must be in the range [0, 31].
--The default for `width` is 1.
--
--@function [parent=#bit32] extract
--@param n the number to extract bits from
--@param field the first bit to extract
--@param width optional number, number of bits to extract 
--@return the unsigned number resulting of the operation.
--
--@usage bit32.extract(0xFEA8C523, 8, 8)  --> 0xC5

--------------------------------------------------------------------------------
-- Returns a copy of `n` with the bits `field` to `field` + `width` - 1 replaced by the value `v`.
-- 
--See  @{#bit32.extract} for details about field and width.
--
--@function [parent=#bit32] replace
--@param n the number to replace bits in.
--@param v the value used to replace bits in `n`.
--@param field the first bit to replace
--@param width optional number, number of bits to replace 
--@return the number resulting of the operation.
--
--@usage bit32.replace(0xFEA8C523, 0x42, 8, 8)  --> 0xFEA84223


--------------------------------------------------------------------------------
-- Returns the number `x` rotated `disp` bits to the left. 
--
--The number `disp` may be any representable integer.
--For any valid displacement, the following identity holds:
--    assert(bit32.lrotate(x, disp) == bit32.lrotate(x, disp % 32))
--In particular, negative displacements rotate to the right.
--
--@function [parent=#bit32] lrotate
--@param x the number that will be rotated
--@param disp the number of bits to be rotated
--@return the number resulting of the operation.
--
--@usage bit32.lrotate(0x12345678, 8)  --> 0x34567812


--------------------------------------------------------------------------------
-- Returns the number `x` shifted `disp` bits to the left. 
--
--The number `disp` may be any representable integer. 
--Negative displacements shift to the right. 
--In any direction, vacant bits are filled with zeros. 
--In particular, displacements with absolute values higher than 31 
--result in zero (all bits are shifted out).
--
--For positive displacements, the following equality holds:
--    assert(bit32.lshift(b, disp) == (b * 2^disp) % 2^32)
--
--@function [parent=#bit32] lshift
--@param x the number that will be shifted
--@param disp the number of bits to be shifted
--@return the number resulting of the operation.
--
--@usage bit32.lshift(0x12345678, 8)  --> 0x34567800


--------------------------------------------------------------------------------
-- Returns the number `x` rotated `disp` bits to the right. 
--
--The number `disp` may be any representable integer.
--For any valid displacement, the following identity holds:
--    assert(bit32.rrotate(x, disp) == bit32.rrotate(x, disp % 32))
--In particular, negative displacements rotate to the left.
--
--@function [parent=#bit32] rrotate
--@param x the number that will be rotated
--@param disp the number of bits to be rotated
--@return the number resulting of the operation.
--


--------------------------------------------------------------------------------
-- Returns the number `x` shifted `disp` bits to the right.
-- 
--The number `disp` may be any representable integer. 
--Negative displacements shift to the left. 
--In any direction, vacant bits are filled with zeros. 
--In particular, displacements with absolute values higher than 31 result 
--in zero (all bits are shifted out).
--
--For positive displacements, the following equality holds:
--    assert(bit32.rshift(b, disp) == math.floor(b % 2^32 / 2^disp))
--This shift operation is what is called logical shift.
--
--@function [parent=#bit32] rshift
--@param x the number that will be shifted
--@param disp the number of bits to be shifted to the right
--@return the number resulting of the operation.
--
--@usage bit32.rshift(0x12345678, 8)  --> 0x123456

return nil