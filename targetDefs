# --------------------------------------------------------------------------------------------------
# Determines which target include file to include based on the goal passed to make on the
# command-line.
#
# Copyright (C), Sierra Wireless Inc.
# --------------------------------------------------------------------------------------------------

ifneq ($(findstring $(MAKECMDGOALS),docs user_docs implementation_docs),)
    export TARGET := localhost
else
    export TARGET := $(lastword $(subst _, ,$(MAKECMDGOALS)))
endif

TARGET_CAPS := $(shell echo $(TARGET) |tr a-z A-Z)

ifeq ($(TARGET),virt)
    VIRT_TARGET_ARCH ?= arm
    export VIRT_TARGET_ARCH

    ifeq ($(VIRT_TARGET_ARCH),x86)
        export VIRT_TOOLCHAIN_PREFIX ?= i586-poky-linux-
    else
        export VIRT_TOOLCHAIN_PREFIX ?= arm-poky-linux-gnueabi-
    endif

    export VIRT_TOOLCHAIN_DIR := $(shell $(FINDTOOLCHAIN) $(TARGET)_$(VIRT_TARGET_ARCH) dir)
endif

ifeq ($(TARGET),localhost)
    # If the toolchain directory is not specified, assume the directory that GCC is installed in.
    ifeq ($(TOOLCHAIN_DIR),)
        ifeq ($(USE_CLANG),1)
            export TOOLCHAIN_DIR := $(dir $(shell which clang))
        else
            export TOOLCHAIN_DIR := $(dir $(shell which gcc))
        endif
        export TOOLCHAIN_PREFIX :=
    endif

    SDEF_TO_USE ?= localhost.sdef
else
    ifeq ($($(TARGET_CAPS)_TOOLCHAIN_DIR),)
        export $(TARGET_CAPS)_TOOLCHAIN_DIR := $(shell $(FINDTOOLCHAIN) $(TARGET) dir)
    endif

    ifeq ($($(TARGET_CAPS)_TOOLCHAIN_PREFIX),)
        export $(TARGET_CAPS)_TOOLCHAIN_PREFIX := $(shell $(FINDTOOLCHAIN) $(TARGET) prefix)
    endif
    export TOOLCHAIN_DIR := $($(TARGET_CAPS)_TOOLCHAIN_DIR)
    export TOOLCHAIN_PREFIX := $($(TARGET_CAPS)_TOOLCHAIN_PREFIX)
endif


## Set the STRIP, OBJCOPY, and READELF variables for use by the Legato framework build, if
## they are not set yet.

ifneq ($(TOOLCHAIN_DIR),)
    TOOLCHAIN_PATH_PREFIX := $(TOOLCHAIN_DIR)/$(TOOLCHAIN_PREFIX)
else
    TOOLCHAIN_PATH_PREFIX := $(TOOLCHAIN_PREFIX)
endif

ifeq ($(wildcard $(TOOLCHAIN_PATH_PREFIX)strip),)
    export STRIP := strip
else
    export STRIP := $(TOOLCHAIN_PATH_PREFIX)strip
endif

ifeq ($(wildcard $(TOOLCHAIN_PATH_PREFIX)objcopy),)
    export OBJCOPY := objcopy
else
    export OBJCOPY := $(TOOLCHAIN_PATH_PREFIX)objcopy
endif

ifeq ($(wildcard $(TOOLCHAIN_PATH_PREFIX)readelf),)
    export READELF := readelf
else
    export READELF := $(TOOLCHAIN_PATH_PREFIX)readelf
endif
