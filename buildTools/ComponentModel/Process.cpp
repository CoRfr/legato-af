//--------------------------------------------------------------------------------------------------
/**
 * Implementation of Process class methods.
 */
//--------------------------------------------------------------------------------------------------

#include "LegatoObjectModel.h"
#include "limit.h"

namespace legato
{

//--------------------------------------------------------------------------------------------------
/**
 * Constructor
 **/
//--------------------------------------------------------------------------------------------------
Process::Process
(
)
//--------------------------------------------------------------------------------------------------
:   m_ExePtr(NULL)
//--------------------------------------------------------------------------------------------------
{
}


//--------------------------------------------------------------------------------------------------
/**
 * Move constructor.
 */
//--------------------------------------------------------------------------------------------------
Process::Process
(
    Process&& original
)
//--------------------------------------------------------------------------------------------------
:   m_Name(std::move(original.m_Name)),
    m_ExePath(std::move(original.m_ExePath)),
    m_ExePtr(NULL),
    m_CommandLineArgs(std::move(original.m_CommandLineArgs))
//--------------------------------------------------------------------------------------------------
{
}


//--------------------------------------------------------------------------------------------------
/**
 * Check the validity of the process name.
 *
 * @throw legato::Exception if name is not valid.
 **/
//--------------------------------------------------------------------------------------------------
static void CheckName
(
    const std::string& name
)
//--------------------------------------------------------------------------------------------------
{
    if (name.length() > LIMIT_MAX_PROCESS_NAME_LEN)
    {
        throw Exception("Process name '" + name + "' is too long.  Must be a maximum of " +
                        std::to_string(LIMIT_MAX_PROCESS_NAME_LEN) + " bytes.");
    }

    if (name.empty())
    {
        throw Exception("Empty process name.");
    }
}


//--------------------------------------------------------------------------------------------------
/**
 * Set the process name.
 **/
//--------------------------------------------------------------------------------------------------
void Process::Name
(
    const std::string& name
)
//--------------------------------------------------------------------------------------------------
{
    CheckName(name);

    m_Name = name;
}


//--------------------------------------------------------------------------------------------------
/**
 * Set the process name.
 **/
//--------------------------------------------------------------------------------------------------
void Process::Name
(
    std::string&& name
)
//--------------------------------------------------------------------------------------------------
{
    CheckName(name);

    m_Name = std::move(name);
}


}
