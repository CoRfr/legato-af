/*
 * ====================== WARNING ======================
 *
 * THE CONTENTS OF THIS FILE HAVE BEEN AUTO-GENERATED.
 * DO NOT MODIFY IN ANY WAY.
 *
 * ====================== WARNING ======================
 */


#ifndef SIM_INTERFACE_H_INCLUDE_GUARD
#define SIM_INTERFACE_H_INCLUDE_GUARD


#include "legato.h"

// User customizable include file
#include "userInclude.h"


//--------------------------------------------------------------------------------------------------
/**
 * Start the client main thread
 */
//--------------------------------------------------------------------------------------------------
void le_sim_StartClient
(
    const char* serviceInstanceName
        ///< [IN]
);

//--------------------------------------------------------------------------------------------------
/**
 * Stop the service for the current client thread
 */
//--------------------------------------------------------------------------------------------------
void le_sim_StopClient
(
    void
);


typedef void (*le_sim_NewStateHandlerFunc_t)
(
    le_sim_Ref_t simRef,
    void* contextPtr
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
uint32_t le_sim_CountSlots
(
    void
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
uint32_t le_sim_GetSelectedCard
(
    void
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
le_sim_Ref_t le_sim_Create
(
    uint32_t cardNum
        ///< [IN]
        ///< The SIM card number.
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
void le_sim_Delete
(
    le_sim_Ref_t simRef
        ///< [IN]
        ///< The SIM object.
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
uint32_t le_sim_GetSlotNumber
(
    le_sim_Ref_t simRef
        ///< [IN]
        ///< The SIM object.
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
le_result_t le_sim_GetICCID
(
    le_sim_Ref_t simRef,
        ///< [IN]
        ///< The SIM object.

    char* iccid,
        ///< [OUT]
        ///< ICCID

    size_t iccidNumElements
        ///< [IN]
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
le_result_t le_sim_GetIMSI
(
    le_sim_Ref_t simRef,
        ///< [IN]
        ///< The SIM object.

    char* imsi,
        ///< [OUT]
        ///< IMSI

    size_t imsiNumElements
        ///< [IN]
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
bool le_sim_IsPresent
(
    le_sim_Ref_t simRef
        ///< [IN]
        ///< The SIM object.
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
bool le_sim_IsReady
(
    le_sim_Ref_t simRef
        ///< [IN]
        ///< The SIM object.
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
le_result_t le_sim_EnterPIN
(
    le_sim_Ref_t simRef,
        ///< [IN]
        ///< The SIM object.

    const char* pin
        ///< [IN]
        ///< The PIN code.
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
le_result_t le_sim_ChangePIN
(
    le_sim_Ref_t simRef,
        ///< [IN]
        ///< The SIM object.

    const char* oldpin,
        ///< [IN]
        ///< The old PIN code.

    const char* newpin
        ///< [IN]
        ///<  The new PIN code.
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
int32_t le_sim_GetRemainingPINTries
(
    le_sim_Ref_t simRef
        ///< [IN]
        ///< The SIM object.
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
le_result_t le_sim_Unlock
(
    le_sim_Ref_t simRef,
        ///< [IN]
        ///< The SIM object.

    const char* pin
        ///< [IN]
        ///< The PIN code.
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
le_result_t le_sim_Lock
(
    le_sim_Ref_t simRef,
        ///< [IN]
        ///< The SIM object.

    const char* pin
        ///< [IN]
        ///< The PIN code.
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
le_result_t le_sim_Unblock
(
    le_sim_Ref_t simRef,
        ///< [IN]
        ///< The SIM object.

    const char* puk,
        ///< [IN]
        ///< The PUK code.

    const char* newpin
        ///< [IN]
        ///< The PIN code.
);

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
le_sim_States_t le_sim_GetState
(
    le_sim_Ref_t simRef
        ///< [IN]
        ///< The SIM object.
);

typedef struct le_sim_NewStateHandler* le_sim_NewStateHandlerRef_t;

//--------------------------------------------------------------------------------------------------
/**
 * This function adds a handler ...
 */
//--------------------------------------------------------------------------------------------------
le_sim_NewStateHandlerRef_t le_sim_AddNewStateHandler
(
    le_sim_NewStateHandlerFunc_t handlerPtr,
        ///< [IN]

    void* contextPtr
        ///< [IN]
);

//--------------------------------------------------------------------------------------------------
/**
 * This function removes a handler ...
 */
//--------------------------------------------------------------------------------------------------
void le_sim_RemoveNewStateHandler
(
    le_sim_NewStateHandlerRef_t addHandlerRef
        ///< [IN]
);


#endif // SIM_INTERFACE_H_INCLUDE_GUARD

