/*
 * Interface for Modem Radio Control Service
 *
 * Copyright (C) Sierra Wireless, Inc. 2013.  All rights reserved. Use of this work is subject to license.
 */


HANDLER NetRegStateHandler
{
    HANDLER_PARAMS
    (
        le_mrc_NetRegState_t state
    );
};


//--------------------------------------------------------------------------------------------------
/**
 * Get the network registration state.
 *
 * @return LE_NOT_POSSIBLE  Function failed to get the Network registration state.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetNetRegState
(
    le_mrc_NetRegState_t state OUT  ///< Network Registration state.
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the signal quality.
 *
 * @return LE_NOT_POSSIBLE  Function failed to obtain the signal quality.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSignalQual
(
    uint32 quality OUT      ///< [OUT] Received signal strength quality (0 = no signal strength,
                            ///        5 = very good signal strength).
);


//--------------------------------------------------------------------------------------------------
/**
 * Set the power of the Radio Module.
 *
 * @return LE_FAULT  Function failed.
 * @return LE_OK     Function succeed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetRadioPower
(
    le_onoff_t power        ///< The power state.
);


//--------------------------------------------------------------------------------------------------
/**
 * Must be called to get the Radio Module power state.
 *
 * @return LE_NOT_POSSIBLE  Function failed to get the Radio Module power state.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetRadioPower
(
    le_onoff_t power OUT    ///< Power state.
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to connect to a cellular network [mcc;mnc]
 *
 * @return LE_NOT_POSSIBLE  The function failed to connect the network.
 * @return LE_OVERFLOW      One code is too long.
 * @return LE_OK            The function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t ConnectCellularNetwork
(
    string mcc[4] IN,   ///< Mobile Country Code
    string mnc[4] IN    ///< Mobile Network Code
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to perform a cellular network scan.
 *
 * @return
 *      Reference to the List object. Null pointer if the scan failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_mrc_ScanInformation_ListRef_t PerformCellularNetworkScan
(
    le_mrc_Rat_t ratMask ///< Technology mask
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the first Scan Information object reference in the list of
 * scan Information retrieved with le_mrc_PerformNetworkScan().
 *
 * @return NULL                         No scan information found.
 * @return le_mrc_ScanInformation_Ref_t The Scan Information object reference.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_mrc_ScanInformation_Ref_t GetFirstCellularNetworkScan
(
    le_mrc_ScanInformation_ListRef_t  scanInformationListRef ///< The list of scan information.
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the next Scan Information object reference in the list of
 * scan Information retrieved with le_mrc_PerformNetworkScan().
 *
 * @return NULL                         No scan information found.
 * @return le_mrc_ScanInformation_Ref_t The Scan Information object reference.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_mrc_ScanInformation_Ref_t GetNextCellularNetworkScan
(
    le_mrc_ScanInformation_ListRef_t  scanInformationListRef ///< The list of scan information.
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to delete the list of the Scan Information retrieved with
 * le_mrc_PerformNetworkScan().
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION void DeleteCellularNetworkScan
(
    le_mrc_ScanInformation_ListRef_t  scanInformationListRef ///< The list of scan information.
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Cellular Network Code [mcc:mnc]
 *
 * @return
 *      - LE_OK on success
 *      - LE_NOT_POSSIBLE for all other errors
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetCellularNetworkMccMnc
(
    le_mrc_ScanInformation_Ref_t scanInformationRef,    ///< [IN] Scan information reference
    string mccPtr[4] OUT,                               ///< Mobile Country Code
    string mncPtr[4] OUT                                ///< Mobile Network Code
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Cellular Network Name.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the operator name would not fit in buffer
 *      - LE_NOT_POSSIBLE for all other errors
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetCellularNetworkName
(
    le_mrc_ScanInformation_Ref_t scanInformationRef,    ///< Scan information reference
    string namePtr[100] OUT                             ///< Name of operator
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to know if the radio control access is in scanInformationRef.
 *
 * @return
 *      - true the radio access technology is available
 *      - false otherwise
 *
 * @note
 *      On failure, the process exits.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsCellularNetworkRatAvailable
(
    le_mrc_ScanInformation_Ref_t scanInformationRef,    ///< Scan information reference
    le_mrc_Rat_t                 rat                    ///< The Radio Access Technology
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to check if a cellular network is currently in use.
 *
 * @return true     The network is in use
 * @return false    The network is not in use
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsCellularNetworkInUse
(
    le_mrc_ScanInformation_Ref_t scanInformationRef    ///< Scan information reference
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to check if a cellular network is available.
 *
 * @return true     The network is available
 * @return false    The network is not available
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsCellularNetworkAvailable
(
    le_mrc_ScanInformation_Ref_t scanInformationRef    ///< Scan information reference
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to check if a cellular network is currently in home mode.
 *
 * @return true     The network is home
 * @return false    The network is roaming
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsCellularNetworkHome
(
    le_mrc_ScanInformation_Ref_t scanInformationRef    ///< Scan information reference
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to check if a cellular network is forbidden by the operator.
 *
 * @return true     The network is forbidden
 * @return false    The network is allowed
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsCellularNetworkForbidden
(
    le_mrc_ScanInformation_Ref_t scanInformationRef    ///< Scan information reference
);

FUNCTION le_result_t GetHomeNetworkName
(
    string nameStr[100] OUT
);
