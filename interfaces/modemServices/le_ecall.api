/**
 * @page c_ecall eCall 
 *
 * @ref le_ecall_interface.h "API Reference"
 *
 * <HR>
 * eCall is a technology initiative intended to bring rapid assistance to auto 
 * accidents anywhere in the European Union. When a serious vehicle accident occurs,
 * sensors automatically trigger an eCall. When activated, the in-vehicle system (IVS) 
 * establishes a 112-voice connection.
 *
 * The Mobile Network Operator handles the eCall like any other 112 call and routes the call to the
 * most appropriate emergency response centre - Public Safety Answering Point (PSAP).
 *
 * At the same time, a digital "minimum set of data" (MSD) message is sent over the voice call using
 * in-band modem signals. The MSD includes accident information like time, location, driving
 * direction, and vehicle description.
 *
 * The eCall can also be activated manually. The mobile network operator identifies that the 112
 * call is an eCall from the “eCall flag” inserted by the vehicle’s communication module.
 *
 * @note eCall service is only available on automotive products.
 *
 * @section le_ecall_session eCall Session
 *
 * Start an eCall session by creating an eCall object that calls
 * @c le_ecall_Create(). Stop an eCall session with @c le_ecall_End().
 *
 * The type of eCall and the kind of activation are specified using different functions to start the
 * eCall session:
 * - @c le_ecall_StartManual(): initiate a manual eCall session (triggered by a passenger, can be
 * aborted by the passengers)
 * - @c le_ecall_StartAutomatic(): initiate an automatic eCall session (automatically triggered by
 * the IVS in case of accident, cannot be interrupted by the passengers)
 * - @c le_ecall_StartTest(): initiate a test eCall session (to test the communication between the
 * IVS and the PSAP)
 *
 * When the eCall object is no longer needed, call @c le_ecall_Delete() to free all allocated
 * resources associated with the object.
 *
 * The current state of an eCall session can be queried using @c le_ecall_GetState().
 * Alternatively, an application can register a handler be notified when the session state
 * changes. The handler can be managed using @c le_ecall_AddStateChangeHandler() and
 * @c le_ecall_RemoveStateChangeHandler().
 *
 *
 * @section le_ecall_msd Minimum Set of Data (MSD)
 *
 * The dynamic values of the MSD can be set with:
 * - @c le_ecall_SetMsdPosition() sets the position of the vehicle.
 * - @c le_ecall_SetMsdPassengersCount() sets the number of passengers.
 *
 * The static values are retrieved from the configuration tree.
 *
 * It's possible to import a prepared MSD using the @c le_ecall_ImportMsd() function.
 * The prepared MSD must answer the requirements described in the "EN 15722:2013" publication (this
 * publication has been prepared by Technical Committee CEN/TC 278 “Intelligent Transport Systems").
 *
 * @note The MSD transmission is performed automatically after the emergency call is established with
 * the PSAP.
 *
 * @section le_ecall_concurrency Concurrency
 *
 * If another application tries to use the eCall service while a session is already in progress, the
 * @c le_ecall_StartManual(), @c le_ecall_StartAutomatic(), @c le_ecall_StartTest() and
 * @c le_ecall_End() functions will return a LE_DUPLICATE error. The eCall session in progress
 * won't be interrupted or disturbed. The application can follow the session progress with 'state' 
 * functions like @c le_ecall_GetState() and @c le_ecall_AddStateChangeHandler().
 * A manual eCall can't interrupt an automatic eCall, and an automatic eCall
 * can't interrupt a manual eCall.
 *
 * @section le_ecall_samples Code sample
 *
 * The following code sample shows how an eCall session is used:
 *
 * @code
 *
 * le_result_t TriggerAutomaticEcall
 * (
 *     uint32_t    paxCount,
 *     int32_t     latitude,
 *     int32_t     longitude,
 *     int32_t     direction
 * )
 * {
 *     // Create the eCall Session
 *     le_ecall_ObjRef_t eCallRef = le_ecall_Create();
 *
 *     // Set the dynamic MSD values, the static values are retrieved from the config tree
 *     le_ecall_SetMsdPosition(eCallRef,
 *                             true,
 *                             latitude,
 *                             longitude,
 *                             direction);
 *     le_ecall_SetMsdPassengersCount(eCallRef, paxCount);
 *
 *     // Start the eCall session
 *     le_ecall_StartAutomatic(eCallRef);
 * }
 *
 * @endcode
 *
 *
 * @section le_ecall_configdb Configuration tree
 * @copydoc le_ecall_configdbPage_Hide
 *
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless, Inc. 2014. All rights reserved. Use of this work is subject to license.
 */

/**
 * @interface le_ecall_configdbPage_Hide
 *
 * The configuration database path for the eCall is:
 * @verbatim
   /
       modemServices/
           eCall/
               psap<string> = <PSAP number>
               pushPull<string> = <push-pull mode>
               msdVersion<int> = <MSD value>
               maxRedialAttempts<int> = <maximum redial attempts value>
               vehicleType<string> = <vehicle type>
               vin<string> = <VIN>
               propulsionType/
                   0<string> = <propulsion type>
                   1<string> = <propulsion type>
                   ...
   @endverbatim
 *
 * The 'psap' field is the PSAP number.
 *
 * The 'pushPull' field can be set with the following two choices (string type):
 * - "Push": the MSD is pushed by the IVS
 * - "Pull": the MSD is sent when requested by the PSAP
 *
 * The 'msdVersion' field is the MSD format version.
 *
 * The 'maxRedialAttempts' field is the time of that the IVS shall attempt to redial the call if the
 * initial eCall attempt fails to connect, or the call is dropped for any reason other than by the
 * PSAP operator clearing the call down or T2 (IVS  Call Clear-down Fallback Timer) ends.
 *
 * The 'vehicleType' field can be set with the following choices (string type):
 * - "Passenger-M1" (Passenger vehicle, Class M1)
 * - "Bus-M2" (Buses and coaches, Class M2)
 * - "Bus-M3" (Buses and coaches, Class M3)
 * - "Commercial-N1" (Light commercial vehicles, Class N1)
 * - "Heavy-N2" (Heavy duty vehicles, Class N2)
 * - "Heavy-N3" (Heavy duty vehicles, Class N3)
 * - "Motorcycle-L1e" (Motorcycles, Class L1e)
 * - "Motorcycle-L2e" (Motorcycles, Class L2e)
 * - "Motorcycle-L3e" (Motorcycles, Class L3e)
 * - "Motorcycle-L4e" (Motorcycles, Class L4e)
 * - "Motorcycle-L5e" (Motorcycles, Class L5e)
 * - "Motorcycle-L6e" (Motorcycles, Class L6e)
 * - "Motorcycle-L7e" (Motorcycles, Class L7e)
 *
 * The 'vin' is the vehicle identification number (string type).
 *
 * The 'propulsionType' field can be set with the following choices (string type):
 * - "Gasoline" (Gasoline propulsion)
 * - "Diesel" (Diesel propulsion)
 * - "NaturalGas" (Compressed natural gas propulsion)
 * - "Propane" (Liquid propane gas propulsion)
 * - "Electric" (Electric propulsion)
 * - "Hydrogen" (Hydrogen propulsion)
 * - "Other" (Other type of propulsion)
 */

//--------------------------------------------------------------------------------------------------
/**
 * @file le_ecall_interface.h
 *
 * Legato @ref c_ecall include file.
 *
 * Copyright (C) Sierra Wireless, Inc. 2014. All rights reserved. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------
// Objects references.
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * Reference returned by Create function and used by other functions
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Obj;


//--------------------------------------------------------------------------------------------------
// Symbol and Enum definitions.
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * MSD message length in bytes.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  MSD_MAX_LEN = (282);


//--------------------------------------------------------------------------------------------------
/**
 *  eCall session states.
 */
//--------------------------------------------------------------------------------------------------
ENUM State
{
    STATE_UNKNOWN,           ///< Unknown state.
    STATE_CONNECTED,         ///< Emergency call is established.
    STATE_MSD_TX_COMPLETED,  ///< MSD transmission is complete.
    STATE_MSD_TX_FAILED,     ///< MSD transmission has failed.
    STATE_STOPPED,           ///< eCall session has been stopped by the PSAP.
    STATE_RESET,             ///< eCall session has lost synchronization and starts over.
    STATE_COMPLETED,         ///< Successful eCall session.
    STATE_FAILED             ///< Unsuccessful eCall session.
};

//--------------------------------------------------------------------------------------------------
/**
 * Handler for eCall state changes.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER StateChangeHandler
{
    HANDLER_PARAMS
    (
        State state  IN  ///< eCall state
    );
};


//--------------------------------------------------------------------------------------------------
/**
 * Create a new eCall object
 *
 * The eCall is not actually established at this point. It is still up to the caller to call
 * le_ecall_Start() when ready.
 *
 * @return A reference to the new Call object.
 *
 * @note On failure, the process exits, so you don't have to worry about checking the returned
 *       reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Obj Create
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Call to free up a call reference.
 *
 * @note This will free the reference, but not necessarily stop an active eCall. If there are
 *       other holders of this reference then the eCall will remain active.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Delete
(
    Obj ecallRef     IN  ///< eCall reference
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the position transmitted by the MSD.
 *
 *
 * MSD is transmitted only after an emergency call has been established.
 *
 *
 * @return LE_OK on success
 * @return LE_DUPLICATE an MSD has been already imported
 * @return LE_FAULT for other failures
 *
 * @note The process exits, if an invalid eCall reference is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetMsdPosition
(
    Obj         ecallRef   IN, ///< eCall reference
    bool        isTrusted  IN, ///< true if the position is accurate, false otherwise
    int32       latitude   IN, ///< latitude in degrees with 6 decimal places, positive North
    int32       longitude  IN, ///< longitude in degrees with 6 decimal places, positive East
    int32       direction  IN  ///< direction in degrees (where 0 is True North)
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the number of passengers transmitted by the MSD.
 *
 * MSD is transmitted only after an emergency call has been established.
 *
 * @return LE_OK on success
 * @return LE_DUPLICATE an MSD has been already imported
 * @return LE_FAULT for other failures
 *
 * @note The process exits, if an invalid eCall reference is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetMsdPassengersCount
(
    Obj         ecallRef   IN, ///< eCall reference
    uint32      paxCount   IN  ///< number of passengers
);

//--------------------------------------------------------------------------------------------------
/**
 * Import an already prepared MSD.
 *
 * MSD is transmitted only after an emergency call has been established.
 *
 * @return LE_OK on success
 * @return LE_DUPLICATE an MSD has been already imported
 * @return LE_FAULT for other failures
 *
 * @note On failure, the process exits, so you don't have to worry about checking the returned
 *       reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t ImportMsd
(
    Obj        ecallRef   IN,           ///< eCall reference
    uint8      msd[MSD_MAX_LEN]   IN    ///< the prepared MSD
);

//--------------------------------------------------------------------------------------------------
/**
 * Start an automatic eCall session
 *
 * @return LE_OK on success
 * @return LE_DUPLICATE an eCall session is already in progress
 * @return LE_FAULT for other failures
 *
 * @note The process exits, if an invalid eCall reference is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t StartAutomatic
(
    Obj    ecallRef  IN  ///< eCall reference
);

//--------------------------------------------------------------------------------------------------
/**
 * Start a manual eCall session
 *
 * @return LE_OK on success
 * @return LE_DUPLICATE an eCall session is already in progress
 * @return LE_FAULT for other failures
 *
 * @note The process exits, if an invalid eCall reference is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t StartManual
(
    Obj    ecallRef  IN  ///< eCall reference
);

//--------------------------------------------------------------------------------------------------
/**
 * Start a test eCall session
 *
 * @return LE_OK on success
 * @return LE_DUPLICATE an eCall session is already in progress
 * @return LE_FAULT for other failures
 *
 * @note The process exits, if an invalid eCall reference is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t StartTest
(
    Obj    ecallRef  IN  ///< eCall reference
);

//--------------------------------------------------------------------------------------------------
/**
 * End the current eCall session
 *
 * @return LE_OK on success
 * @return LE_DUPLICATE the eCall session was started by another application
 * @return LE_FAULT for other failures
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t End
(
    Obj    ecallRef  IN  ///< eCall reference
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the current state for the given eCall
 *
 * @return The current state for the given eCall
 *
 * @note The process exits, if an invalid eCall reference is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION State GetState
(
    Obj      ecallRef  IN  ///< eCall reference
);


