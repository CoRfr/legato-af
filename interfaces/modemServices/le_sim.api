/**
 * @page c_sim SIM
 *
 * @ref le_sim_interface.h "API Reference"
 *
 * <HR>
 *
 * This file contains prototype definitions for SIM API.
 *
 * A subscriber identity module or subscriber identification module (SIM) is an integrated circuit
 * that securely stores the international mobile subscriber identity (IMSI) and related key used
 * to identify and authenticate subscribers on M2M devices.
 *
 * Most SIM cards can store a number of SMS messages and phone book contacts.
 *
 * le_sim_GetSelectedCard() returns the selected SIM card number.
 *
 * @section le_sim_create Creating a SIM object
 * You must create a SIM object by calling le_sim_Create() first; the requested SIM type must be
 * specified with a parameter. Please refer to the target documentation for the supported SIM type
 * list.
 * This function passes the SIM type to create the required corresponding object. Resources are
 * automatically allocated for the SIM object, which is referenced by le_sim_ObjRef_t type.
 *
 * When the SIM object is no longer needed, you must call le_sim_Delete() to free all
 * allocated ressources associated with the object.
 *
 * @section le_sim_SelectCard Select a card to use
 * le_sim_SelectCard() function is used to select the SIM. By default, the SIM in slot 1 is used.
 * @note The SIM selection is not reset persistent; this function has to be called at each start-up.
 *
 * @section le_sim_delete Delete a SIM object
 * To delete a SIM object, call le_sim_Delete(). This frees all the resources allocated for
 * the SIM object. If several users own the SIM object (e.g., several
 * handler functions registered for new state notifications), the SIM object will only
 * be actually deleted after the last user deletes the SIM object.
 *
 * @section le_sim_id SIM identification information
 * \b ICCID:
 * Each SIM is internationally identified by its integrated circuit card identifier (ICCID). ICCIDs
 * are stored in the SIM cards and engraved or printed on the SIM card body.
 * The ICCID is defined by the ITU-T recommendation E.118 as the
 * Primary Account Number. According to E.118, the number is up to 19 digits long, including a
 * single check digit calculated using the Luhn algorithm. However, the GSM Phase 1 (ETSI
 * Recommendation GSM 11.11) defined the ICCID length as 10 octets (20 digits) with
 * operator-specific structure.
 *
 * le_sim_GetICCID() API reads the identification number (ICCID).
 *
 * Using this API selects the requested SIM.
 *
 * \b IMSI:
 * The International Mobile Subscriber Identity or IMSI is a unique identification associated with
 * all cellular networks. The IMSI is used in any mobile network that connects with other
 * networks. For GSM, UMTS and LTE network, this number is provisioned in the SIM card.
 *
 * An IMSI is usually presented as a 15 digit long number, but can be shorter. The first 3 digits
 * are the mobile country code (MCC), are followed by the mobile network code (MNC), either 2
 * digits (European standard) or 3 digits (North American standard). The length of the MNC depends
 * on the value of the MCC. The remaining digits are the mobile subscription identification number
 * (MSIN) within the network's customer base.
 *
 * \b Home \b Network \b Name:
 * le_sim_GetHomeNetworkOperator() retrieves the Home Network Name.
 *
 * le_sim_GetIMSI() API reads the international mobile subscriber identity (IMSI).
 *
 * Using this API selects the requested SIM.
 *
 * \b Phone \b Number:
 * le_sim_GetSubscriberPhoneNumber() API reads the Phone Number associated to the SIM.
 * If the phone number has not been provisioned, it will return the empty string.
 *
 * Using this API selects the requested SIM.
 *
 * \b Home \b Network \b Information:
 * - le_sim_GetHomeNetworkOperator()function retrieves the Home Network Name.
 * - le_sim_GetHomeNetworkMccMnc()function retrieves the Home Network MCC (Mobile Country Code)
 *      and MNC (Mobile Network Code).
 *
 * @section le_sim_auth SIM Authentication
 * le_sim_EnterPIN() enters the PIN (Personal Identification Number) code that's
 * required before any Mobile equipment functionality can be used.
 *
 * Using this API selects the requested SIM.
 *
 * le_sim_GetRemainingPINTries() returns the number of remaining PIN entry attempts
 * before the SIM will become blocked.
 *
 * Using this API selects the requested SIM.
 *
 * le_sim_ChangePIN() must be called to change the PIN code.
 *
 * Using this API selects the requested SIM.
 *
 *  le_sim_Lock() locks the SIM card: it enables requests for the PIN code.
 *
 * Using this API selects the requested SIM.
 *
 *  le_sim_Unlock() unlocks the SIM card: it disables requests for the PIN code.
 *
 * Using this API selects the requested SIM.
 *
 * le_sim_Unblock() unblocks the SIM card. The SIM card is blocked after X unsuccessful
 * attempts to enter the PIN. le_sim_Unblock() requires the PUK (Personal Unblocking) code
 * to set a new PIN code.
 *
 * Using this API selects the requested SIM.
 *
 * @section le_sim_state SIM states
 * le_sim_IsPresent() API advises the SIM is inserted (and locked) or removed.
 *
 * Using this API selects the requested SIM.
 *
 * le_sim_IsReady() API advises the SIM is ready (PIN code correctly entered
 * or not required).
 *
 * Using this API selects the requested SIM.
 *
 * The le_sim_GetState() API retrieves the SIM state:
 * - LE_SIM_INSERTED      : SIM card is inserted and locked.
 * - LE_SIM_ABSENT        : SIM card is absent.
 * - LE_SIM_READY         : SIM card is inserted and unlocked.
 * - LE_SIM_BLOCKED       : SIM card is blocked.
 * - LE_SIM_BUSY          : SIM card is busy.
 * - LE_SIM_STATE_UNKNOWN : Unknown SIM state.
 *
 * Using this API selects the requested SIM.
 *
 * A handler function must be registered to receive SIM's state notifications.
 * le_sim_AddNewStateHandler() API allows the User to register that handler.
 *
 * The handler must satisfy the following prototype:
 * typedef void(*le_sim_NewStateHandlerFunc_t)(le_sim_ObjRef_t sim);
 *
 * When a new SIM's state is notified, a SIM object is automatically created and the handler is
 * called.
 *
 * Call le_sim_GetState() to retrieve the new state of the SIM.
 *
 * @note If two (or more) applications have registered a handler function for notifications, they
 * will all receive it and will be passed the same SIM object reference.
 *
 * The application can uninstall the handler function by calling le_sim_RemoveNewStateHandler() API.
 * @note le_sim_RemoveNewStateHandler() API does not delete the SIM Object. The caller has to
 *       delete it.
 *
 * @section le_sim_profile_switch Local SIM profile switch
 *
 * As soon as there are several subscriptions/profiles in the eUICC (multi-profile), and one of
 * them is dedicated to emergency calls (ex: eCall, ERA-Glonass), local swap is needed to swap as
 * quickly as possible to the emergency profile in case of need.
 *
 * “Local swap” means that the User's application must be able to directly request the eUICC to
 * swap to Emergency Call Subscription (ECS).
 *
 * Local swap puts the eUICC in a temporary state, meaning the commercial subscription is replaced
 * by emergency subscription for a limited time, event triggering the swap back to commercial
 * subscription being controlled by the User's application.
 *
 * The le_sim_LocalSwapToEmergencyCallSubscription() function requests the multi-profile eUICC to
 * swap to ECS and to refresh. The User's application must wait for eUICC reboot to be finished and
 * network connection available.
 *
 * The le_sim_LocalSwapToCommercialSubscription() function requests the multi-profile eUICC to swap
 * back to commercial subscription and to refresh. The User's application must wait for eUICC reboot
 * to be finished and network connection available.
 *
 * The User's application can install an handler with le_sim_AddNewStateHandler() to receive eUICC's
 * state notifications.
 *
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 * to license.
 */

/** @file le_sim_interface.h
 *
 * Legato @ref c_sim include file.
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */

USETYPES le_mdmDefs.api;

//--------------------------------------------------------------------------------------------------
/**
 * Minimum PIN length (4 digits)
 *
 */
//--------------------------------------------------------------------------------------------------
DEFINE  PIN_MIN_LEN     = (4);


//--------------------------------------------------------------------------------------------------
/**
 * Maximum PIN length (8 digits)
 *
 */
//--------------------------------------------------------------------------------------------------
DEFINE  PIN_MAX_LEN     = (8);
DEFINE  PIN_MAX_BYTES   = (PIN_MAX_LEN+1);


//--------------------------------------------------------------------------------------------------
/**
 * PUK length (8 digits)
 *
 */
//--------------------------------------------------------------------------------------------------
DEFINE  PUK_MAX_LEN     = (8);
DEFINE  PUK_MAX_BYTES   = (PUK_MAX_LEN+1);


//--------------------------------------------------------------------------------------------------
/**
 * ICCID length
 * According to GSM Phase 1
 */
//--------------------------------------------------------------------------------------------------
DEFINE  ICCID_LEN    = (20);
DEFINE  ICCID_BYTES  = (ICCID_LEN+1);


//--------------------------------------------------------------------------------------------------
/**
 * IMSI length
 *
 */
//--------------------------------------------------------------------------------------------------
DEFINE  IMSI_LEN    = (15);
DEFINE  IMSI_BYTES  = (IMSI_LEN+1);


//--------------------------------------------------------------------------------------------------
/**
 * SIM states.
 *
 */
//--------------------------------------------------------------------------------------------------
ENUM States
{
    INSERTED,        ///< SIM card is inserted and locked.
    ABSENT,          ///< SIM card is absent.
    READY,           ///< SIM card is inserted and unlocked.
    BLOCKED,         ///< SIM card is blocked.
    BUSY,            ///< SIM card is busy.
    STATE_UNKNOWN    ///< Unknown SIM state.
};

//--------------------------------------------------------------------------------------------------
/**
 * SIM type.
 *
 */
//--------------------------------------------------------------------------------------------------
ENUM Type
{
    EMBEDDED,           ///< Embedded SIM
    EXTERNAL_SLOT_1,    ///< SIM inserted in external slot 1
    EXTERNAL_SLOT_2,    ///< SIM inserted in external slot 2
    REMOTE,             ///< Remote SIM
    TYPE_MAX
};

//--------------------------------------------------------------------------------------------------
/**
 * Card Manufacturer.
 *
 */
//--------------------------------------------------------------------------------------------------
ENUM Manufacturer
{
    OBERTHUR,               ///< Oberthur.
    GEMALTO,                ///< Gemalto.
    G_AND_D,                ///< G&D.
    MORPHO,                 ///< Morpho.
    MANUFACTURER_UNKNOWN    ///< Unknown Manufacturer.
};

//--------------------------------------------------------------------------------------------------
/**
 * Reference type for referring to SIM objects.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Obj;



//--------------------------------------------------------------------------------------------------
/**
 * Handler for sim state changes.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER NewStateHandler
(
    Obj simRef ///< SIM reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on sim state changes.
 *
 */
//--------------------------------------------------------------------------------------------------
EVENT NewState
(
    handler NewStateHandler
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the current selected card.
 *
 * @return Number of the current selected SIM card.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Type GetSelectedCard
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Create a SIM object.
 *
 * @return Reference to the SIM object.
 *
 * @note
 *      On failure, the process exits, so no need to check the return value for validity
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Obj Create
(
    Type simType IN           ///< The SIM type.
);

//--------------------------------------------------------------------------------------------------
/**
 * Select a SIM.
 *
 * @return LE_FAULT         Function failed to select the requested SIM
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SelectCard
(
    Obj simRef IN      ///< The SIM object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Delete a SIM object.
 *
 * This frees all the resources allocated for
 * the SIM object. If several users own the SIM object (e.g., several
 * handler functions registered for new state notifications), the SIM object will only
 * be actually deleted after the last user deletes the SIM object.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Delete
(
    Obj simRef IN      ///< The SIM object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Retrieve the slot number of the SIM card.
 *
 * @return Slot number of the SIM card.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION uint32 GetSlotNumber
(
    Obj simRef IN      ///< The SIM object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Retrieves the integrated circuit card identifier (ICCID) of the SIM card (20 digits)
 *
 * @return LE_OK             ICCID was successfully retrieved.
 * @return LE_OVERFLOW       iccidPtr buffer was too small for the ICCID.
 * @return LE_BAD_PARAMETER if a parameter is invalid
 * @return LE_FAULT         The ICCID could not be retrieved.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetICCID
(
    Obj     simRef IN,              ///< The SIM object.
    string  iccid[ICCID_LEN] OUT    ///< ICCID
);

//--------------------------------------------------------------------------------------------------
/**
 * Retrieves the identification number (IMSI) of the SIM card. (max 15 digits)
 *
 * @return LE_OVERFLOW      The imsiPtr buffer was too small for the IMSI.
 * @return LE_BAD_PARAMETER The parameters are invalid.
 * @return LE_FAULT         The function failed.
 * @return LE_TIMEOUT       No response was received.
 * @return LE_OK            The function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetIMSI
(
    Obj     simRef IN,           ///< The SIM object.
    string  imsi[IMSI_LEN] OUT   ///< IMSI
);

//--------------------------------------------------------------------------------------------------
/**
 * Verify if the SIM card is present or not.
 *
 * @return true   SIM card is present.
 * @return false  SIM card is absent
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsPresent
(
    Obj simRef IN      ///< The SIM object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Verify if the SIM is ready (PIN code correctly inserted or not
 * required).
 *
 * @return true   PIN is correctly inserted or not required.
 * @return false  PIN must be inserted
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsReady
(
    Obj simRef IN      ///< The SIM object.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to enter the PIN code.
 *
 * @return LE_BAD_PARAMETER The parameters are invalid.
 * @return LE_NOT_FOUND     The function failed to select the SIM card for this operation.
 * @return LE_UNDERFLOW     The PIN code is not long enough (min 4 digits).
 * @return LE_FAULT         The function failed to enter the PIN code.
 * @return LE_OK            The function succeeded.
 *
 * @note If PIN code is too long (max 8 digits), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t EnterPIN
(
    Obj     simRef IN,          ///< The SIM object.
    string  pin[PIN_MAX_LEN] IN ///< The PIN code.
);

//--------------------------------------------------------------------------------------------------
/**
 * Change the PIN code.
 *
 * @return LE_NOT_FOUND     Function failed to select the SIM card for this operation.
 * @return LE_UNDERFLOW     PIN code is/are not long enough (min 4 digits).
 * @return LE_FAULT         Function failed to change the PIN code.
 * @return LE_OK            Function succeeded.
 *
 * @note If PIN code is too long (max 8 digits), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t ChangePIN
(
    Obj     simRef IN,              ///< The SIM object.
    string  oldpin[PIN_MAX_LEN] IN, ///< The old PIN code.
    string  newpin[PIN_MAX_LEN] IN  ///< The new PIN code.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the number of remaining PIN insertion tries.
 *
 * @return LE_NOT_FOUND     The function failed to select the SIM card for this operation.
 * @return LE_FAULT         The function failed to get the number of remaining PIN insertion tries.
 * @return A positive value The function succeeded. The number of remaining PIN insertion tries.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION int32 GetRemainingPINTries
(
    Obj simRef IN   ///< The SIM object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Unlock the SIM card: it disables the request of the PIN code.
 *
 * @return LE_NOT_FOUND     Function failed to select the SIM card for this operation.
 * @return LE_UNDERFLOW     PIN code is not long enough (min 4 digits).
 * @return LE_FAULT         The function failed to unlock the SIM card.
 * @return LE_OK            Function succeeded.
 *
 * @note If PIN code is too long (max 8 digits), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Unlock
(
    Obj     simRef,             ///< The SIM object.
    string  pin[PIN_MAX_LEN] IN ///< The PIN code.
);

//--------------------------------------------------------------------------------------------------
/**
 * Lock the SIM card: it enables the request of the PIN code.
 *
 * @return LE_NOT_FOUND     Function failed to select the SIM card for this operation.
 * @return LE_UNDERFLOW     PIN code is not long enough (min 4 digits).
 * @return LE_FAULT         The function failed to unlock the SIM card.
 * @return LE_OK            Function succeeded.
 *
 * @note If PIN code is too long (max 8 digits), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Lock
(
    Obj     simRef,             ///< The SIM object.
    string  pin[PIN_MAX_LEN] IN ///< The PIN code.
);

//--------------------------------------------------------------------------------------------------
/**
 * Unblock the SIM card.
 *
 * @return LE_NOT_FOUND     Function failed to select the SIM card for this operation.
 * @return LE_UNDERFLOW     PIN code is not long enough (min 4 digits).
 * @return LE_OUT_OF_RANGE  PUK code length is not correct (8 digits).
 * @return LE_FAULT         The function failed to unlock the SIM card.
 * @return LE_OK            Function succeeded.
 *
 * @note If new PIN or puk code are too long (max 8 digits), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Unblock
(
    Obj     simRef,                 ///< The SIM object.
    string  puk[PUK_MAX_LEN] IN,        ///< The PUK code.
    string  newpin[PIN_MAX_LEN] IN  ///< The PIN code.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the SIM state.
 *
 * @return Current SIM state.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_sim_States_t GetState
(
    Obj simRef IN      ///< The SIM object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the SIM Phone Number.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the Phone Number can't fit in phoneNumberStr
 *      - LE_BAD_PARAMETER if a parameter is invalid
 *      - LE_FAULT on any other failure
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSubscriberPhoneNumber
(
    Obj     simRef IN,                                       ///< The SIM object.
    string  phoneNumberStr[le_mdmDefs.PHONE_NUM_MAX_LEN] OUT ///< The phone Number.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Home Network Name information.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the Home Network Name can't fit in nameStr
 *      - LE_NOT_FOUND if the network is not found
 *      - LE_BAD_PARAMETER if a parameter is invalid
 *      - LE_FAULT on any other failure
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetHomeNetworkOperator
(
    string nameStr[100] OUT     ///< the home network Name
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Home Network MCC MNC.
 *
 * @return
 *      - LE_OK on success
 *      - LE_NOT_FOUND if Home Network has not been provisioned
 *      - LE_FAULT for unexpected error
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetHomeNetworkMccMnc
(
    string mccPtr[3] OUT,       ///< Mobile Country Code
    string mncPtr[3] OUT        ///< Mobile Network Code
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to request the multi-profile eUICC to swap to ECS and to refresh.
 * The User's application must wait for eUICC reboot to be finished and network connection
 * available.
 *
 * @return
 *      - LE_OK on success
 *      - LE_BUSY when a profile swap is already in progress
 *      - LE_FAULT for unexpected error
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t LocalSwapToEmergencyCallSubscription
(
    Obj          simRef       IN,         ///< The SIM object.
    Manufacturer manufacturer IN          ///< The card manufacturer.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to request the multi-profile eUICC to swap back to commercial
 * subscription and to refresh.
 * The User's application must wait for eUICC reboot to be finished and network connection
 * available.
 *
 * @return
 *      - LE_OK on success
 *      - LE_BUSY when a profile swap is already in progress
 *      - LE_FAULT for unexpected error
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t LocalSwapToCommercialSubscription
(
    Obj          simRef       IN,         ///< The SIM object.
    Manufacturer manufacturer IN          ///< The card manufacturer.
);


