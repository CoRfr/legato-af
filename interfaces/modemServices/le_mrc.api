/**
 * @page c_mrc Modem Radio Control
 *
 * @ref le_mrc_interface.h "API Reference"
 *
 * <HR>
 *
 * This file contains the the prototype definitions of the high level Modem Radio Control (MRC)
 * APIs.
 *
 * It's important for many M2M apps to know details about cellular network environments (like
 * network registration and signal quality).
 * It allows you to limit some M2M services based on the reliability of the network environment, and
 * provides information to control power consumption (power on or shutdown the radio module).
 *
 * @section le_mrc_power Radio Power Management
 * le_mrc_SetRadioPower() API allows the application to power up or shutdown the radio module.
 *
 * le_mrc_GetRadioPower() API displays radio module power state.
 *
 * @section le_mrc_configuration Radio Configuration preferences
 *
 * The following functions let you configure and retrieve the radio configuration preferences:
 * le_mrc_SetAutomaticRegisterMode(), le_mrc_SetManualRegisterMode() and le_mrc_GetRegisterMode()
 * let you set/get the selected Scan mode.
 *
 * le_mrc_SetBandPreferences(), le_mrc_GetBandPreferences() let you set/get the 2G/3G band
 * preferences by using a bit mask built with @c le_mrc_BandBitMask_t
 *
 * The 2G/3G band preferences can be:
 * - Band-Class-0-A-System
 * - Band-Class-0-B-System
 * - Band-Class-1-All-Blocks
 * - Band-Class-2-Placeholder
 * - Band-Class-3-A-System
 * - Band-Class-4-All-Blocks
 * - Band-Class-5-All-Blocks
 * - Band-Class-6
 * - Band-Class-7
 * - Band-Class-8
 * - Band-Class-9
 * - Band-Class-10
 * - Band-Class-11
 * - Band-Class-12
 * - Band-Class-13
 * - Band-Class-14
 * - Band-Class-15
 * - Band-Class-16
 * - Band-Class-17
 * - Band-Class-18
 * - Band-Class-19
 * - GSM-DCS-1800
 * - E-GSM-900 (for Extended GSM 900 band)
 * - Primary-GSM-900
 * - GSM-450
 * - GSM-480
 * - GSM-750
 * - GSM-850
 * - GSMR-900 (for GSM Railways GSM 900 band)
 * - GSM-PCS-1900
 * - WCDMA-EU-J-CH-IMT-2100 (for WCDMA Europe, Japan, and China IMT 2100 band)
 * - WCDMA-US-PCS-1900 (for WCDMA U.S. PCS 1900 band)
 * - WCDMA-EU-CH-DCS-1800 (for WCDMA Europe and China DCS 1800 band)
 * - WCDMA-US-1700 (for WCDMA U.S. 1700 band)
 * - WCDMA-US-850 (for WCDMA U.S. 850 band)
 * - WCDMA-J-800 (for WCDMA Japan 800 band)
 * - WCDMA-EU-2600 (for WCDMA Europe 2600 band)
 * - WCDMA-EU-J-900 (for WCDMA Europe and Japan 900 band)
 * - WCDMA-J-1700 (for WCDMA Japan 1700 band)
 *
 * le_mrc_SetLteBandPreferences(), le_mrc_GetLteBandPreferences() let you set/get the LTE band
 * preferences by using a bit mask built with @c le_mrc_LteBandBitMask_t.
 *
 * The LTE band preferences can be 0 to 43 except 15, 16, 22, 23, and 26 to 32.
 *
 * le_mrc_SetTdScdmaBandPreferences(), le_mrc_GetTdScdmaBandPreferences() let you set/get the
 * TD-SCDMA band preferences by using a bit mask built with @c le_mrc_TdScdmaBandBitMask_t
 *
 * The TD-SCDMA band preferences can be 'A' to 'F'
 *
 * @warning Ensure to check the supported preferences for your specific platform.
 *
 * le_mrc_AddPreferredOperator() , le_mrc_RemovePreferredOperator() to add/remove a preferred
 * operator by specifying the MCC/MNC and the Radio Access Technology.
 *
 * le_mrc_GetPreferredOperatorsList(), le_mrc_GetFirstPreferredOperator(),
 * le_mrc_GetNextPreferredOperator(), le_mrc_DeletePreferredOperatorsList(),
 * le_mrc_GetPreferredOperatorDetails() let you retrieve a list of the selected preferred
 * operators and get their details.
 *
 * @section le_mrc_rat Radio Access Technology (RAT)
 * le_mrc_GetRadioAccessTechInUse() API retrieves the current active Radio Access Technology.
 *
 * The application can register a handler function to retrieve the Radio Access Technology each time
 * the RAT changes.
 *
 * le_mrc_AddRatChangeHandler() API installs a RAT change handler.
 *
 * le_mrc_RemoveRatChangeHandler() API uninstalls the handler function.
 *
 * le_mrc_SetRatPreferences(), le_mrc_GetRatPreferences() let you set/get the Radio Access
 * Technology preferences by using a bit mask built with @c le_mrc_RatBitMask_t.
 *
 * The Radio Access Technology preferences can be:
 * - CDMA (CDMA2000-1X + CDMA2000-HRPD)
 * - GSM
 * - UMTS (UMTS + TD-SCDMA)
 * - LTE
 *
 * @note LE_MRC_BITMASK_RAT_ALL value can be used to select the RAT in automatic mode.
 *
 *
 * @section le_mrc_registration Network Registration
 * le_mrc_GetNetRegState() API retrieves the radio module network registration status.
 *
 * The application can register a handler function to retrieve the registration status each time the
 * registration state changes.
 *
 * le_mrc_AddNetRegStateEventHandler() API installs a registration state handler.
 *
 * le_mrc_RemoveNetRegStateHandler() API uninstalls the handler function.
 * @note If only one handler is registered, the le_mrc_RemoveNetRegStateHandler() API
 *       resets the registration mode to its original value before any handler functions were added.
 *
 * le_mrc_RegisterCellularNetwork() API registers on a cellular network.
 *
 * @section le_mrc_signal Signal Quality
 * le_mrc_GetSignalQual() retrieves the received signal strength details.
 *
 * @section le_mrc_network_information Current Network Information
 * le_mrc_GetCurrentNetworkName() retrieves the Current Network Name.
 * le_mrc_GetCurrentNetworkMccMnc() retrieves the Current Network PLMN information.
 *
 * @section le_mrc_networkScan Network Scan
 *
 * Call le_mrc_PerformCellularNetworkScan() to fill a list of all network in sight.
 * You can go through all Scan Information by calling le_mrc_GetFirstCellularNetworkScan() and
 * le_mrc_GetNextCellularNetworkScan().
 *
 * For each Scan Information, you can call:
 *
 *  - le_mrc_GetCellularNetworkMccMnc() to have the operator code.
 *  - le_mrc_GetCellularNetworkName() to get the operator name.
 *  - le_mrc_GetCellularNetworkRat() to get the radio access technology.
 *  - le_mrc_IsCellularNetworkInUse() to check if this is currently in use by the network.
 *  - le_mrc_IsCellularNetworkAvailable() to check if this is available.
 *  - le_mrc_IsCellularNetworkHome() to check if this is in home status.
 *  - le_mrc_IsCellularNetworkForbidden() to check if this is forbidden by the network.
 *
 * le_mrc_DeleteCellularNetworkScan() should be called when you do not need the list anymore.
 *
 *
 * Usage example:
@code

    le_mrc_ScanInformationListRef_t scanInformationList = NULL;

    scanInformationList = le_mrc_PerformCellularNetworkScan(LE_MRC_BITMASK_RAT_ALL);

    if (!scanInformationList)
    {
        fprintf(stdout, "Could not perform scan\n");
        return;
    }

    le_mrc_ScanInformationRef_t cellRef;

    for (cellRef=le_mrc_GetFirstCellularNetworkScan(scanInformationList);
         cellRef!=NULL;
         cellRef=le_mrc_GetNextCellularNetworkScan(scanInformationList))
    {
        le_mrc_Rat rat;
        char mcc[4],mnc[4];
        char name[100];

        rat = le_mrc_GetCellularNetworkRat(cellRef);

        fprintf(stdout, "Rat %d ",rat);

        if (le_mrc_GetCellularNetworkMccMnc(cellRef,mcc,sizeof(mcc),mnc,sizeof(mnc))!=LE_OK)
        {
            fprintf(stdout, "Failed to get operator code.\n");
        }
        else
        {
            fprintf(stdout, "[%s-%s] ",mcc,mnc);
        }

        if (le_mrc_GetCellularNetworkName(cellRef, name, sizeof(name)) != LE_OK)
        {
            fprintf(stdout, "Failed to get operator name.\n");
        }
        else
        {
            fprintf(stdout, "%-32s",name);
        }

        fprintf(stdout,"%-15s,",le_mrc_IsCellularNetworkInUse(cellRef)?"Is used":"Is not used");

        fprintf(stdout,"%-20s,",le_mrc_IsCellularNetworkAvailable(cellRef)?"Is available":"Is not available");

        fprintf(stdout,"%-10s,",le_mrc_IsCellularNetworkHome(cellRef)?"Home":"Roaming");

        fprintf(stdout,"%-10s]\n",le_mrc_IsCellularNetworkForbidden(cellRef)?"Forbidden":"Allowed");

    }

    le_mrc_DeleteCellularNetworkScan(scanInformationList);

@endcode
 *
 *
 * @section le_mrc_ngbr Neighboring Cells Information
 * You must call le_mrc_GetNeighborCellsInfo() to retrieve the neighboring cells
 * information. It returns a reference of le_mrc_NeighborCellsRef_t type.
 *
 * When the neighboring cells information is no longer needed, you must call
 * le_mrc_DeleteNeighborCellsInfo() to free all allocated ressources associated with the
 * object.
 *
 * Then, you can use the following function to get the information:
 * le_mrc_GetFirstNeighborCellInfo() and le_mrc_GetFirstNeighborCellInfo() allow to go among
 * the single cell information retrieved with le_mrc_GetNeighborCellsInfo(). These two functions
 * return a reference of le_mrc_CellInfoRef_t type.
 * le_mrc_GetNeighborCellId() gets the identifier of the cell specified with the
 * le_mrc_CellInfoRef_t parameter.
 * le_mrc_GetNeighborCellLac() gets the location area code of the cell specified with the
 * le_mrc_CellInfoRef_t parameter.
 * le_mrc_GetNeighborCellRxLevel() gets the signal strength (in dBm) of the cell specified
 * le_mrc_CellInfoRef_t parameter.
 *
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */

//--------------------------------------------------------------------------------------------------
/**
 * @file le_mrc_interface.h
 *
 * Legato @ref c_mrc include file.
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * Mobile Country Code and Mobile network Code lengths
 *
 */
//--------------------------------------------------------------------------------------------------
DEFINE  MCC_LEN     = 3;             // Mobile Country Code length (without null terminator)
DEFINE  MCC_BYTES   = (MCC_LEN + 1); // Mobile Country Code length (with null terminator)
DEFINE  MNC_LEN     = 3;             // Mobile network Code length (without null terminator)
DEFINE  MNC_BYTES   = (MNC_LEN + 1); // Mobile network Code length (with null terminator)

//--------------------------------------------------------------------------------------------------
/**
 * 2G/3G Band Bit Mask (64 bits)
 *
 */
//--------------------------------------------------------------------------------------------------
BITMASK BandBitMask
{
    BITMASK_BAND_CLASS_0_A_SYSTEM,
    BITMASK_BAND_CLASS_0_B_SYSTEM,
    BITMASK_BAND_CLASS_1_ALL_BLOCKS,
    BITMASK_BAND_CLASS_2_PLACEHOLDER,
    BITMASK_BAND_CLASS_3_A_SYSTEM,
    BITMASK_BAND_CLASS_4_ALL_BLOCKS,
    BITMASK_BAND_CLASS_5_ALL_BLOCKS,
    BITMASK_BAND_CLASS_6,
    BITMASK_BAND_CLASS_7,
    BITMASK_BAND_CLASS_8,
    BITMASK_BAND_CLASS_9,
    BITMASK_BAND_CLASS_10,
    BITMASK_BAND_CLASS_11,
    BITMASK_BAND_CLASS_12,
    BITMASK_BAND_CLASS_14,
    BITMASK_BAND_CLASS_15,
    BITMASK_BAND_CLASS_16,
    BITMASK_BAND_CLASS_17,
    BITMASK_BAND_CLASS_18,
    BITMASK_BAND_CLASS_19,
    BITMASK_BAND_GSM_DCS_1800,
    BITMASK_BAND_EGSM_900,
    BITMASK_BAND_PRI_GSM_900,
    BITMASK_BAND_GSM_450,
    BITMASK_BAND_GSM_480,
    BITMASK_BAND_GSM_750,
    BITMASK_BAND_GSM_850,
    BITMASK_BAND_GSMR_900,
    BITMASK_BAND_GSM_PCS_1900,
    BITMASK_BAND_WCDMA_EU_J_CH_IMT_2100,
    BITMASK_BAND_WCDMA_US_PCS_1900,
    BITMASK_BAND_WCDMA_EU_CH_DCS_1800,
    BITMASK_BAND_WCDMA_US_1700,
    BITMASK_BAND_WCDMA_US_850,
    BITMASK_BAND_WCDMA_J_800,
    BITMASK_BAND_WCDMA_EU_2600,
    BITMASK_BAND_WCDMA_EU_J_900,
    BITMASK_BAND_WCDMA_J_1700
};

//--------------------------------------------------------------------------------------------------
/**
 * LTE Band Bit Mask (32bits)
 *
 */
//--------------------------------------------------------------------------------------------------
BITMASK LteBandBitMask
{
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_1,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_2,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_3,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_4,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_5,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_6,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_7,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_8,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_9,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_10,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_11,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_12,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_13,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_14,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_17,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_18,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_19,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_20,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_21,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_24,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_25,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_33,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_34,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_35,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_36,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_37,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_38,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_39,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_40,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_41,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_42,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_43
};

//--------------------------------------------------------------------------------------------------
/**
 * TDSCDMA Band Bit Mask
 *
 */
//--------------------------------------------------------------------------------------------------
BITMASK TdScdmaBandBitMask
{
    BITMASK_TDSCDMA_BAND_A,
    BITMASK_TDSCDMA_BAND_B,
    BITMASK_TDSCDMA_BAND_C,
    BITMASK_TDSCDMA_BAND_D,
    BITMASK_TDSCDMA_BAND_E,
    BITMASK_TDSCDMA_BAND_F
};


//--------------------------------------------------------------------------------------------------
/**
 * Cellular Network length.
 *
 */
//--------------------------------------------------------------------------------------------------
DEFINE  NETWORK_NAME_MAX_LEN = (100);


//--------------------------------------------------------------------------------------------------
/**
 * Reference type for referring to MRC Scan Information objects.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE ScanInformation;

//--------------------------------------------------------------------------------------------------
/**
 * Reference type for Scan Information Listing.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE ScanInformationList;

//--------------------------------------------------------------------------------------------------
/**
 * Reference type for referring to the Preferred Operator objects.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE PreferredOperator;

//--------------------------------------------------------------------------------------------------
/**
 * Reference type for Preferred Operator Listing.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE PreferredOperatorList;

//--------------------------------------------------------------------------------------------------
/**
 *  Reference type for one Cell Information.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE CellInfo;

//--------------------------------------------------------------------------------------------------
/**
 *  Reference type for all Neighboring Cells Information.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE NeighborCells;


//--------------------------------------------------------------------------------------------------
/**
 * Network Registration states.
 */
//--------------------------------------------------------------------------------------------------
ENUM NetRegState
{
    REG_NONE,           ///< Not registered and not currently searching for new operator.
    REG_HOME,           ///< Registered, home network.
    REG_SEARCHING,      ///< Not registered but currently searching for a new operator.
    REG_DENIED,         ///< Registration was denied, usually because of invalid access credentials.
    REG_ROAMING,        ///< Registered to a roaming network.
    REG_UNKNOWN         ///< Unknown state.
};


//--------------------------------------------------------------------------------------------------
/**
 * Radio Access Technology enum
 */
//--------------------------------------------------------------------------------------------------
ENUM Rat
{
    RAT_UNKNOWN,     ///< Unknown
    RAT_GSM,         ///< GSM network
    RAT_UMTS,        ///< UMTS network
    RAT_LTE,         ///< LTE network
    RAT_CDMA         ///< CDMA network
};


//--------------------------------------------------------------------------------------------------
/**
 * Radio Bitmask Access Technology Bit Mask
 */
//--------------------------------------------------------------------------------------------------
BITMASK RatBitMask
{
    BITMASK_RAT_GSM,    ///< GSM RAT Bit Mask
    BITMASK_RAT_UMTS,   ///< UMTS RAT Bit Mask
    BITMASK_RAT_LTE,    ///< LTE RAT Bit Mask
    BITMASK_RAT_CDMA,   ///< CDMA RAT Bit Mask
    BITMASK_RAT_ALL     ///< To Set all RAT preference Bit Mask
};


//--------------------------------------------------------------------------------------------------
/**
 * Handler for Network registration state changes.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER NetRegStateHandler
(
    NetRegState state ///< Parameter ready to receive the Network Registration state.
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on network registration state changes.
 *
 */
//--------------------------------------------------------------------------------------------------
EVENT NetRegStateEvent
(
    handler NetRegStateHandler
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler for Radio Access Technology changes.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER RatChangeHandler
(
    Rat rat    ///< Parameter ready to receive the Radio Access Technology.
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on Radio Access Technology changes.
 *
 */
//--------------------------------------------------------------------------------------------------
EVENT RatChange
(
    handler RatChangeHandler
);

//--------------------------------------------------------------------------------------------------
/**
 * Enable the automatic Selection Register mode.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetAutomaticRegisterMode
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the manual Selection Register mode with the MCC/MNC parameters.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetManualRegisterMode
(
    string mcc[MCC_LEN] IN,   ///< Mobile Country Code
    string mnc[MNC_LEN] IN    ///< Mobile Network Code
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the selected Selection Register mode.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetRegisterMode
(
    bool isManualPtr OUT, ///< true if the scan mode is manual, false if the scan mode is automatic.
    string mccPtr[MCC_LEN] OUT, ///< Mobile Country Code
    string mncPtr[MNC_LEN] OUT  ///< Mobile Network Code
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the Radio Access Technology preferences by using a bit mask.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetRatPreferences
(
    RatBitMask ratMask IN ///< Bit mask for the Radio Access Technology preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Radio Access Technology preferences
 *
 * @return
 * - LE_FAULT  Function failed.
 * - LE_OK     Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetRatPreferences
(
    RatBitMask ratMaskPtr OUT ///< Bit mask for the Radio Access Technology preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the 2G/3G Band preferences by using a bit mask.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetBandPreferences
(
    BandBitMask bandMask IN ///< Bit mask for 2G/3G Band preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Bit mask for 2G/3G Band preferences.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetBandPreferences
(
    BandBitMask bandMaskPtr OUT ///< Bit mask for 2G/3G Band preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the LTE Band preferences by using a bit mask.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetLteBandPreferences
(
    LteBandBitMask bandMask IN ///< Bit mask for LTE Band preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Bit mask for LTE Band preferences.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetLteBandPreferences
(
    LteBandBitMask bandMaskPtr OUT ///< Bit mask for LTE Band preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the TD-SCDMA Band preferences by using a bit mask.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetTdScdmaBandPreferences
(
    TdScdmaBandBitMask bandMask IN ///< Bit mask for TD-SCDMA Band preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Bit mask for TD-SCDMA Band preferences.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetTdScdmaBandPreferences
(
    TdScdmaBandBitMask bandMaskPtr OUT ///< Bit mask for TD-SCDMA Band preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Add a preferred operator by specifying the MCC/MNC and the Radio Access Technology.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t AddPreferredOperator
(
    string     mcc[MCC_LEN]  IN,   ///< Mobile Country Code
    string     mnc[MNC_LEN]  IN,   ///< Mobile Network Code
    RatBitMask ratMask IN          ///< Bit mask for the Radio Access Technology preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Remove a preferred operator by specifying the MCC/MNC.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note If one code is too long (max 3 digits), it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RemovePreferredOperator
(
    string     mcc[MCC_LEN]  IN,     ///< Mobile Country Code
    string     mnc[MNC_LEN]  IN      ///< Mobile Network Code
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to retrieve a list of the preferred operators.
 *
 * @return
 * - Reference to the List object.
 * - Null pointer if there is no preferences.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION PreferredOperatorList GetPreferredOperatorsList
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the first Operator object reference in the list of the
 * preferred operators retrieved with le_mrc_GetPreferredOperators().
 *
 * @return
 *  - NULL                          No operator information found.
 *  - le_mrc_PreferredOperatorRef   The Operator object reference.
 *
 * @note If the caller is passing a bad reference into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION PreferredOperator GetFirstPreferredOperator
(
    PreferredOperatorList  preferredOperatorListRef ///< The list of the preferred operators.
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the next Operator object reference in the list of the
 * preferred operators retrieved with le_mrc_GetPreferredOperators().
 *
 * @return
 *  - NULL                          No operator information found.
 *  - le_mrc_PreferredOperatorRef   The Operator object reference.
 *
 * @note If the caller is passing a bad reference into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION PreferredOperator GetNextPreferredOperator
(
    PreferredOperatorList  preferredOperatorListRef ///< The list of the preferred operators.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to delete the list of the preferred operators retrieved with
 * le_mrc_GetPreferredOperators().
 *
 * @note On failure, the process exits, so you don't have to worry about checking the returned
 *       reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION void DeletePreferredOperatorsList
(
    PreferredOperatorList  preferredOperatorListRef ///< The list of the preferred operators.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Operator information details.
 *
 * @return LE_FAULT  Function failed.
 * @return LE_OK     Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetPreferredOperatorDetails
(
    PreferredOperator  preferredOperatorRef, ///< Operator object reference.
    string             mccPtr[MCC_LEN] OUT,  ///< Mobile Country Code.
    string             mncPtr[MNC_LEN] OUT,  ///< Mobile Network Code.
    RatBitMask         ratMask   OUT         ///< Bit mask for the RAT preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the network registration state.
 *
 * @return LE_FAULT         The function failed to get the Network registration state.
 * @return LE_BAD_PARAMETER A bad parameter was passed.
 * @return LE_OK            The function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetNetRegState
(
    NetRegState state OUT  ///< Network Registration state.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the signal quality.
 *
 * @return LE_FAULT         The function failed to get the Signal Quality information.
 * @return LE_BAD_PARAMETER A bad parameter was passed.
 * @return LE_OK            The function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSignalQual
(
    uint32 quality OUT      ///< [OUT] Received signal strength quality (0 = no signal strength,
                            ///<        5 = very good signal strength).
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the power of the Radio Module.
 *
 * @return LE_BAD_PARAMETER Bad power mode specified.
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetRadioPower
(
    le_onoff_t power ///< The power state.
);

//--------------------------------------------------------------------------------------------------
/**
 * Must be called to get the Radio Module power state.
 *
 * @return LE_FAULT         The function failed to get the Radio Module power state.
 * @return LE_BAD_PARAMETER if powerPtr is NULL.
 * @return LE_OK            The function succeed.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetRadioPower
(
    le_onoff_t power OUT ///< Power state.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to register on a cellular network [mcc;mnc]
 *
 * @return LE_FAULT         The function failed to register on the network.
 * @return LE_BAD_PARAMETER A bad parameter was passed.
 * @return LE_OK            The function succeeded.
 *
 * @note If one code is too long (max 3 digits), it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RegisterCellularNetwork
(
    string mcc[MCC_LEN] IN,   ///< Mobile Country Code
    string mnc[MNC_LEN] IN    ///< Mobile Network Code
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to perform a cellular network scan.
 *
 * @return
 *      Reference to the List object. Null pointer if the scan failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION ScanInformationList PerformCellularNetworkScan
(
    RatBitMask ratMask ///< Radio Access Technology mask
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the first Scan Information object reference in the list of
 * scan Information retrieved with le_mrc_PerformNetworkScan().
 *
 * @return NULL                         No scan information found.
 * @return le_mrc_ScanInformationRef_t  The Scan Information object reference.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION ScanInformation GetFirstCellularNetworkScan
(
    ScanInformationList  scanInformationListRef ///< The list of scan information.
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the next Scan Information object reference in the list of
 * scan Information retrieved with le_mrc_PerformNetworkScan().
 *
 * @return NULL                         No scan information found.
 * @return le_mrc_ScanInformationRef_t  The Scan Information object reference.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION ScanInformation GetNextCellularNetworkScan
(
    ScanInformationList  scanInformationListRef ///< The list of scan information.
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to delete the list of the Scan Information retrieved with
 * le_mrc_PerformNetworkScan().
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION void DeleteCellularNetworkScan
(
    ScanInformationList  scanInformationListRef ///< The list of scan information.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Cellular Network Code [mcc:mnc]
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the mcc or mnc would not fit in buffer
 *      - LE_FAULT for all other errors
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetCellularNetworkMccMnc
(
    ScanInformation scanInformationRef,     ///< Scan information reference
    string mccPtr[MCC_LEN] OUT,             ///< Mobile Country Code
    string mncPtr[MNC_LEN] OUT              ///< Mobile Network Code
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Cellular Network Name.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the operator name would not fit in buffer
 *      - LE_FAULT for all other errors
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetCellularNetworkName
(
    ScanInformation scanInformationRef,        ///< Scan information reference
    string namePtr[NETWORK_NAME_MAX_LEN] OUT   ///< Name of operator
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the radio access technology of a scanInformationRef.
 *
 * @return
 *      - the radio access technology
 *
 * @note
 *      On failure, the process exits.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Rat GetCellularNetworkRat
(
    ScanInformation scanInformationRef     ///< Scan information reference
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to check if a cellular network is currently in use.
 *
 * @return true     The network is in use
 * @return false    The network is not in use
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsCellularNetworkInUse
(
    ScanInformation scanInformationRef ///< Scan information reference
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to check if a cellular network is available.
 *
 * @return true     The network is available
 * @return false    The network is not available
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsCellularNetworkAvailable
(
    ScanInformation scanInformationRef ///< Scan information reference
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to check if a cellular network is currently in home mode.
 *
 * @return true     The network is home
 * @return false    The network is roaming
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsCellularNetworkHome
(
    ScanInformation scanInformationRef ///< Scan information reference
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to check if a cellular network is forbidden by the operator.
 *
 * @return true     The network is forbidden
 * @return false    The network is allowed
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsCellularNetworkForbidden
(
    ScanInformation scanInformationRef ///< Scan information reference
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the current network name information.
 *
 * @return
 *      - LE_OK             on success
 *      - LE_BAD_PARAMETER  if nameStr is NULL
 *      - LE_OVERFLOW       if the Home Network Name can't fit in nameStr
 *      - LE_FAULT          on any other failure
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetCurrentNetworkName
(
    string nameStr[NETWORK_NAME_MAX_LEN] OUT     ///< the home network Name
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the current network PLMN information.
 *
 * @return
 *      - LE_OK       on success
 *      - LE_FAULT    on any other failure
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetCurrentNetworkMccMnc
(
    string mccStr[MCC_LEN] OUT,     ///< the mobile country code
    string mncStr[MNC_LEN] OUT      ///< the mobile network code
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the current Radio Access Technology in use.
 *
 * @return LE_FAULT         Function failed to get the Radio Access Technology.
 * @return LE_BAD_PARAMETER A bad parameter was passed.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetRadioAccessTechInUse
(
    le_mrc_Rat_t   rat  OUT     ///< The Radio Access Technology.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to retrieve the Neighboring Cells information. It creates and
 * returns a reference to the Neighboring Cells information.
 *
 * @return A reference to the Neighboring Cells information.
 * @return NULL if no Cells Information are available.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION NeighborCells GetNeighborCellsInfo
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to delete the Neighboring Cells information.
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION DeleteNeighborCellsInfo
(
    NeighborCells ngbrCellsRef IN  ///< The Neighboring Cells reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the first Cell Information reference in the list of
 * Neighboring Cells information retrieved with le_mrc_GetNeighborCellsInfo().
 *
 * @return NULL                   No Cell information object found.
 * @return le_mrc_CellInfoRef_t   The Cell information object reference.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION CellInfo GetFirstNeighborCellInfo
(
    NeighborCells ngbrCellsRef IN  ///< The Neighboring Cells reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the next Cell Information reference in the list of
 * Neighboring Cells information retrieved with le_mrc_GetNeighborCellsInfo().
 *
 * @return NULL                   No Cell information object found.
 * @return le_mrc_CellInfoRef_t   The Cell information object reference.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION CellInfo GetNextNeighborCellInfo
(
    NeighborCells ngbrCellsRef IN  ///< The Neighboring Cells reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Cell Identifier.
 *
 * @return The Cell Identifier.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION uint32 GetNeighborCellId
(
    CellInfo     ngbrCellInfoRef IN    ///< The Cell information reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Location Area Code of a cell.
 *
 * @return The Location Area Code of a cell.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION uint32 GetNeighborCellLocAreaCode
(
    CellInfo     ngbrCellInfoRef IN    ///< The Cell information reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the signal strength of a cell.
 *
 * @return The signal strength of a cell.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION int32 GetNeighborCellRxLevel
(
    CellInfo     ngbrCellInfoRef IN    ///< The Cell information reference.
);
