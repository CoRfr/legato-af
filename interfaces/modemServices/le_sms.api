//--------------------------------------------------------------------------------------------------
/**
 * @page c_sms SMS
 *
 * @ref le_sms_interface.h "API Reference"
 *
 * <HR>
 *
 * This file contains data structures and prototypes definitions for high level SMS APIs.
 *
 * SMS is a common way to communicate in the M2M world.
 *
 * It's an easy, fast way to send a small amount of data (e.g., sensor values for gas telemetry).
 * Usually, the radio module requests small power resources to send or receive a message.
 * It's often a good way to wake-up a device that was disconnected from the network or that was
 * operating in low power mode.
 *
 * @section le_sms_binding IPC interfaces binding
 *
 * All the functions of this API are provided by the @b modemService foundation service.
 *
 * Here's a code sample binding to modem services:
 * @verbatim
   bindings:
   {
      clientExe.clientComponent.le_sms -> modemService.le_sms
   }
   @endverbatim
 *
 * @section le_sms_ops_creating_msg Creating a Message object
 * There are 3 kinds of supported messages: text messages, binary messages, and PDU messages.
 *
 * You must create a Message object by calling @c le_sms_Create() before using the message
 * APIs. It automatically allocates needed resources for the Message object, which is referenced by
 * @c le_sms_MsgRef_t type.
 *
 * When the Message object is no longer needed, call @c le_sms_Delete() to free all
 *  allocated resources associated with the object.
 *
 * @section le_sms_ops_deleting_msg Deleting a Message object
 * To delete a Message object, call le_sms_Delete(). This frees all the
 * resources allocated for the Message object. If several users own the Message object
 * (e.g., several handler functions registered for SMS message reception), the
 * Message object will be deleted only after the last user deletes the Message object.
 *
 * @section le_sms_ops_sending Sending a message
 * To send a message, create an @c le_sms_MsgRef_t object by calling the
 * @c le_sms_Create() function. Then, set all the needed parameters for the message:
 * - Destination telephone number with le_sms_SetDestination();
 * -  Text content with le_sms_SetText(), the total length are set as well with this API, maximum
 * 160 characters as only the 7-bit alphabet is supported.
 * - Binary content with le_sms_SetBinary(), total length is set with this API, maximum 140 bytes.
 * - PDU content with le_sms_SetPDU(), total length is set with this API, max 36 (header) + 140
 *  (payload) bytes long.
 *
 * After the Msg object is ready, call @c le_sms_Send().
 *
 * @c le_sms_Send() is a blocking function, it will return once the Modem has given back a
 * positive or negative answer to the sending operation. The return of @c le_sms_Send() API
 * provides definitive status of the sending operation.
 *
 * When a message sending has failed, call le_sms_GetErrorCode() to retrieve the 3GPP message error
 * code or le_sms_Get3GPP2ErrorCode() to retrieve the 3GPP2 message error code.
 * If LE_SMS_ERROR_3GPP_PLATFORM_SPECIFIC or LE_SMS_ERROR_3GPP2_PLATFORM_SPECIFIC values is
 * returned, call le_sms_GetPlatformSpecificErrorCode() to retrieve the platform specific error
 * code.
 *
 * @section le_sms_ops_async_sending Sending asynchronously a message.
 *
 * A text message can be sent with one simple function: le_sms_SendText(). You only have to pass
 *  the three following parameters:
 *
 * - the destination telephone number.
 * - the text message, the total length are set as well with this function, maximum 160
 * characters as only the 7-bit alphabet is supported.
 * - the callback function to get a notification indicating the sending result: LE_SMS_SENT or
 *  LE_SMS_SENDING_FAILED..
 *
 * A PDU message can be sent using the le_sms_SendPdu() functions. The parameters to give are:
 * - the PDU content, total length is set with this API, maximum 176 bytes long = 36 (header) +
 *  140 (payload).
 * - the callback function to get a notification indicating the sending result: LE_SMS_SENT or
 *  LE_SMS_SENDING_FAILED.
 *
 * When a message sending has failed, call le_sms_GetErrorCode() to retrieve the 3GPP message error
 * code or le_sms_Get3GPP2ErrorCode() to retrieve the 3GPP2 message error code.
 * If LE_SMS_ERROR_3GPP_PLATFORM_SPECIFIC or LE_SMS_ERROR_3GPP2_PLATFORM_SPECIFIC values is
 * returned, call le_sms_GetPlatformSpecificErrorCode() to retrieve the platform specific error
 * code.
 *
 * Message object is never deleted regardless of the sending result. Caller has to
 * delete it.
 *
 * @code
 *
 * [...]
 *
 * le_sms_MsgRef_t myTextMsg;
 *
 * // Create a Message Object
 * myTextMsg = le_sms_Create();
 *
 * // Set the telephone number
 * le_sms_SetDestination(myTextMsg, "+33606060708");
 *
 * // Set the message text
 * le_sms_SetText(myTextMsg, "Hello, this is a Legato SMS message");
 *
 * // Send the message
 * le_sms_Send(myTextMsg);
 *
 * // Delete the message
 * le_sms_Delete(myTextMsg);
 *
 * @endcode
 *
 * @section le_sms_ops_receiving Receiving a message
 * To receive SMS messages, register a handler function to obtain incoming
 * messages. Use @c le_sms_AddRxMessageHandler() to register that handler.
 *
 * The handler must satisfy the following prototype:
 * @c typedef void (*le_sms_RxMessageHandlerFunc_t)(le_sms_MsgRef_t msg).
 *
 * When a new incoming message is received, a Message object is automatically created and the
 * handler is called. This Message object is Read-Only, any calls of a le_sms_SetXXX API will
 * return a LE_NOT_PERMITTED error.
 *
 * Use the following APIs to retrieve message information and data from the Message
 * object:
 * - le_sms_GetFormat() - determine if it is a binary or a text message.
 * - le_sms_GetSenderTel() - get the sender's Telephone number.
 * - le_sms_GetTimeStamp() - get the timestamp sets by the Service Center.
 * - le_sms_GetUserdataLen() - get the message content (text or binary) length.
 * - le_sms_GetPDULen() - get the PDU message .
 * - le_sms_GetText() - get the message text.
 * - le_sms_GetBinary() - get the message binary content.
 * - le_sms_GetPDU() - get the message PDU data.
 *
 * @note  - If two (or more) registered handler functions exist, they are
 * all called and get a different message object reference.
 *
 * @note  - For incoming SMS, format returned by le_sms_GetFormat is never LE_SMS_FORMAT_PDU.
 *
 * @note - 16 bit UCS2 format is not supported.
 *
 * If a succession of messages is received, a new Message object is created for each, and
 * the handler is called for each new message.
 *
 * Uninstall the handler function by calling @c le_sms_RemoveRxMessageHandler().
 * @note @c le_sms_RemoveRxMessageHandler() API does not delete the Message Object.
 *  The caller has to delete it.
 *
 * @code
 *
 *
 * [...]
 *
 * // Handler function for message reception
 * static void myMsgHandler
 * (
 *      le_sms_MsgRef_t msgRef,
 *      void*           contextPtr*
 * )
 * {
 *     char   tel[LE_SMS_TEL_NMBR_MAX_BYTES];
 *     char   text[LE_SMS_TEXT_MAX_BYTES];
 *
 *     if (le_sms_GetFormat(msgRef) == LE_SMS_FORMAT_TEXT)
 *     {
 *         le_sms_GetSenderTel(msgRef, tel, sizeof(tel));
 *         le_sms_GetText(msgRef, text, sizeof(text));
 *
 *         LE_INFO(" A new text message has been received !");
 *         LE_INFO(" From tel.%s, text: \"%s\"", tel, text);
 *     }
 *     else
 *     {
 *         LE_INFO(" I support only text messages !");
 *     }
 * }
 *
 *
 * [...]
 * // In the main function:
 *
 * le_sms_RxMessageHandlerRef_t HdlrRef;
 *
 * // Add an handler function to handle message reception
 * HdlrRef=le_sms_AddRxMessageHandler(myMsgHandler);
 *
 * [...]
 *
 * // Remove Handler entry
 * le_sms_RemoveRxMessageHandler(HdlrRef);
 *
 * [...]
 *
 * @endcode
 *
 * @section le_sms_ops_listing Listing  messages recorded in storage area
 *
 * Call @c le_sms_CreateRxMsgList() to create a List object that lists the received
 * messages present in the storage area, which is referenced by @c le_sms_MsgListRef_t
 * type.
 *
 * If messages are not present, the le_sms_CreateRxMsgList() returns NULL.
 *
 * Once the list is available, call @c le_sms_GetFirst() to get the first
 * message from the list, and then call @c le_sms_GetNext() API to get the next message.
 *
 * Call @c le_sms_DeleteList() to free all allocated
 *  resources associated with the List object.
 *
 * Call @c le_sms_GetStatus() to read the status of a message (Received
 * Read, Received Unread).
 *
 * To finish, you can also modify the received status of a message with
 * @c le_sms_MarkRead() and @c le_sms_MarkUnread().
 *
 * @section le_sms_ops_deleting Deleting a message from the storage area
 *
 * @c le_sms_DeleteFromStorage() deletes the message from the storage area. Message is
 * identified with @c le_sms_MsgRef_t object. The API returns an error if the message is not found
 * in the storage area.
 *
 * @note If several users own the Message object on new reception
 * (e.g., several handler functions registered for SMS message reception), the
 * Message will be deleted from the storage area only after the last user deletes
 * the Message object reference (not necessary from storage). API returns always LE_OK in this case.
 *
 * @note If one client creates a list and deletes all sms from storage, other clients wonâ€™t see sms
 *  stored If they have not created a sms list too. Sms List creation locks and
 *   delays sms deletion from storage until all references have been deleted.
 *
 *
 * @section le_sms_ops_configuration SMS configuration
 *
 *  Modem SMS Center Address can be set or get with le_sms_SetSmsCenterAddress() and
 *   le_sms_GetSmsCenterAddress() functions
 *
 * @section le_sms_ops_samples Sample codes
 * A sample code that implements a function for Mobile Originated SMS message can be found in
 * \b smsMO.c file (please refer to @ref c_smsSampleMO page).
 *
 * A sample code that implements a function for Mobile Terminated SMS message can be found in
 * \b smsMT.c file (please refer to @ref c_smsSampleMT page).
 *
 * These two samples can be easily compiled and run into the \b sms app, to install and use
 * this app:
 *
   @verbatim
   $ make ar7
   $ bin/instapp  build/ar7/bin/samples/sms.ar7 <ipaddress>
   @endverbatim
 * where ipaddress is the address of your target device.
 *
 * Then on your target, just run:
   @verbatim
   $ app start sms
   @endverbatim
 *
 * The sample replies to the sender by the message "Message from <phone number> received". Where
 * "phone number" is the sender's phone number.
 *
 * Sample code for that application can be seen in the following pages:
 * - @subpage c_smsSampleMO <br>
 * - @subpage c_smsSampleMT
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * @file le_sms_interface.h
 *
 * Legato @ref c_sms include file.
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------

/**
 * @page c_smsSampleMO Sample code for Mobile Originated SMS message
 *
 * @include "apps/sample/sms/smsClient/smsMO.c"
 */

/**
 * @page c_smsSampleMT Sample code for Mobile Terminated SMS message
 *
 * @include "apps/sample/sms/smsClient/smsMT.c"
 */

USETYPES le_mdmDefs.api;

//--------------------------------------------------------------------------------------------------
/**
 * Time stamp string length.
 * The string format is "yy/MM/dd,hh:mm:ss+/-zz" (Year/Month/Day,Hour:Min:Seconds+/-TimeZone).
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  TIMESTAMP_MAX_LEN   = (20);

//--------------------------------------------------------------------------------------------------
/**
 * Time stamp string length (including the null-terminator).
 */
//--------------------------------------------------------------------------------------------------
DEFINE  TIMESTAMP_MAX_BYTES = (TIMESTAMP_MAX_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * The text message can be up to 160 characters long.
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  TEXT_MAX_LEN    = (160);

//--------------------------------------------------------------------------------------------------
/**
 * Test message string length (including the null-terminator).
 */
//--------------------------------------------------------------------------------------------------
DEFINE  TEXT_MAX_BYTES  = (TEXT_MAX_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * The raw binary message can be up to 140 bytes long.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  BINARY_MAX_BYTES  = (140);

//--------------------------------------------------------------------------------------------------
/**
 * The PDU payload bytes long.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  PDU_MAX_PAYLOAD = (140);

//--------------------------------------------------------------------------------------------------
/**
 * The PDU message can be up to 36 (header) + 140 (payload) bytes long.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  PDU_MAX_BYTES     = (36+PDU_MAX_PAYLOAD);

//--------------------------------------------------------------------------------------------------
/**
 * Message Format.
 */
//--------------------------------------------------------------------------------------------------
ENUM Format
{
    FORMAT_PDU,       ///< PDU message format.
    FORMAT_TEXT,      ///< Text message format.
    FORMAT_BINARY,    ///< Binary message format.
    FORMAT_UNKNOWN    ///< Unknown message format.
};

//--------------------------------------------------------------------------------------------------
/**
 * Message Status.
 */
//--------------------------------------------------------------------------------------------------
ENUM Status
{
    RX_READ,        ///< Message present in the message storage has been read.
    RX_UNREAD,      ///< Message present in the message storage has not been read.
    STORED_SENT,    ///< Message saved in the message storage has been sent.
    STORED_UNSENT,  ///< Message saved in the message storage has not been sent.
    SENT,           ///< Message has been sent.
    SENDING,        ///< Message has been in the sending pool.
    UNSENT,         ///< Message has not been sent.
    SENDING_FAILED, ///< Message sending has Failed.
    STATUS_UNKNOWN  ///< Unknown message status.
};

//--------------------------------------------------------------------------------------------------
/**
 * 3GPP2 Message Error code when the message sending has failed.
 */
//--------------------------------------------------------------------------------------------------
ENUM ErrorCode3GPP2
{
    ////< SMS Cause code specified in the 3GPP2 N.S0005-0 section 6.5.2.125
    ERROR_ADDR_VACANT,                   ///< The SMS Destination Address is valid but is not.
                                         ///<  currently allocated to an SMS terminal.
    ERROR_ADDR_TRANSLATION_FAILURE,      ///< The SMS Destination Address is invalid.
    ERROR_NETWORK_RESOURCE_SHORTAGE,     ///< The network transmission failed due to lack of
                                         ///<  a network resource or link capacity.
    ERROR_NETWORK_FAILURE,               ///< A network node failed, a link failed, or a
                                         ///< required operation failed.
    ERROR_INVALID_TELESERVICE_ID,        ///< The SMS_TeleserviceIdentifier is not known, is
                                         ///<  not supported, or is not authorized by an
                                         ///<  addressed functional entity.
    ERROR_NETWORK_OTHER,                 ///< A network problem other than identified above.
    ERROR_NO_PAGE_RESPONSE,              ///< The addressed MS-based SME is known, but it
                                         ///<  does not respond to a page.
    ERROR_DEST_BUSY,                     ///< The destination MS-based SME is SMS capable,
                                         ///<  but is currently engaged in a call, a service,
                                         ///<  or a call mode that precludes the use of SMS,
                                         ///<  or the destination SME is congested.
    ERROR_NO_ACK,                        ///< The destination SME does not acknowledge receipt
                                         ///<  of the SMS delivery.
    ERROR_DEST_RESOURCE_SHORTAGE,        ///< A required terminal resource is not available to
                                         ///<  process this message.
    ERROR_SMS_DELIVERY_POSTPONED,        ///< Delivery is not currently possible.
    ERROR_DEST_OUT_OF_SERV,              ///< The addressed destination is out of
                                         ///<  service for an extended period of time.
    ERROR_DEST_NOT_AT_ADDR,              ///< The MS-based SME is no longer at the
                                         ///< temporary SMS routing address.
    ERROR_DEST_OTHER,                    ///< A terminal problem other than described above.
    ERROR_RADIO_IF_RESOURCE_SHORTAGE,    ///< There is no channel available or there is
                                         ///< radio congestion at this time.
    ERROR_RADIO_IF_INCOMPATABILITY,      ///< The MS for an MS-based SME is operating in a
                                         ///<  mode that does not support SMS at this time.
    ERROR_RADIO_IF_OTHER,                ///< A radio interface problem to an MS-based SME
                                         ///<  other than described above.
    ERROR_ENCODING,                      ///< The size of a parameter or field is not
                                         ///<  what is expected.
    ERROR_SMS_ORIG_DENIED,               ///< The originating MIN is not recognized.
    ERROR_SMS_TERM_DENIED,               ///< The destination is not authorized to receive
                                         ///<  the SMS message.
    ERROR_SUPP_SERV_NOT_SUPP,            ///< The originating supplementary service is
                                         ///<  not known or supported.
    ERROR_SMS_NOT_SUPP,                  ///< The originating supplementary service is
                                         ///<  not known or supported.
    ERROR_MISSING_EXPECTED_PARAM,        ///< An optional parameter that is required
                                         ///<  for a particular function.
    ERROR_MISSING_MAND_PARAM,            ///< A parameter is missing that is mandatory.
                                         ///< for a particular message.
    ERROR_UNRECOGNIZED_PARAM_VAL,        ///< A known parameter has an unknown or
                                         ///<  unsupported value.
    ERROR_UNEXPECTED_PARAM_VAL,          ///< A known parameter has a known but unexpected
                                         ///<  value.
    ERROR_USER_DATA_SIZE_ERR,            ///< The User Data size is too large for access
                                         ///< technology, transport network, or call
                                         ///< mode, etc
    ERROR_GENERAL_OTHER,                 ///< Other general problems.

    ERROR_3GPP2_PLATFORM_SPECIFIC,       ///< Platform specific code.
    ERROR_3GPP2_MAX                      ///< Undefined reason.
};



//--------------------------------------------------------------------------------------------------
/**
 * Message Error code when the message sending has failed.
 */
//--------------------------------------------------------------------------------------------------
ENUM ErrorCode
{
    ////< Radio Protocol error codes specified in The 3GPP 24.011 ANEXE E Cause definition.
    RP_ERROR_UNASSIGNED_NUMBER,               ///< Unassigned (unallocated) number
    RP_ERROR_OPERATOR_DETERMINED_BARRING,     ///< Operator determined barring
    RP_ERROR_CALL_BARRED,                     ///< Call barred
    RP_ERROR_RESERVED,                        ///< Reserved
    RP_ERROR_SMS_TRANSFER_REJECTED,           ///< Short message transfer rejected
    RP_ERROR_MEMORY_CAP_EXCEEDED,             ///< Memory capacity exceeded
    RP_ERROR_DESTINATION_OUT_OF_ORDER,        ///< Destination out of order
    RP_ERROR_UNIDENTIFIED_SUBSCRIBER,         ///< Unidentified subscriber
    RP_ERROR_FACILITY_REJECTED,               ///< Facility rejected
    RP_ERROR_UNKNOWN_SUBSCRIBER,              ///< Unknown subscriber
    RP_ERROR_NETWORK_OUT_OF_ORDER,            ///< Network out of order
    RP_ERROR_TEMPORARY_FAILURE,               ///< Temporary failure
    RP_ERROR_CONGESTION,                      ///< Congestion
    RP_ERROR_RESOURCES_UNAVAILABLE,           ///< Resources unavailable, unspecified
    RP_ERROR_REQUESTED_FACILITY_NOT_SUBSCRIBED,    ///< Resources facility not subscribed
    RP_ERROR_REQUESTED_FACILITY_NOT_IMPLEMENTED,   ///< Resources facility not implemented
    RP_ERROR_INVALID_SMS_TRANSFER_REFERENCE_VALUE, ///< Invalid short message transfer
                                                   ///<  reference value
    RP_ERROR_SEMANTICALLY_INCORRECT_MESSAGE,  ///< Sementically incorect message
    RP_ERROR_INVALID_MANDATORY_INFO,          ///< Invalid mandatory information
    RP_ERROR_MESSAGE_TYPE_NOT_IMPLEMENTED,    ///< Message type nonexistent or not implemented
    RP_ERROR_MESSAGE_NOT_COMPATABLE_WITH_SMS, ///< Message not compatible with short message
                                              ///<  protocol state
    RP_ERROR_INFO_ELEMENT_NOT_IMPLEMENTED,    ///< Information element nonexistent
                                              ///<   or not implemented
    RP_ERROR_PROTOCOL_ERROR,                  ///< Protocol error, unspecified
    RP_ERROR_INTERWORKING,                    ///< Interworking, unspecified

    ////< Transfer Protocol error codes specified in The 3GPP 23.040 9.2.3.22 TP-Failure-Causes.
    TP_ERROR_TELE_INTERWORKING_NOT_SUPPORTED,      ///< Telematic interworking not supported
    TP_ERROR_SHORT_MESSAGE_TYPE_0_NOT_SUPPORTED,   ///< Short Message Type 0 not supported
    TP_ERROR_SHORT_MESSAGE_CANNOT_BE_REPLACED,     ///< Cannot replace short message
    TP_ERROR_UNSPECIFIED_PID_ERROR,                ///< Unspecified TP-PID error
    TP_ERROR_DCS_NOT_SUPPORTED,                    ///< Data coding scheme (alphabet)
                                                   ///<  not supported
    TP_ERROR_MESSAGE_CLASS_NOT_SUPPORTED,          ///< Message class not supported
    TP_ERROR_UNSPECIFIED_DCS_ERROR,                ///< Unspecified TP-DCS error
    TP_ERROR_COMMAND_CANNOT_BE_ACTIONED,           ///< Command cannot be actioned
    TP_ERROR_COMMAND_UNSUPPORTED,                  ///< Command unsupported
    TP_ERROR_UNSPECIFIED_COMMAND_ERROR,            ///< Unspecified TP-Command error
    TP_ERROR_TPDU_NOT_SUPPORTED,                   ///< TPDU not supported
    TP_ERROR_SC_BUSY,                              ///< SC busy
    TP_ERROR_NO_SC_SUBSCRIPTION,                   ///< No SC subscription
    TP_ERROR_SC_SYS_FAILURE,                       ///< SC system failure
    TP_ERROR_INVALID_SME_ADDRESS,                  ///< Invalid SME address
    TP_ERROR_DESTINATION_SME_BARRED,               ///< Destination SME barred
    TP_ERROR_SM_REJECTED_OR_DUPLICATE,             ///< SM Rejected-Duplicate SM
    TP_ERROR_TP_VPF_NOT_SUPPORTED,                 ///< TP-VPF not supported
    TP_ERROR_TP_VP_NOT_SUPPORTED,                  ///< TP-VP not supporte
    TP_ERROR_SIM_SMS_STORAGE_FULL,                 ///< (U)SIM SMS storage full
    TP_ERROR_NO_SMS_STORAGE_CAP_IN_SIM,            ///< No SMS storage capability in (U)SIM
    TP_ERROR_MS_ERROR,                             ///< Error in MS
    TP_ERROR_MEMORY_CAP_EXCEEDED,                  ///< Memory capacity exceeded
    TP_ERROR_SIM_APP_TOOLKIT_BUSY,                 ///< (U)SIM Application Toolkit busy
    TP_ERROR_SIM_DATA_DOWNLOAD_ERROR,              ///< (U)SIM data download error
    TP_ERROR_UNSPECIFIED_ERROR,                    ///< Unspecified error cause

    ERROR_3GPP_PLATFORM_SPECIFIC,                  ///< Platform specific code.
    ERROR_3GPP_MAX                                 ///< Undefined reason.
};


//--------------------------------------------------------------------------------------------------
// Other new type definitions.
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * Declare a reference type for referring to SMS Message objects.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Msg;


//--------------------------------------------------------------------------------------------------
/**
 * Opaque type for SMS Message Listing.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE MsgList;


//--------------------------------------------------------------------------------------------------
/**
 * Handler for Sending result.
 */
//--------------------------------------------------------------------------------------------------
HANDLER CallbackResult
(
    Msg msgRef,           ///< Reference to the message object.
    Status status IN      ///< Status result.
);


//--------------------------------------------------------------------------------------------------
/**
 * Handler for New Message.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER RxMessageHandler
(
    Msg  msgRef ///< Message reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on new received messages.
 *
 */
//--------------------------------------------------------------------------------------------------
EVENT RxMessage
(
    handler RxMessageHandler
);


//--------------------------------------------------------------------------------------------------
/**
 * Create an SMS Message data structure.
 *
 * @return Reference to the new Message object.
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Msg Create
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the Telephone destination number.
 *
 * Telephone number is defined in ITU-T recommendations E.164/E.163.
 * E.164 numbers can have a maximum of fifteen digits and are usually written with a '+' prefix.
 *
 * @return LE_NOT_PERMITTED Message is Read-Only.
 * @return LE_BAD_PARAMETER Telephone destination number length is equal to zero.
 * @return LE_OK            Function succeeded.
 *
 * @note If telephone destination number is too long (max 17 digits), it is a fatal
 *       error, the function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetDestination
(
    Msg     msgRef ,                              ///< Reference to the message object.
    string  dest[le_mdmDefs.PHONE_NUM_MAX_LEN] IN ///< Telephone number string.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to set the Text Message content.
 *
 * @return LE_NOT_PERMITTED Message is Read-Only.
 * @return LE_BAD_PARAMETER Text message length is equal to zero.
 * @return LE_OK            Function succeeded.
 *
 * @note If message is too long (max 160 digits), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetText
(
    Msg     msgRef,                 ///< Reference to the message object.
    string  text[TEXT_MAX_LEN] IN   ///< SMS text.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the binary message content.
 *
 * @return LE_NOT_PERMITTED Message is Read-Only.
 * @return LE_BAD_PARAMETER Length of the data is equal to zero.
 * @return LE_OK            Function succeeded.
 *
 * @note If len is too long (max 140 bytes), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetBinary
(
    Msg     msgRef,                 ///< Reference to the message object.
    uint8   bin[BINARY_MAX_BYTES] IN  ///< Binary data.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the PDU message content.
 *
 * @return LE_NOT_PERMITTED Message is Read-Only.
 * @return LE_BAD_PARAMETER Length of the data is equal to zero.
 * @return LE_OK            Function succeeded.
 *
 * @note If len is too long (max 176 bytes), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetPDU
(
    Msg     msgRef,               ///< Reference to the message object.
    uint8   pdu[PDU_MAX_BYTES] IN ///< PDU message.
);

//--------------------------------------------------------------------------------------------------
/**
 * Send an SMS message.
 *
 * Verifies first if the parameters are valid, then it checks the modem state can support
 * message sending.
 *
 * @return LE_FORMAT_ERROR  Message content is invalid.
 * @return LE_FAULT         Function failed to send the message.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Send
(
    Msg msgRef ///< Reference to the message object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the error code when a 3GPP2 message sending has Failed.
 *
 * @return The error code
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 *
 * @note It is only applicable for 3GPP2 message sending failure, otherwise
 *       LE_SMS_ERROR_3GPP2_MAX is returned.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION ErrorCode3GPP2 Get3GPP2ErrorCode
(
    Msg msgRef IN            ///< Reference to the message object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Radio Protocol and the Transfer Protocol error code when a 3GPP message sending has
 * failed.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 *
 * @note It is only applicable for 3GPP message sending failure, otherwise
 *       LE_SMS_ERROR_3GPP_MAX is returned.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION void GetErrorCode
(
    Msg msgRef IN,            ///< Reference to the message object.
    ErrorCode  rpCause OUT,   ///< Radio Protocol cause code.
    ErrorCode  tpCause OUT    ///< Transfer Protocol cause code.
);

//--------------------------------------------------------------------------------------------------
/**
 * Called to get the platform specific error code.
 *
 * @return The platform specific error code.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION int32 GetPlatformSpecificErrorCode
(
    Msg msgRef IN            ///< Reference to the message object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Create and asynchronously send a text message.
 *
 * @return
 *  - le_sms_Msg Reference to the new Message object pooled.
 *  - NULL Not possible to pool a new message.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Msg SendText
(
    string   destStr[le_mdmDefs.PHONE_NUM_MAX_LEN] IN, ///< Telephone number string.
    string   textStr[TEXT_MAX_LEN] IN,                 ///< SMS text.
    handler  CallbackResult                            ///< CallBack for sending result.
);

//--------------------------------------------------------------------------------------------------
/**
 * Create and asynchronously send a PDU message.
 *
 * @return
 *  - le_sms_Msg Reference to the new Message object pooled.
 *  - NULL Not possible to pool a new message.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Msg SendPdu
(
    uint8    pdu[PDU_MAX_BYTES] IN,                    ///< PDU message.
    handler  CallbackResult                            ///< CallBack for sending result.
);

//--------------------------------------------------------------------------------------------------
/**
 * Delete a Message data structure.
 *
 * It deletes the Message data structure and all the allocated memory is freed. If several
 * users own the Message object (e.g., several handler functions registered for
 * SMS message reception), the Message object will only be deleted if one User
 * owns the Message object.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Delete
(
    Msg msgRef ///< Reference to the message object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the message format.
 *
 * @return Message format.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 *
 * @note For incoming SMS, format returned by le_sms_GetFormat is never LE_SMS_FORMAT_PDU.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_sms_Format_t GetFormat
(
    Msg msgRef ///< Reference to the message object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Sender Telephone number.
 *
 * Output parameter is updated with the Telephone number. If the Telephone number string exceeds
 * the value of 'len' parameter,  LE_OVERFLOW error code is returned and 'tel' is filled until
 * 'len-1' characters and a null-character is implicitly appended at the end of 'tel'.
 *
 * @return LE_NOT_PERMITTED Message is not a received message.
 * @return LE_OVERFLOW      Telephone number length exceed the maximum length.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSenderTel
(
    Msg     msgRef,                               ///< Reference to the message object.
    string  tel[le_mdmDefs.PHONE_NUM_MAX_LEN] OUT ///< Telephone number string.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Service Center Time Stamp string.
 *
 * Output parameter is updated with the Time Stamp string. If the Time Stamp string exceeds the
 * value of 'len' parameter, a LE_OVERFLOW error code is returned and 'timestamp' is filled until
 * 'len-1' characters and a null-character is implicitly appended at the end of 'timestamp'.
 *
 * @return LE_NOT_PERMITTED Message is not a received message.
 * @return LE_OVERFLOW      Timestamp number length exceed the maximum length.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetTimeStamp
(
    Msg     msgRef,                          ///< Reference to the message object.
    string  timestamp[TIMESTAMP_MAX_LEN] OUT ///< Message time stamp (in text mode).
                                             ///<      string format: "yy/MM/dd,hh:mm:ss+/-zz"
                                             ///<      (Year/Month/Day,Hour:Min:Seconds+/-TimeZone)
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the message Length value.
 *
 * @return Number of characters for text messages, or the length of the data in bytes for raw
 *         binary messages.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION size_t GetUserdataLen
(
    Msg msgRef ///< Reference to the message object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the text Message.
 *
 * Output parameter is updated with the text string. If the text string exceedS the
 * value of 'len' parameter,  LE_OVERFLOW error code is returned and 'text' is filled until
 * 'len-1' characters and a null-character is implicitly appended at the end of 'text'.
 *
 * @return LE_OVERFLOW      Message length exceed the maximum length.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetText
(
    Msg     msgRef,                 ///< Reference to the message object.
    string  text[TEXT_MAX_LEN] OUT  ///< SMS text.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the binary Message.
 *
 * Output parameters are updated with the binary message content and the length of the raw
 * binary message in bytes. If the binary data exceed the value of 'len' input parameter, a
 * LE_OVERFLOW error code is returned and 'raw' is filled until 'len' bytes.
 *
 * @return LE_FORMAT_ERROR  Message is not in binary format
 * @return LE_OVERFLOW      Message length exceed the maximum length.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetBinary
(
    Msg     msgRef,                 ///< Reference to the message object.
    uint8   bin[BINARY_MAX_BYTES] OUT ///< Binary message.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the PDU message.
 *
 * Output parameters are updated with the PDU message content and the length of the PDU message
 * in bytes. If the PDU data exceed the value of 'len' input parameter, a LE_OVERFLOW error code is
 * returned and 'pdu' is filled until 'len' bytes.
 *
 * @return LE_FORMAT_ERROR  Unable to encode the message in PDU.
 * @return LE_OVERFLOW      Message length exceed the maximum length.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetPDU
(
    Msg   msgRef,               ///< Reference to the message object.
    uint8 pdu[PDU_MAX_BYTES] OUT  ///< PDU message.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the message Length value.
 *
 * @return Length of the data in bytes of the PDU message.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION size_t GetPDULen
(
    Msg msgRef ///< Reference to the message object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Delete an SMS message from the storage area.
 *
 * Verifies first if the parameter is valid, then it checks the modem state can support
 * message deleting.
 *
 * @return LE_FAULT         Function failed to perform the deletion.
 * @return LE_NO_MEMORY     Message storage is not available.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DeleteFromStorage
(
    Msg msgRef ///< Reference to the message object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Create an object's reference of the list of received messages
 * saved in the SMS message storage area.
 *
 * @return
 *      Reference to the List object. Null pointer if no messages have been retrieved.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION MsgList CreateRxMsgList
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Delete the list of the Messages retrieved from the message
 * storage.
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION void DeleteList
(
    MsgList msgListRef ///< Messages list.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the first Message object reference in the list of messages
 * retrieved with le_sms_CreateRxMsgList().
 *
 * @return NULL              No message found.
 * @return Msg  Message object reference.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Msg GetFirst
(
    MsgList msgListRef ///< Messages list.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the next Message object reference in the list of messages
 * retrieved with le_sms_CreateRxMsgList().
 *
 * @return NULL              No message found.
 * @return Msg  Message object reference.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Msg GetNext
(
    MsgList msgListRef ///< Messages list.
);

//--------------------------------------------------------------------------------------------------
/**
 * Read the Message status (Received Read, Received Unread, Stored
 * Sent, Stored Unsent).
 *
 * @return Status of the message.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_sms_Status_t GetStatus
(
    Msg msgRef ///< Messages list.
);

//--------------------------------------------------------------------------------------------------
/**
 * Mark a message as 'read'.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION void MarkRead
(
    Msg msgRef ///< Messages list.
);

//--------------------------------------------------------------------------------------------------
/**
 * Mark a message as 'unread'.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION void MarkUnread
(
    Msg msgRef ///< Messages list.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the SMS center address.
 *
 * Output parameter is updated with the SMS Service center address. If the Telephone number string exceeds
 * the value of 'len' parameter,  LE_OVERFLOW error code is returned and 'tel' is filled until
 * 'len-1' characters and a null-character is implicitly appended at the end of 'tel'.
 *
 * @return
 *  - LE_FAULT         Service is not available.
 *  - LE_OVERFLOW      Telephone number length exceed the maximum length.
 *  - LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSmsCenterAddress
(
    string          tel[le_mdmDefs.PHONE_NUM_MAX_LEN] OUT    ///< SMS center address number string.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the SMS center address.
 *
 * SMS center address number is defined in ITU-T recommendations E.164/E.163.
 * E.164 numbers can have a maximum of fifteen digits and are usually written with a '+' prefix.
 *
 * @return
 *  - LE_FAULT         Service is not available..
 *  - LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetSmsCenterAddress
(
    string          tel[le_mdmDefs.PHONE_NUM_MAX_LEN] IN    ///< SMS center address number string.
);
