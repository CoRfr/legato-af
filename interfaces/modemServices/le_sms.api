/**
 * @page c_sms SMS
 *
 * @ref le_sms_interface.h "API reference"
 *
 * <HR>
 *
 * This file contains data structures and prototypes definitions for high level SMS APIs.
 *
 * SMS is a common way to communicate in the M2M world.
 *
 * It's an easy, fast way to send a small amount of data (e.g., sensor values for gas telemetry).
 * Usually, the radio module requests small power resources to send or receive a message.
 * It's often a good way to wake-up a device that was disconnected from the network or that was
 * operating in low power mode.
 *
 * @section le_sms_ops_creating_msg Creating a Message object
 * There are 3 kinds of supported messages: text messages, binary messages, and PDU messages.
 *
 * You must create a Message object by calling @c le_sms_Create() before using the message
 * APIs. It automatically allocates needed resources for the Message object, which is referenced by
 * @c le_sms_MsgRef_t type.
 *
 * When the Message object is no longer needed, call @c le_sms_Delete() to free all
 *  allocated resources associated with the object.
 *
 * @section le_sms_ops_deleting_msg Deleting a Message object
 * To delete a Message object, call le_sms_Delete(). This frees all the
 * resources allocated for the Message object. If several users own the Message object
 * (e.g., several handler functions registered for SMS message reception), the
 * Message object will be deleted only after the last user deletes the Message object.
 *
 * @section le_sms_ops_sending Sending a message
 * To send a message, create an @c le_sms_MsgRef_t object by calling the
 * @c le_sms_Create() function. Then, set all the needed parameters for the message:
 * - Destination telephone number with le_sms_SetDestination();
 * -  Text content with le_sms_SetText(), the total length are set as well with this API, maximum
 * 160 characters as only the 7-bit alphabet is supported.
 * - Binary content with le_sms_SetBinary(), total length is set with this API, maximum 140 bytes.
 * - PDU content with le_sms_SetPDU(), total length is set with this API, max 36 (header) + 140
 *  (payload) bytes long.
 *
 * After the Msg object is ready, call @c le_sms_Send().
 *
 * @c le_sms_Send() is a blocking function, it will return once the Modem has given back a
 * positive or negative answer to the sending operation. The return of @c le_sms_Send() API
 * provides definitive status of the sending operation.
 *
 * Message object is never deleted regardless of the sending result. Caller has to
 * delete it.
 *
 * @code
 *
 * [...]
 *
 * le_sms_MsgRef_t myTextMsg;
 *
 * // Create a Message Object
 * myTextMsg = le_sms_Create();
 *
 * // Set the telephone number
 * le_sms_SetDestination(myTextMsg, "+33606060708");
 *
 * // Set the message text
 * le_sms_SetText(myTextMsg, "Hello, this is a Legato SMS message");
 *
 * // Send the message
 * le_sms_Send(myTextMsg);
 *
 * // Delete the message
 * le_sms_Delete(myTextMsg);
 *
 * @endcode
 *
 * @section le_sms_ops_receiving Receiving a message
 * To receive SMS messages, register a handler function to obtain incoming
 * messages. Use @c le_sms_AddRxMessageHandler() to register that handler.
 *
 * The handler must satisfy the following prototype:
 * @c typedef void (*le_sms_RxMessageHandlerFunc_t)(le_sms_MsgRef_t msg).
 *
 * When a new incoming message is received, a Message object is automatically created and the
 * handler is called. This Message object is Read-Only, any calls of a le_sms_SetXXX API will
 * return a LE_NOT_PERMITTED error.
 *
 * Use the following APIs to retrieve message information and data from the Message
 * object:
 * - le_sms_GetFormat() - determine if it is a PDU, a binary or a text message.
 * - le_sms_GetSenderTel() - get the sender's Telephone number.
 * - le_sms_GetTimeStamp() - get the timestamp sets by the Service Center.
 * - le_sms_GetUserdataLen() - get the message content (text or binary) length.
 * - le_sms_GetPDULen() - get the PDU message .
 * - le_sms_GetText() - get the message text.
 * - le_sms_GetBinary() - get the message binary content.
 * - le_sms_GetPDU() - get the message PDU data.
 *
 * @note If two (or more) registered handler functions exist, they are
 * all called and get a different message object reference.
 *
 * If a succession of messages is received, a new Message object is created for each, and
 * the handler is called for each new message.
 *
 * Uninstall the handler function by calling @c le_sms_RemoveRxMessageHandler().
 * @note @c le_sms_RemoveRxMessageHandler() API does not delete the Message Object.
 *  The caller has to delete it.
 *
 * @code
 *
 *
 * [...]
 *
 * // Handler function for message reception
 * static void myMsgHandler
 * (
 *      le_sms_MsgRef_t msgRef,
 *      void*           contextPtr*
 * )
 * {
 *     char   tel[LE_SMS_TEL_NMBR_MAX_LEN];
 *     char   text[LE_SMS_TEXT_MAX_LEN];
 *
 *     if (le_sms_GetFormat(msgRef) == LE_SMS_FORMAT_TEXT)
 *     {
 *         le_sms_GetSenderTel(msgRef, tel, sizeof(tel));
 *         le_sms_GetText(msgRef, text, sizeof(text));
 *
 *         LE_INFO(" A new text message has been received !");
 *         LE_INFO(" From tel.%s, text: \"%s\"", tel, text);
 *     }
 *     else
 *     {
 *         LE_INFO(" I support only text messages !");
 *     }
 * }
 *
 *
 * [...]
 * // In the main function:
 *
 * le_sms_RxMessageHandlerRef_t HdlrRef;
 *
 * // Add an handler function to handle message reception
 * HdlrRef=le_sms_AddRxMessageHandler(myMsgHandler);
 *
 * [...]
 *
 * // Remove Handler entry
 * le_sms_RemoveRxMessageHandler(HdlrRef);
 *
 * [...]
 *
 * @endcode
 *
 * @section le_sms_ops_listing Listing  messages recorded in storage area
 *
 * Call @c le_sms_CreateRxMsgList() to create a List object that lists the received
 * messages present in the storage area, which is referenced by @c le_sms_MsgListRef_t
 * type.
 *
 * If messages are not present, the le_sms_CreateRxMsgList() returns NULL.
 *
 * Once the list is available, call @c le_sms_GetFirst() to get the first
 * message from the list, and then call @c le_sms_GetNext() API to get the next message.
 *
 * Call @c le_sms_DeleteList() to free all allocated
 *  resources associated with the List object.
 *
 * Call @c le_sms_GetStatus() to read the status of a message (Received
 * Read, Received Unread).
 *
 * To finish, you can also modify the received status of a message with
 * @c le_sms_MarkRead() and @c le_sms_MarkUnread().
 *
 * @section le_sms_ops_deleting Deleting a message from the storage area
 *
 * @c le_sms_DeleteFromStorage() deletes the message from the storage area. Message is
 * identified with @c le_sms_MsgRef_t object. The API returns an error if the message is not found
 * in the storage area.
 *
 * @note If several users own the Message object on new reception
 * (e.g., several handler functions registered for SMS message reception), the
 * Message will be deleted from the storage area only after the last user deletes
 * the Message object reference (not necessary from storage). API returns always LE_OK in this case.
 *
 * @note If one client creates a list and deletes all sms from storage, other clients wonâ€™t see sms
 *  stored If they have not created a sms list too. Sms List creation locks and
 *   delays sms deletion from storage until all references have been deleted.
 *
 *
 * @section le_sms_ops_configuration SMS configuration
 *
 *  Modem SMS Center Address can be set or get with le_sms_SetSmsCenterAddress() and
 *   le_sms_GetSmsCenterAddress() functions
 *
 * @section le_sms_ops_samples Sample codes
 * A sample code that implements a function for Mobile Originated SMS message can be found in
 * \b smsMO.c file (please refer to @ref c_smsSampleMO page).
 *
 * A sample code that implements a function for Mobile Terminated SMS message can be found in
 * \b smsMT.c file (please refer to @ref c_smsSampleMT page).
 *
 * These two samples can be easily compiled and run into the \b sms app, to install and use
 * this app:
 *
   @verbatim
   $ make ar7
   $ bin/instapp  build/ar7/bin/samples/sms.ar7 <ipaddress>
   @endverbatim
 * where ipaddress is the address of your target device.
 *
 * Then on your target, just run:
   @verbatim
   $ app start sms
   @endverbatim
 *
 * The sample replies to the sender by the message "Message from <phone number> received". Where
 * "phone number" is the sender's phone number.
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless, Inc. 2014. All rights reserved.
 */

/** @page c_sampleCodes_modem_sms Sample codes for SMS API
 *bin
 * @subpage c_smsSampleMO
 *
 * @subpage c_smsSampleMT
 *
 */

/** @page c_smsSampleMO Sample code for Mobile Originated SMS message
 *
 * @include "apps/sample/sms/smsClient/smsMO.c"
 *
 */

/** @page c_smsSampleMT Sample code for Mobile Terminated SMS message
 *
 * @include "apps/sample/sms/smsClient/smsMT.c"
 *
 */

/** @file le_sms_interface.h
 *
 * Legato @ref c_sms include file.
 *
 * Copyright (C) Sierra Wireless, Inc. 2014. All rights reserved.
 */

USETYPES le_mdmDefs.api;

//--------------------------------------------------------------------------------------------------
/**
 * Time stamp string length.
 * The string format is "yy/MM/dd,hh:mm:ss+/-zz" (Year/Month/Day,Hour:Min:Seconds+/-TimeZone).
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  TIMESTAMP_MAX_LEN   = (20);
DEFINE  TIMESTAMP_MAX_BYTES = (TIMESTAMP_MAX_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * The text message can be up to 160 characters long.
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  TEXT_MAX_LEN    = (160);
DEFINE  TEXT_MAX_BYTES  = (TEXT_MAX_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * The raw binary message can be up to 140 bytes long.
 *
 */
//--------------------------------------------------------------------------------------------------
DEFINE  BINARY_MAX_LEN  = (140);

//--------------------------------------------------------------------------------------------------
/**
 * The PDU payload bytes long.
 *
 */
//--------------------------------------------------------------------------------------------------
DEFINE  PDU_MAX_PAYLOAD = (140);

//--------------------------------------------------------------------------------------------------
/**
 * The PDU message can be up to 36 (header) + 140 (payload) bytes long.
 *
 */
//--------------------------------------------------------------------------------------------------
DEFINE  PDU_MAX_LEN     = (36+PDU_MAX_PAYLOAD);

//--------------------------------------------------------------------------------------------------
/**
 * Message Format.
 *
 */
//--------------------------------------------------------------------------------------------------
ENUM Format
{
    FORMAT_PDU,       ///< PDU message format.
    FORMAT_TEXT,      ///< Text message format.
    FORMAT_BINARY,    ///< Binary message format.
    FORMAT_UNKNOWN    ///< Unknown message format.
};

//--------------------------------------------------------------------------------------------------
/**
 * Message Status.
 *
 */
//--------------------------------------------------------------------------------------------------
ENUM Status
{
    RX_READ,        ///< Message present in the message storage has been read.
    RX_UNREAD,      ///< Message present in the message storage has not been read.
    STORED_SENT,    ///< Message saved in the message storage has been sent.
    STORED_UNSENT,  ///< Message saved in the message storage has not been sent.
    SENT,           ///< Message has been sent.
    UNSENT,         ///< Message has not been sent.
    STATUS_UNKNOWN  ///< Unknown message status.
};


//--------------------------------------------------------------------------------------------------
// Other new type definitions.
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * Declare a reference type for referring to SMS Message objects.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Msg;


//--------------------------------------------------------------------------------------------------
/**
 * Opaque type for SMS Message Listing.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE MsgList;


//--------------------------------------------------------------------------------------------------
/**
 * Handler for New Message.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER RxMessageHandler
{
    HANDLER_PARAMS
    (
        Msg  msgRef ///< Message reference.
    );
};

//--------------------------------------------------------------------------------------------------
/**
 * Create an SMS Message data structure.
 *
 * @return Reference to the new Message object.
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Msg Create
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the Telephone destination number.
 *
 * Telephone number is defined in ITU-T recommendations E.164/E.163.
 * E.164 numbers can have a maximum of fifteen digits and are usually written with a '+' prefix.
 *
 * @return LE_NOT_PERMITTED Message is Read-Only.
 * @return LE_BAD_PARAMETER Telephone destination number length is equal to zero.
 * @return LE_OK            Function succeeded.
 *
 * @note If telephone destination number is too long (max 17 digits), it is a fatal
 *       error, the function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetDestination
(
    Msg     msgRef ,                              ///< Reference to the message object.
    string  dest[le_mdmDefs.PHONE_NUM_MAX_LEN] IN ///< Telephone number string.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to set the Text Message content.
 *
 * @return LE_NOT_PERMITTED Message is Read-Only.
 * @return LE_BAD_PARAMETER Text message length is equal to zero.
 * @return LE_OK            Function succeeded.
 *
 * @note If message is too long (max 160 digits), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetText
(
    Msg     msgRef,                 ///< Reference to the message object.
    string  text[TEXT_MAX_LEN] IN   ///< SMS text.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the binary message content.
 *
 * @return LE_NOT_PERMITTED Message is Read-Only.
 * @return LE_BAD_PARAMETER Length of the data is equal to zero.
 * @return LE_OK            Function succeeded.
 *
 * @note If len is too long (max 140 bytes), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetBinary
(
    Msg     msgRef,                 ///< Reference to the message object.
    uint8   bin[BINARY_MAX_LEN] IN  ///< Binary data.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the PDU message content.
 *
 * @return LE_NOT_PERMITTED Message is Read-Only.
 * @return LE_BAD_PARAMETER Length of the data is equal to zero.
 * @return LE_OK            Function succeeded.
 *
 * @note If len is too long (max 176 bytes), it is a fatal error, the
 *       function will not return.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetPDU
(
    Msg     msgRef,             ///< Reference to the message object.
    uint8   pdu[PDU_MAX_LEN] IN ///< PDU message.
);

//--------------------------------------------------------------------------------------------------
/**
 * Send an SMS message.
 *
 * Verifies first if the parameters are valid, then it checks the modem state can support
 * message sending.
 *
 * @return LE_NOT_POSSIBLE  Current modem state does not support message sending.
 * @return LE_FORMAT_ERROR  Message content is invalid.
 * @return LE_FAULT         Function failed to send the message.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Send
(
    Msg msgRef ///< Reference to the message object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Delete a Message data structure.
 *
 * It deletes the Message data structure and all the allocated memory is freed. If several
 * users own the Message object (e.g., several handler functions registered for
 * SMS message reception), the Message object will only be deleted if one User
 * owns the Message object.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Delete
(
    Msg msgRef ///< Reference to the message object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the message format (text or PDU).
 *
 * @return Message format.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_sms_Format_t GetFormat
(
    Msg msgRef ///< Reference to the message object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Sender Telephone number.
 *
 * Output parameter is updated with the Telephone number. If the Telephone number string exceeds
 * the value of 'len' parameter,  LE_OVERFLOW error code is returned and 'tel' is filled until
 * 'len-1' characters and a null-character is implicitly appended at the end of 'tel'.
 *
 * @return LE_NOT_PERMITTED Message is not a received message.
 * @return LE_OVERFLOW      Telephone number length exceed the maximum length.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSenderTel
(
    Msg     msgRef ,                              ///< Reference to the message object.
    string  tel[le_mdmDefs.PHONE_NUM_MAX_LEN] OUT ///< Telephone number string.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Service Center Time Stamp string.
 *
 * Output parameter is updated with the Time Stamp string. If the Time Stamp string exceeds the
 * value of 'len' parameter, a LE_OVERFLOW error code is returned and 'timestamp' is filled until
 * 'len-1' characters and a null-character is implicitly appended at the end of 'timestamp'.
 *
 * @return LE_NOT_PERMITTED Message is not a received message.
 * @return LE_OVERFLOW      Timestamp number length exceed the maximum length.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetTimeStamp
(
    Msg     msgRef,                          ///< Reference to the message object.
    string  timestamp[TIMESTAMP_MAX_LEN] OUT ///< Message time stamp (in text mode).
                                             ///<      string format: "yy/MM/dd,hh:mm:ss+/-zz"
                                             ///<      (Year/Month/Day,Hour:Min:Seconds+/-TimeZone)
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the message Length value.
 *
 * @return Number of characters for text messages, or the length of the data in bytes for raw
 *         binary messages.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION size_t GetUserdataLen
(
    Msg msgRef ///< Reference to the message object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the text Message.
 *
 * Output parameter is updated with the text string. If the text string exceedS the
 * value of 'len' parameter,  LE_OVERFLOW error code is returned and 'text' is filled until
 * 'len-1' characters and a null-character is implicitly appended at the end of 'text'.
 *
 * @return LE_OVERFLOW      Message length exceed the maximum length.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetText
(
    Msg     msgRef,                 ///< Reference to the message object.
    string  text[TEXT_MAX_LEN] OUT  ///< SMS text.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the binary Message.
 *
 * Output parameters are updated with the binary message content and the length of the raw
 * binary message in bytes. If the binary data exceed the value of 'len' input parameter, a
 * LE_OVERFLOW error code is returned and 'raw' is filled until 'len' bytes.
 *
 * @return LE_FORMAT_ERROR  Message is not in binary format
 * @return LE_OVERFLOW      Message length exceed the maximum length.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetBinary
(
    Msg     msgRef,                 ///< Reference to the message object.
    uint8   bin[BINARY_MAX_LEN] OUT ///< Binary message.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the PDU message.
 *
 * Output parameters are updated with the PDU message content and the length of the PDU message
 * in bytes. If the PDU data exceed the value of 'len' input parameter, a LE_OVERFLOW error code is
 * returned and 'pdu' is filled until 'len' bytes.
 *
 * @return LE_FORMAT_ERROR  Unable to encode the message in PDU.
 * @return LE_OVERFLOW      Message length exceed the maximum length.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetPDU
(
    Msg   msgRef,               ///< Reference to the message object.
    uint8 pdu[PDU_MAX_LEN] OUT  ///< PDU message.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the message Length value.
 *
 * @return Length of the data in bytes of the PDU message.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION size_t GetPDULen
(
    Msg msgRef ///< Reference to the message object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Delete an SMS message from the storage area.
 *
 * Verifies first if the parameter is valid, then it checks the modem state can support
 * message deleting.
 *
 * @return LE_NOT_POSSIBLE  Current modem state does not support message deleting.
 * @return LE_FAULT         Function failed to perform the deletion.
 * @return LE_NO_MEMORY     Message storage is not available.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DeleteFromStorage
(
    Msg msgRef ///< Reference to the message object.
);

//--------------------------------------------------------------------------------------------------
/**
 * Create an object's reference of the list of received messages
 * saved in the SMS message storage area.
 *
 * @return
 *      Reference to the List object. Null pointer if no messages have been retrieved.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION MsgList CreateRxMsgList
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Delete the list of the Messages retrieved from the message
 * storage.
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION void DeleteList
(
    MsgList msgListRef ///< Messages list.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the first Message object reference in the list of messages
 * retrieved with le_sms_CreateRxMsgList().
 *
 * @return NULL              No message found.
 * @return Msg  Message object reference.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Msg GetFirst
(
    MsgList msgListRef ///< Messages list.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the next Message object reference in the list of messages
 * retrieved with le_sms_CreateRxMsgList().
 *
 * @return NULL              No message found.
 * @return Msg  Message object reference.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Msg GetNext
(
    MsgList msgListRef ///< Messages list.
);

//--------------------------------------------------------------------------------------------------
/**
 * Read the Message status (Received Read, Received Unread, Stored
 * Sent, Stored Unsent).
 *
 * @return Status of the message.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_sms_Status_t GetStatus
(
    Msg msgRef ///< Messages list.
);

//--------------------------------------------------------------------------------------------------
/**
 * Mark a message as 'read'.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION void MarkRead
(
    Msg msgRef ///< Messages list.
);

//--------------------------------------------------------------------------------------------------
/**
 * Mark a message as 'unread'.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION void MarkUnread
(
    Msg msgRef ///< Messages list.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the SMS center address.
 *
 * Output parameter is updated with the SMS Service center address. If the Telephone number string exceeds
 * the value of 'len' parameter,  LE_OVERFLOW error code is returned and 'tel' is filled until
 * 'len-1' characters and a null-character is implicitly appended at the end of 'tel'.
 *
 * @return
 *  - LE_FAULT         Service is not available.
 *  - LE_OVERFLOW      Telephone number length exceed the maximum length.
 *  - LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSmsCenterAddress
(
    string          tel[le_mdmDefs.PHONE_NUM_MAX_LEN] OUT    ///< SMS center address number string.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the SMS center address.
 *
 * SMS center address number is defined in ITU-T recommendations E.164/E.163.
 * E.164 numbers can have a maximum of fifteen digits and are usually written with a '+' prefix.
 *
 * @return
 *  - LE_FAULT         Service is not available..
 *  - LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetSmsCenterAddress
(
    string          tel[le_mdmDefs.PHONE_NUM_MAX_LEN] IN    ///< SMS center address number string.
);
