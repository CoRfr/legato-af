//--------------------------------------------------------------------------------------------------
/**
 * @page c_atServer AT Commands Server
 *
 * @ref le_atServer_interface.h "API Reference"
 *
 * The AT commands Server handles AT commands' subscriptions on a requested serial device. The
 * server is compliant with 3GPP 27.007, paragraphs 4.0, 4.1 and 4.2, and V25 ter, paragraphs 5.3,
 * 5.4.
 *
 * @section atServer_syntax AT command syntax
 *
 * @subsection atServer_Syntax Syntax rules
 *
 * To be interpreted, the command line sent to the AT commands server must start by the pattern
 * "AT" (mean ATtention command).<br>
 * Lowercase characters are changed to their uppercase equivalents. Only characters between quotes
 * are not replaced.
 *
 * The supported command formats are:
 * - Basic syntax command:
 *      - using the format AT<command>[<number>]<br>
 * The command name is composed of one or several of those characters: A to Z, & and \\.
 *      - the syntax of S command is also supported, like:
 *          - ATS<parameter_number>?
 *          - ATS<parameter_number>=\<value>
 *      - D command syntax is a limitation right now, and is not supported.
 *
 * - Extended command format, with the following format:
 *      - action command with no parameters: AT+<name>
 *      - parameter command: AT+<name>=<value1>[,<value2>[,<value3>[...]]]<br>
 *        Values must be separated by a coma. Some values may be optional: in that case, optional
 *        value can be omitted in the AT command (e.g. AT+ABCD=,1).<br>
 *        A value is a string composed of one or several of the following characters: 0 to 9,
 *        A to F, H, z*, #, +, -. To set a value with other characters, the value has to be set
 * between quote.
 *      - test command (determine the supported values): AT+<name>=?
 *      - read command (determine the current values, or stored values): AT+<name>?
 *
 * @note '+' AT command starting character shall be replaced by other symbol, not included into
 * a to z, A to Z, & and \\.
 *
 * @subsection atServer_concate Concatenating commands
 *
 * Basic syntax command can be concatenated without a separator:<br>
 * ATE1V1S95=47S0=0
 *
 * Additional commands (extended syntax command or basic syntax command) can be added after an
 * extended syntax command with the insertion of a semicolon at the end of the command:<br>
 * AT+CMDA=<param1>,<param2>;+CMDB?;+CMDC=?<br>
 * AT+CMDA=<param1>,<param2>;E1V1
 *
 * Extended syntax command can be concatenated after basic syntax commands without a separator:<br>
 * ATE1V1+CMD=<param1>
 *
 * @section atServer_binding Device Binding
 *
 * le_atServer_Start() must be called to bind the file descriptor of the device with the AT commands
 * server. Note that a socket can also be bound.
 * Multiple devices can be bound.
 * A file descriptor can be unbound using le_atServer_Stop().
 *
 * The server can be suspended using le_atServer_Suspend() in order to use the
 * opened fd for other purposes like starting a PPP service on the opened fd.
 * For that a fd dup needs to be done before opening a server session.
 * When needed, the server can be resumed using le_atServer_Resume(). Make sure
 * to close the fd when the application exists or you may get too many open files error.
 *
 * used before opening a server session
 * @section atServer_subscription Subscription
 *
 * A new AT command can be added into the parser using le_atServer_Create(), and it can be deleted
 * using le_atServer_Delete().
 * An AT command can be available only on one dedicated device, or on all bound devices, using
 * le_atServer_SetDevice().
 *
 * @section atServer_handler Handler
 *
 * To handle the AT command, the application has to subscribe a handler using
 * le_atServer_AddCommandHandler(). It can be removed with le_atServer_RemoveCommandHandler().<br>
 * The called handler (le_atServer_CommandHandlerRef_t prototype) can use
 * le_atServer_GetCommandName() to retrieve the received AT command string.<br>
 * It can also call le_atServer_GetParameter() to retrieve parameters of the AT command. This
 * function gets the string sending through the AT command. If the parameter was sent between
 * quotes, the quotes are removed. This API can be used for both formats:
 * - In case of a basic format command, if exists, the parameter can be retrieved at the index 0.<br>
 * For S command specific format (ATS<parameter_number>=\<value>), the <parameter_number> is
 * retrieved at the index 0, the \<value> parameter at the index 1.
 *
 * - In case of an extended format command, parameters are retrieved thanks to their indexes,
 * starting from 0. If the parameter is missed (e.g. "AT+CMD=,1"), the getting value is an empty
 * string (i.e. '\0' with null length).
 *
 * The handler receives in argument the type of the AT command (of le_atServer_Type_t type).
 * Even if these types are specific to the extended format commands according to the standards, they
 * are also applicable here to basic format commands to detect commands with parameters, or read
 * values (e.g. ATS<parameter_number>?).
 *
 * @section atServer_responses Responses
 *
 * @subsection intermediateRsp Intermediate response
 *
 * The application has can send intermediate responses through
 * le_atServer_SendIntermediateResponse().
 *
 * @subsection finalRsp Final response
 *
 * In all cases, the application must send a final response using
 * le_atServer_SendFinalResponse(). The corresponding device will be locked until the final response
 * is sent.
 *
 * If no answer is sent, the device will not accept any new AT commands (an error will be
 * returned).
 *
 * le_atServer_SendFinalResponse() has to inform of the result thanks to the argument of
 * le_atServer_FinalRsp_t type. This argument permits to the AT command Server to:
 * - create the result string if no custom string is provided
 * - continue or stop the parsing of concatenated commands: if one command is failed, next commands
 * are not executed, the final result of the concatenated AT command is the last error.
 *
 * @subsection unsolicitedRsp Unsolicited response
 *
 * The application can also send unsolicited responses to warn a host
 * application using le_atServer_SendUnsolicitedResponse().
 *
 * This response is sent when no AT command is being processing on the device (i.e. unsolicited
 * response is sent between the latest final response and the next reception of an AT command).<br>
 * If an unsolicited response is sent when an AT command is in progress, the unsolicited response
 * is buffered and sent as soon as the device becomes available (i.e., the processing AT command
 * sends its final response).
 *
 * The application can send an unsolicited on all opened device, or only one on a dedicated deivce.
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
/**
 * @file le_atServer_interface.h
 *
 * Legato @ref c_atServer include file.
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------


USETYPES le_atDefs;
//--------------------------------------------------------------------------------------------------
/**
 *  Reference type for an AT command.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Cmd;

//--------------------------------------------------------------------------------------------------
/**
 *  Reference type for a AT command device.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Device;

//--------------------------------------------------------------------------------------------------
/**
 * Received AT command type.
 *
 */
//--------------------------------------------------------------------------------------------------
ENUM Type
{
    TYPE_ACT,  ///< Action AT command (e.g. 'AT+CMD')
    TYPE_PARA, ///< AT command received with parameters (e.g. 'AT+CMD=x,y')
    TYPE_TEST, ///< Test AT command (e.g. 'AT+CMD=?')
    TYPE_READ  ///< Read AT command (e.g. 'AT+CMD?')
};

//--------------------------------------------------------------------------------------------------
/**
 * Final response.
 */
//--------------------------------------------------------------------------------------------------
ENUM FinalRsp
{
    OK,        ///< AT command successfully treated, "\r\nOK\r\n" is sent if no custom
               ///< response is set
    ERROR      ///< error in AT command treatement, "\r\nERROR\r\n" is sent if no custom
               ///< response is set
};

//--------------------------------------------------------------------------------------------------
/**
 * Device availability.
 */
//--------------------------------------------------------------------------------------------------
ENUM AvailableDevice
{
    ALL_DEVICES,      ///< action will be done on all bound devices
    SPECIFIC_DEVICE   ///< action will be done on a specified device
};

//--------------------------------------------------------------------------------------------------
/**
 * Suspend server / enter data mode
 *
 * When this function is called the server stops monitoring the fd for events
 * hence no more I/O operations are done on the fd by the server.
 *
 * @return
 *      - LE_OK             Success.
 *      - LE_BAD_PARAMETER  Invalid device reference.
 *      - LE_FAULT          Device not monitored
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Suspend
(
    Device device IN   ///< device to be suspended
);

//--------------------------------------------------------------------------------------------------
/**
 * Resume server / enter command mode
 *
 * When this function is called the server resumes monitoring the fd for events
 * and is able to interpret AT commands again.
 *
 * @return
 *      - LE_OK             Success.
 *      - LE_BAD_PARAMETER  Invalid device reference.
 *      - LE_FAULT          Device not monitored
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Resume
(
    Device device IN   ///< device to be resumed
);

//--------------------------------------------------------------------------------------------------
/**
 * This function opens an AT server session on the requested device.
 *
 * @return
 *      - Reference to the requested device.
 *      - NULL if the device is not available or fd is a BAD FILE DESCRIPTOR.
 *
 * @note Make sure to duplicate (man dup) your file descriptor before opening
 *       a server session to be able to use the suspend/resume feature
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Device Open
(
    file   fd                       IN  ///< File descriptor.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function closes the AT server session on the requested device.
 *
 * @return
 *      - LE_OK             The function succeeded.
 *      - LE_BAD_PARAMETER  Invalid device reference.
 *      - LE_BUSY           The requested device is busy.
 *      - LE_FAULT          Failed to stop the server, check logs
 *                              for more information.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Close
(
    Device device IN   ///< device to be unbound
);

//--------------------------------------------------------------------------------------------------
/**
 * This function created an AT command and register it into the AT parser.
 *
 * @return
 *      - Reference to the AT command.
 *      - NULL if an error occurs.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Cmd Create
(
    string name[le_atDefs.COMMAND_MAX_LEN] IN   ///< AT command name string
);

//--------------------------------------------------------------------------------------------------
/**
 * This function deletes an AT command (i.e. unregister from the AT parser).
 *
 * @return
 *      - LE_OK            The function succeeded.
 *      - LE_FAULT         The function failed to delete the command.
 *      - LE_BUSY          Command is in progress.
 *
 */
//--------------------------------------------------------------------------------------------------

FUNCTION le_result_t Delete
(
    Cmd commandRef IN   ///< AT command reference
);

//--------------------------------------------------------------------------------------------------
/**
 * This function sets the device(s) where the specified AT command is available.
 *
 * @return
 *      - LE_OK            The function succeeded.
 *      - LE_FAULT         The function failed to set the device.
 *
 * @note If the AT command is available for all devices (i.e. availableDevice argument is set to
 * LE_ATSERVER_ALL_DEVICES), the "device" argument is unused.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetDevice
(
    Cmd             commandRef          IN, ///< AT command reference
    AvailableDevice   availableDevice   IN, ///< device available for the AT command
    Device            device            IN  ///< device reference where the AT command is available
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler for the AT command processing.
 *
 * @note The argument "parametersNumber" is set only when "type" parameter value is
 * LE_AT_SERVER_TYPE_PARA
 */
//--------------------------------------------------------------------------------------------------
HANDLER CommandHandler
(
    Cmd     commandRef       IN,      ///< Received AT command reference
    Type    type             IN,      ///< Received AT command type
    uint32  parametersNumber IN       ///< Parameters number
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information when the AT command is detected.
 *
 */
//--------------------------------------------------------------------------------------------------
EVENT Command
(
    Cmd            commandRef   IN,   ///< AT command reference
    CommandHandler handler      IN       ///< Handler to called when the AT command is detected
);

//--------------------------------------------------------------------------------------------------
/**
 * This function can be used to get the parameters of a received AT command.
 *
 * @return
 *      - LE_OK            The function succeeded.
 *      - LE_FAULT         The function failed to get the requested parameter.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetParameter
(
    Cmd    commandRef                               IN, ///< AT command reference
    uint32 index                                    IN, ///< agument index
    string parameter[le_atDefs.PARAMETER_MAX_LEN]   OUT ///< parameter value
);

//--------------------------------------------------------------------------------------------------
/**
 * This function can be used to get the AT command string.
 *
 * @return
 *      - LE_OK            The function succeeded.
 *      - LE_FAULT         The function failed to get the AT command string.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetCommandName
(
    Cmd    commandRef            IN,            ///< AT command reference
    string name[le_atDefs.COMMAND_MAX_LEN] OUT  ///< AT command string
);

//--------------------------------------------------------------------------------------------------
/**
 * This function can be used to send an intermediate response.
 *
 * @return
 *      - LE_OK            The function succeeded.
 *      - LE_FAULT         The function failed to send the intermediate response.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SendIntermediateResponse
(
    Cmd      commandRef                                     IN, ///< AT command reference
    string   intermediateRsp[le_atDefs.RESPONSE_MAX_BYTES]  IN  ///< Intermediate rsp to be sent
);

//--------------------------------------------------------------------------------------------------
/**
 * This function can be used to send the final response.
 *
 * @return
 *      - LE_OK            The function succeeded.
 *      - LE_FAULT         The function failed to send the final response.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SendFinalResponse
(
    Cmd      commandRef                             IN, ///< AT command reference
    FinalRsp final                                  IN, ///< Final response to be sent
    bool     customStringAvailable                  IN, ///< Custom finalRsp str has to be sent
                                                        ///< instead of the default one.
    string   finalRsp[le_atDefs.RESPONSE_MAX_BYTES] IN  ///< custom final response string
);

//--------------------------------------------------------------------------------------------------
/**
 * This function can be used to send the unsolicited response.
 *
 * @return
 *      - LE_OK            The function succeeded.
 *      - LE_FAULT         The function failed to send the unsolicited response.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SendUnsolicitedResponse
(
    string          unsolRsp[le_atDefs.RESPONSE_MAX_BYTES]      IN, ///< Unsolicited rsp to be sent
    AvailableDevice availableDevice                             IN, ///< device to send unsol rsp
    Device          device                                      IN  ///< device reference where the
                                                                    ///< unsol rsp has to be sent
);
