//--------------------------------------------------------------------------------------------------
/**
 * @page c_gnss GNSS
 *
 * @ref le_gnss_interface.h "API Reference" <br>
 * @ref platformConstraintsGnss page
 *
 * @ref howToGNSS
 *
 * <HR>
 *
 * This API provides access to the GNSS device.
 *
 * GNSS or Global Navigation Satellite System is a satellite navigation system with global coverage.
 *
 * This API provides function to configure the GNSS device and retrieve position information.
 *
 * @section le_gnss_binding IPC interfaces binding
 *
 * All the functions of this API are provided by the @b positioningService application service.
 *
 * Here's a code sample binding to Positioning services:
 * @verbatim
   bindings:
   {
      clientExe.clientComponent.le_gnss -> positioningService.le_gnss
   }
   @endverbatim
 *
 * @section le_gnss_ControlApi GNSS Control API
 *
 * @subsection le_gnss_EnableDisable Enable/Disable GNSS device
 *
 * The application can enable/disable the GNSS device with the le_gnss_Enable()
 * / le_gnss_Disable() functions.
 * By default the GNSS device is enabled for the positioningService application service.
 * Also see @ref howToGNSS.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_gnssSampleCodeEnableDisable
 *
 * @subsection le_gnss_StartStop Start/Stop GNSS device
 *
 * The application can start/stop the GNSS device with the le_gnss_Start() / le_gnss_Stop()
 * functions.
 * The default "HOT" start condition is applied and all assistance data are used.
 * Also see @ref howToGNSS.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_gnssSampleCodeStartStop
 *
 * @subsubsection le_gnss_StartingMode Starting mode
 *
 * Starting modes are used only for test purposes and allow start performance measurement.
 * @note For more information about start performances, please refer to your specific
 * platform documentation.
 *
 * @subsubsection le_gnss_Data GNSS data
 * The following table describes the <b>minimum</b> required data for those starting modes:
 *
 * | GNSS Data / Starting mode  | HOT  | WARM  | COLD  | FACTORY |
 *| -----------------------| -----| ------| ----- | ------- |
 *| Broadcasted Ephemeris  | Used |  |  |  |
 *| Extended Ephemeris     | Used(1) | Used(2) | Used(2) | Removed (3) |
 *| Approximate Time and Position  | Used | Used |  |  |
 *| Almanac   | Used | Used | Used | Used (Factory) |
 *
 * For example, a requested HOT start without valid broadcasted ephemeris will be treated
 * as a WARM start.
 *
 * @note (1) Extended Ephemeris can be used if Broadcasted Ephemeris are not valid.
 * The Extended Ephemeris could be loaded using the le_gnss_LoadExtendedEphemerisFile()
 * function.
 * @note (2) Extended Ephemeris is used if the Extended Ephemeris file is loaded and valid.
 * @note (3) Extended Ephemeris are removed when a FACTORY start is requested.
 * The Extended Ephemeris could be loaded again using the le_gnss_LoadExtendedEphemerisFile()
 * function.
 *
 * @subsubsection le_gnss_TTFF Time To First Fix (TTFF)
 * The le_gnss_GetTtff() function provides the TTFF (first between 2-Dimensional or 3-Dimensional
 * position fix) of the last position fix.
 * Please refer to @ref le_gnss_APIcallsRequirements. Also see @ref howToGNSS.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_gnssSampleCodeReStart
 *
 * @subsubsection le_gnss_ForceHotRestart Force HOT restart
 * The le_gnss_ForceHotRestart() function performs a "HOT" restart of the GNSS device. The current
 * GNSS session is stopped, then started using the available @ref le_gnss_Data.
 * Please refer to @ref le_gnss_APIcallsRequirements. Also see @ref howToGNSS.
 *
 * @subsubsection le_gnss_ForceWarmRestart Force WARM restart
 * The le_gnss_ForceWarmRestart() function performs a "WARM" restart of the GNSS device. The current
 * GNSS session is stopped, then started using the available @ref le_gnss_Data.
 * Please refer to @ref le_gnss_APIcallsRequirements. Also see @ref howToGNSS.
 *
 * @subsubsection le_gnss_ForceColdRestart Force COLD restart
 * The le_gnss_ForceColdRestart() function performs a "COLD" restart of the GNSS device. The current
 * GNSS session is stopped, then started using the available @ref le_gnss_Data.
 * Please refer to @ref le_gnss_APIcallsRequirements. Also see @ref howToGNSS.
 *
 * @subsubsection le_gnss_ForceFactoryRestart Force FACTORY restart
 * The le_gnss_ForceFactoryRestart() function performs a "FACTORY" restart of the GNSS device.
 * The current GNSS session is stopped, then started using the available @ref le_gnss_Data.
 * Please refer to @ref le_gnss_APIcallsRequirements. Also see @ref howToGNSS.
 *
 * @subsection le_gnss_AcquisitionRate Acquisition rate
 * The GNSS position is computed and delivered each acquisition rate. Default value is 1 second.
 * The application can configure/retrieve the GNSS device acquisition rate with the
 * le_gnss_SetAcquisitionRate() / le_gnss_GetAcquisitionRate() functions.
 *
 * Please refer to @ref le_gnss_APIcallsRequirements.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_gnssSampleCodeAcquisitionRate
 *
 * @subsection le_gnss_SetGetConstellation GNSS constellation selection
 *
 * The le_gnss_SetConstellation() function selects the GNSS constellation(s) used in solution.
 * If all GNSS constellations are disabled, the GNSS engine is disabled.
 *
 * @warning Your platform may require a reboot to take into account this change. Please refer to your
 * platform documentation for further details.
 *
 * The following configurations are currently supported:
 *   - GPS
 *   - GPS + GLONASS
 *
 * All supported GNSS constellations are enabled by default.
 * The le_gnss_GetConstellation() function gets the GNSS constellation(s) enabled to be used
 * in solution.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_gnssSampleCodeConstellation
 *
 * @subsection le_gnss_APIcallsRequirements API calls Requirements
 * The following table shows the pre-requisites when using the GNSS service API function set.
 * ''LE_OK or error code'' means the function is authorized in the corresponding state, the request
 * is performed and the result is returned; otherwise the returned error is indicated for each state
 *.
 * | Function / GNSS state  | UNINITIALIZED  | READY  | ACTIVE  | DISABLED |
 *| ----------------------------- | --------------------------- | -----------------------------| --------------------------- | --------------------------- |
 *| le_gnss_Start() | LE_NOT_PERMITTED | LE_OK or error code | LE_DUPLICATE | LE_NOT_PERMITTED |
 *| le_gnss_Stop() | LE_NOT_PERMITTED | LE_DUPLICATE | LE_OK or error code | LE_NOT_PERMITTED |
 *| le_gnss_ForceHotRestart() | LE_NOT_PERMITTED | LE_NOT_PERMITTED | LE_OK or error code | LE_NOT_PERMITTED |
 *| le_gnss_ForceWarmRestart() | LE_NOT_PERMITTED | LE_NOT_PERMITTED | LE_OK or error code | LE_NOT_PERMITTED |
 *| le_gnss_ForceColdRestart() | LE_NOT_PERMITTED | LE_NOT_PERMITTED | LE_OK or error code | LE_NOT_PERMITTED |
 *| le_gnss_ForceFactoryRestart() | LE_NOT_PERMITTED | LE_NOT_PERMITTED | LE_OK or error code | LE_NOT_PERMITTED |
 *| le_gnss_Disable() | LE_NOT_PERMITTED | LE_OK or error code | LE_NOT_PERMITTED | LE_DUPLICATE |
 *| le_gnss_Enable() | LE_NOT_PERMITTED | LE_DUPLICATE | LE_DUPLICATE | LE_OK or error code |
 *| le_gnss_SetConstellation() | LE_NOT_PERMITTED |  LE_OK or error code | LE_NOT_PERMITTED | LE_NOT_PERMITTED |
 *| le_gnss_GetConstellation() | LE_NOT_PERMITTED |  LE_OK or error code | LE_NOT_PERMITTED | LE_NOT_PERMITTED |
 *| le_gnss_GetTtff() | LE_NOT_PERMITTED |  LE_OK or error code | LE_OK or error code | LE_NOT_PERMITTED |
 *| le_gnss_SetAcquisitionRate() | LE_NOT_PERMITTED | LE_OK or error code | LE_NOT_PERMITTED | LE_NOT_PERMITTED |
 *| le_gnss_GetAcquisitionRate() | LE_NOT_PERMITTED | LE_OK or error code | LE_NOT_PERMITTED | LE_NOT_PERMITTED |
 *
 * Also see @ref howToGNSS.
 *
 * @section le_gnss_Information GNSS position information
 * @ref le_gnss_NMEA
 *
 * @ref le_gnss_GetInfo
 *
 * @subsection le_gnss_NMEA NMEA Flow
 * The National Marine Electronics Association (NMEA) standard defines an electrical interface
 * and data protocol for communications between marine instrumentation.
 *
 * The NMEA-0183, scope of this document, defines a set of frame prefixed by
 * $GP (concerning Global Positioning System),
 * $GL (concerning GLONASS)
 * and $GN (concerning combination of navigation systems).
 * For more details about NMEA standards, please refer to http://www.nmea.org/.
 *
 * That NMEA frames flow can be retrieved from the "/dev/nmea" device folder, using for example
 * the shell command $<EM> cat /dev/nmea | grep '$G'</EM>
 *
 * @subsection le_gnss_GetInfo Get position information
 * The position information is referenced to a position sample object.
 *
 * An application can register a handler to be notified of the
 * updated position each @ref le_gnss_AcquisitionRate, returning a position sample object.
 *
 * The GNSS information commonly used such as
 * position, time and date, satellites information and accuracy
 * can be queried using the following functions:
 * - le_gnss_GetPositionState()
 * - le_gnss_GetLocation()
 * - le_gnss_GetAltitude()
 * - le_gnss_GetDate()
 * - le_gnss_GetTime()
 * - le_gnss_GetGpsTime()
 * - le_gnss_GetTimeAccuracy()
 * - le_gnss_GetHorizontalSpeed()
 * - le_gnss_GetVerticalSpeed()
 * - le_gnss_GetDirection()
 * - le_gnss_GetSatellitesInfo()
 * - le_gnss_GetSatellitesStatus()
 * - le_gnss_GetDop()
 * - le_gnss_GetSatellitesLatency()
 *
 * The handler can be managed using le_gnss_AddPositionHandler()
 * and le_gnss_RemovePositionHandler().
 * When a position is computed, the handler is called.
 *
 * The application has to release each position sample object received by the handler,
 * using the le_gnss_ReleaseSampleRef().
 *
 * A sample code can be seen in the following page:
 * - @subpage c_gnssSampleCodePosition
 *
 * @section le_gnss_Assisted_GNSS Assisted GNSS
 *
 * @ref le_gnss_Assisted_GNSS_EE
 * @ref le_gnss_Assisted_GNSS_UP
 *
 * @subsection le_gnss_Assisted_GNSS_EE Server based Extended Ephemeris
 *
 * @todo Add detailed documentation.
 *
 * With le_gnss_LoadExtendedEphemerisFile() , you can load an 'Extended Ephemeris' file into
 * the GNSS device from the filesystem.
 * You have to download the file before loading it.
 * @warning Ensure to check that the downloaded file is supported for your specific platform.
 *
 * With le_gnss_GetExtendedEphemerisValidity(), you will to get the validity of the last injected
 * Extended Ephemeris.
 *
 * You can enable/disable the use of the 'Extended Ephemeris' file into the GNSS device with
 * le_gnss_EnableExtendedEphemerisFile() / le_gnss_DisableExtendedEphemerisFile() functions.
 * @warning Ensure to check configuration capabilities for your specific platform.
 * A reboot must be required if your platform doesn't allow run-time configuration.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_gnssSampleCodeXtra
 *
 * @subsection le_gnss_Assisted_GNSS_UP 3GPP User Plane (OMA SUPL)
 *
 * That 3GPP User Plane A-GNSS (Assisted GNSS) protocol is defined by two different standardization
 * bodies, 3GPP and Open Mobile Alliance (OMA). For more information, please refer to the standard.
 *
 * Both MS-Assisted and MS-Based position determination methods are supported in the User Plane.
 *
 * In MS-Assisted mode, the MS (Mobile Station) measures the signals from the GNSS satellites
 *, then returns the retrieved GNSS data to the SUPL (Secure User Plan Location) server, where the
 * position calculation is performed.
 *
 * In MS-Based mode, the MS gets the assistance data from the SUPL (Secure User Plan Location)
 * server. The MS measures the signals from the GNSS satellites and makes the position calculation.
 *
 * The data transport over User Plan is done using the TCP/IP protocol.
 *
 * The Assisted-GNSS mode can be configured thru the le_gnss_SetSuplAssistedMode() function.
 *
 * The supported modes are the following:
 * - Standalone mode: That 3GPP User Plane A-GNSS feature is deactivated.
 * - MS-Based mode
 * - MS-Assisted mode
 *
 * Moreover, the le_gnss_GetSuplAssistedMode() function reads the configured Assisted-GNSS mode.
 *
 * The SUPL server is configured using the le_gnss_SetSuplServerUrl() function. That function sets
 * the SUPL server URL and optionally the port number.
 *
 * The SUPL certificate to be used in A-GNSS sessions is injected through the
 * le_gnss_InjectSuplCertificate() function and deleted through the le_gnss_DeleteSuplCertificate()
 * function.
 *
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------

/**
 * @page c_gnssSampleCode Sample code for GNSS device
 *
 * @include "apps/test/positioning/gnssTest/gnssTest/gnssTest.c"
 */

/**
 * @page c_gnssSampleCodeEnableDisable Sample code for Enable/Disable GNSS device
 *
 * @snippet "apps/test/positioning/gnssTest/gnssTest/gnssTest.c" GnssEnable
 */

/**
 * @page c_gnssSampleCodeStartStop Sample code for Start/Stop GNSS device
 *
 * @snippet "apps/test/positioning/gnssTest/gnssTest/gnssTest.c" GnssControl
 */

/**
 * @page c_gnssSampleCodeReStart Sample code for restart GNSS device and get TTFF
 *
 * @snippet "apps/test/positioning/gnssTest/gnssTest/gnssTest.c" GnssReStart
 */


/**
 * @page c_gnssSampleCodeAcquisitionRate Sample code for GNSS acquisition rate configuration
 *
 * @snippet "apps/test/positioning/gnssTest/gnssTest/gnssTest.c" GnssControl
 */

/**
 * @page c_gnssSampleCodeConstellation Sample code for GNSS constellation selection
 *
 * @snippet "apps/test/positioning/gnssTest/gnssTest/gnssTest.c" GnssControl
 */

/**
 * @page c_gnssSampleCodePosition Sample code for GNSS position information
 *
 * @snippet "apps/test/positioning/gnssTest/gnssTest/gnssTest.c" GnssPosition
 */

/**
 * @page c_gnssSampleCodeXtra Sample code for GNSS Server based Extended Ephemeris
 *
 * @include "apps/test/positioning/gnssXtraTest/gnssXtraTest/xtraTest.c"
 */

//--------------------------------------------------------------------------------------------------
/**
 * @file le_gnss_interface.h
 *
 * Legato @ref c_gnss include file.
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 *  Reference type for dealing with GNSS position samples.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Sample;

//--------------------------------------------------------------------------------------------------
/**
 * Maximum length of the SUP Server URL string.
 */
//--------------------------------------------------------------------------------------------------
DEFINE SUPL_SERVER_URL_MAX_LEN   = 256;

//--------------------------------------------------------------------------------------------------
/**
 * Maximum length of the SUP Server URL string.
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE SUPL_SERVER_URL_MAX_BYTES = (SUPL_SERVER_URL_MAX_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * Maximum SUPL certificate size.
 */
//--------------------------------------------------------------------------------------------------
DEFINE SUPL_CERTIFICATE_MAX_LEN   = 2000;

//--------------------------------------------------------------------------------------------------
/**
 * Maximum SUPL certificate string size.
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE SUPL_CERTIFICATE_MAX_BYTES   = (SUPL_CERTIFICATE_MAX_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * Define the maximum length of the Satellites Vehicle information list
 */
//--------------------------------------------------------------------------------------------------
DEFINE SV_INFO_MAX_LEN = 80;

//--------------------------------------------------------------------------------------------------
/**
 *  GNSS fix position states.
 */
//--------------------------------------------------------------------------------------------------
ENUM FixState
{
    STATE_FIX_NO_POS,          ///< The GNSS fix position is not fixed.
    STATE_FIX_2D,              ///< 2-Dimensional position fix.
    STATE_FIX_3D,              ///< 3-Dimensional position fix.
    STATE_FIX_ESTIMATED        ///< Estimated (i.e. forward predicted) position fix.
};

//--------------------------------------------------------------------------------------------------
/**
 *  GNSS constellation type.
 */
//--------------------------------------------------------------------------------------------------
ENUM Constellation
{
    SV_CONSTELLATION_UNDEFINED,        ///< GNSS constellation field not defined.
    SV_CONSTELLATION_GPS,              ///< Satellite Vehicle of GPS constellation.
    SV_CONSTELLATION_SBAS,             ///< Satellite Vehicle of SBAS constellation.
    SV_CONSTELLATION_GLONASS,          ///< Satellite Vehicle of Glonass constellation.
    SV_CONSTELLATION_GALILEO,          ///< Satellite Vehicle of Galileo constellation.
    SV_CONSTELLATION_BEIDOU,           ///< Satellite Vehicle of Beidou constellation.
    SV_CONSTELLATION_MAX               ///< Maximum value.
};

//--------------------------------------------------------------------------------------------------
/**
 * Assisted-GNSS mode
 */
//--------------------------------------------------------------------------------------------------
ENUM AssistedMode
{
    STANDALONE_MODE,         ///< Standalone mode
    MS_BASED_MODE,           ///< MS-Based mode.
    MS_ASSISTED_MODE         ///< MS-Assisted mode.
};

//--------------------------------------------------------------------------------------------------
/**
 * GNSS constellation Bit Mask (8 bits) indicating the GNSS constellation(s)
 * used in solution.
 *
 */
//--------------------------------------------------------------------------------------------------
BITMASK ConstellationBitMask
{
    CONSTELLATION_GPS,                      ///< GPS constellation used in solution.
    CONSTELLATION_GLONASS,                  ///< GLONASS constellation used in solution.
    CONSTELLATION_BEIDOU,                   ///< BEIDOU constellation used in solution.
    CONSTELLATION_GALILEO                   ///< GALILEO constellation used in solution.
};

//--------------------------------------------------------------------------------------------------
/**
 * Set the GNSS constellation bit mask
 *
 * @return
 *  - LE_FAULT         The function failed.
 *  - LE_UNSUPPORTED   If the request is not supported.
 *  - LE_NOT_PERMITTED If the GNSS device is not initialized, disabled or active.
 *  - LE_OK            The function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetConstellation
(
    ConstellationBitMask constellationMask      IN  ///< GNSS constellation used in solution.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the GNSS constellation bit mask
 *
 * @return
 *  - LE_OK on success
 *  - LE_FAULT on failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetConstellation
(
    ConstellationBitMask constellationMask      OUT  ///< GNSS constellation used in solution.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function enables the use of the 'Extended Ephemeris' file into the GNSS device.
 *
 * @return
 *  - LE_FAULT         The function failed.
 *  - LE_OK            The function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t EnableExtendedEphemerisFile
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function disables the use of the 'Extended Ephemeris' file into the GNSS device.
 *
 * @return
 *  - LE_FAULT         The function failed.
 *  - LE_OK            The function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DisableExtendedEphemerisFile
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to load an 'Extended Ephemeris' file into the GNSS device.
 *
 * @return
 *  - LE_FAULT         The function failed to inject the 'Extended Ephemeris' file.
 *  - LE_TIMEOUT       A time-out occurred.
 *  - LE_FORMAT_ERROR  'Extended Ephemeris' file format error.
 *  - LE_OK            The function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t LoadExtendedEphemerisFile
(
    file       fd    IN  ///< Extended ephemeris file descriptor
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the validity of the last injected Extended Ephemeris.
 *
 * @return
 *  - LE_FAULT         The function failed to get the validity
 *  - LE_OK            The function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetExtendedEphemerisValidity
(
    uint64 startTime OUT,     ///< Start time in seconds (since Jan. 1, 1970)
    uint64 stopTime OUT       ///< Stop time in seconds (since Jan. 1, 1970)
);

//--------------------------------------------------------------------------------------------------
/**
 * This function starts the GNSS device.
 *
 * @return
 *  - LE_FAULT         The function failed.
 *  - LE_DUPLICATE     If the GNSS device is already started.
 *  - LE_NOT_PERMITTED If the GNSS device is not initialized or disabled.
 *  - LE_OK            The function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Start
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function stops the GNSS device.
 *
 * @return
 *  - LE_FAULT         The function failed.
 *  - LE_DUPLICATE     If the GNSS device is already stopped.
 *  - LE_NOT_PERMITTED If the GNSS device is not initialized or disabled.
 *  - LE_OK            The function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Stop
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function performs a "HOT" restart of the GNSS device.
 *
 * @return
 *  - LE_FAULT         The function failed.
 *  - LE_NOT_PERMITTED If the GNSS device is not enabled or not started.
 *  - LE_OK            The function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t ForceHotRestart
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function performs a "WARM" restart of the GNSS device.
 *
 * @return
 *  - LE_FAULT         The function failed.
 *  - LE_NOT_PERMITTED If the GNSS device is not enabled or not started.
 *  - LE_OK            The function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t ForceWarmRestart
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function performs a "COLD" restart of the GNSS device.
 *
 * @return
 *  - LE_FAULT         The function failed.
 *  - LE_NOT_PERMITTED If the GNSS device is not enabled or not started.
 *  - LE_OK            The function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t ForceColdRestart
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function performs a "FACTORY" restart of the GNSS device.
 *
 * @return
 *  - LE_FAULT         The function failed.
 *  - LE_NOT_PERMITTED If the GNSS device is not enabled or not started.
 *  - LE_OK            The function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t ForceFactoryRestart
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the TTFF in milliseconds
 *
 * @return
 *  - LE_BUSY          The position is not fixed and TTFF can't be measured.
 *  - LE_NOT_PERMITTED If the GNSS device is not enabled or not started.
 *  - LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetTtff
(
    uint32 ttff                     OUT ///< TTFF in milliseconds
);

//--------------------------------------------------------------------------------------------------
/**
 * This function enables the GNSS device.
 *
 * @return
 *  - LE_FAULT         The function failed.
 *  - LE_DUPLICATE     If the GNSS device is already enabled.
 *  - LE_NOT_PERMITTED If the GNSS device is not initialized.
 *  - LE_OK            The function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Enable
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function disables the GNSS device.
 *
 * @return
 *  - LE_FAULT         The function failed.
 *  - LE_DUPLICATE     If the GNSS device is already disabled.
 *  - LE_NOT_PERMITTED If the GNSS device is not initialized or started.
 *  - LE_OK            The function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Disable
(
);


//--------------------------------------------------------------------------------------------------
/**
 * This function sets the GNSS device acquisition rate.
 *
 * @return
 *  - LE_OK on success
 *  - LE_FAULT on failure
 *  - LE_UNSUPPORTED request not supported
 *  - LE_TIMEOUT a time-out occurred
 *  - LE_NOT_PERMITTED If the GNSS device is not in "ready" state.
 *
 * @warning This function may be subject to limitation depending on the platform. Please refer to
 *          the @ref platformConstraintsGnss page.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetAcquisitionRate
(
    uint32  rate      IN  ///< Acquisition rate in milliseconds.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function gets the GNSS device acquisition rate.
 *
 * @return
 *  - LE_OK on success
 *  - LE_FAULT on failure
 *  - LE_NOT_PERMITTED If the GNSS device is not in "ready" state.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetAcquisitionRate
(
    uint32 rate      OUT  ///< Acquisition rate in milliseconds.
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler for position information.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER PositionHandler
(
    Sample positionSampleRef ///< Position's sample reference
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on position.
 *
 *  - A handler reference, which is only needed for later removal of the handler.
 *
 * @note Doesn't return on failure, so there's no need to check the return value for errors.
 */
//--------------------------------------------------------------------------------------------------
EVENT Position
(
    PositionHandler handler
);

//--------------------------------------------------------------------------------------------------
/**
 * This function gets the position sample's fix state
 *
 *  - LE_OK on success
 *  - LE_FAULT on failure
 *
 * @note If the caller is passing an invalid Position sample reference into this function,
 *       it is a fatal error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetPositionState
(
    Sample   positionSampleRef IN,          ///< Position sample's reference.
    FixState state OUT                      ///< Position fix state.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the location's data (Latitude, Longitude, Horizontal accuracy).
 *
 * @return
 *  - LE_FAULT         Function failed to get the location's data
 *  - LE_OUT_OF_RANGE  One of the retrieved parameter is invalid (set to INT32_MAX).
 *  - LE_OK            Function succeeded.
 *
 * @note latitudePtr, longitudePtr, hAccuracyPtr, altitudePtr, vAccuracyPtr can be set to NULL
 *       if not needed.
 *
 * @note: The latitude and longitude values are based on the WGS84 standard coordinate system.
 *
 * @note The latitude and longitude are given in degrees with 6 decimal places like:
 *    Latitude +48858300 = 48.858300 degrees North
 *    Longitude +2294400 = 2.294400 degrees East
 *
 * @note Altitude is in meters, above Mean Sea Level, with 3 decimal places (3047 = 3.047 meters).
 *
 * @note If the caller is passing an invalid Position sample reference into this function,
 *       it is a fatal error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetLocation
(
    Sample positionSampleRef IN, ///< Position sample's reference.
    int32 latitude OUT,          ///< WGS84 Latitude in degrees, positive North [resolution 1e-6].
    int32 longitude OUT,         ///< WGS84 Longitude in degrees, positive East [resolution 1e-6].
    int32 hAccuracy OUT          ///< Horizontal position's accuracy in meters [resolution 1e-2].
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the position sample's altitude.
 *
 * @return
 *  - LE_FAULT         Function failed to get the altitude.
 *  - LE_OUT_OF_RANGE  One of the retrieved parameter is invalid (set to INT32_MAX).
 *  - LE_OK            Function succeeded.
 *
 * @note Altitude is in meters, above Mean Sea Level, with 3 decimal places (3047 = 3.047 meters).
 *
 * @note For a 2D position fix, the altitude will be indicated as invalid and set to INT32_MAX
 *
 * @note If the caller is passing an invalid Position reference into this function,
 *       it is a fatal error, the function will not return.
 *
 * @note altitudePtr, altitudeAccuracyPtr can be set to NULL if not needed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetAltitude
(
    Sample positionSampleRef  IN,   ///< Position sample's reference.
    int32 altitude OUT,             ///< Altitude in meters, above Mean Sea Level [resolution 1e-3].
    int32 vAccuracy OUT             ///< Vertical position's accuracy in meters [resolution 1e-1].
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the position sample's time.
 *
 * @return
 *  - LE_FAULT         Function failed to get the time.
 *  - LE_OUT_OF_RANGE  The retrieved time is invalid (all fields are set to 0).
 *  - LE_OK            Function succeeded.
 *
 * @note If the caller is passing an invalid Position sample reference into this function,
 *       it is a fatal error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetTime
(
    Sample positionSampleRef  IN, ///< Position sample's reference.
    uint16 hours OUT,             ///< UTC Hours into the day [range 0..23].
    uint16 minutes OUT,           ///< UTC Minutes into the hour [range 0..59].
    uint16 seconds OUT,           ///< UTC Seconds into the minute [range 0..59].
    uint16 milliseconds OUT       ///< UTC Milliseconds into the second [range 0..999].
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the position sample's GPS time.
 *
 * @return
 *  - LE_FAULT         Function failed to get the time.
 *  - LE_OUT_OF_RANGE  The retrieved time is invalid (all fields are set to 0).
 *  - LE_OK            Function succeeded.
 *
 * @note If the caller is passing an invalid Position sample reference into this function,
 *       it is a fatal error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetGpsTime
(
    Sample positionSampleRef  IN, ///< Position sample's reference.
    uint32 gpsWeek OUT,           ///< GPS week number from midnight, Jan. 6, 1980.
    uint32 gpsTimeOfWeek OUT      ///< Amount of time in milliseconds into the GPS week.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the position sample's time accurary.
 *
 * @return
 *  - LE_FAULT         Function failed to get the time.
 *  - LE_OUT_OF_RANGE  The retrieved time accuracy is invalid (set to UINT16_MAX).
 *  - LE_OK            Function succeeded.
 *
 * @note If the caller is passing an invalid Position sample reference into this function,
 *       it is a fatal error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetTimeAccuracy
(
    Sample positionSampleRef  IN,       ///< Position sample's reference.
    uint32 timeAccuracy OUT             ///< Estimated time accuracy in milliseconds
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the position sample's date.
 *
 * @return
 *  - LE_FAULT         Function failed to get the date.
 *  - LE_OUT_OF_RANGE  The retrieved date is invalid (all fields are set to 0).
 *  - LE_OK            Function succeeded.
 *
 * @note If the caller is passing an invalid Position sample reference into this function,
 *       it is a fatal error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetDate
(
    Sample positionSampleRef IN, ///< Position sample's reference.
    uint16 year OUT,             ///< UTC Year A.D. [e.g. 2014].
    uint16 month OUT,            ///< UTC Month into the year [range 1...12].
    uint16 day OUT               ///< UTC Days into the month [range 1...31].
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the position sample's horizontal speed.
 *
 *  - LE_FAULT         Function failed to find the positionSample.
 *  - LE_OUT_OF_RANGE  One of the retrieved parameter is invalid (set to UINT32_MAX).
 *  - LE_OK            Function succeeded.
 *
 * @note hSpeedPtr, hSpeedAccuracyPtr can be set to NULL if not needed.
 *
 * @note If the caller is passing an invalid Position sample reference into this function,
 *       it is a fatal error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetHorizontalSpeed
(
    Sample positionSampleRef IN,        ///< Position sample's reference.
    uint32 hspeed OUT,                  ///< Horizontal speed in meters/second [resolution 1e-2].
    uint32 hspeedAccuracy OUT           ///< Horizontal speed's accuracy estimate
                                        ///< in meters/second [resolution 1e-1].
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the position sample's vertical speed.
 *
 * @return
 *  - LE_FAULT         The function failed to find the positionSample.
 *  - LE_OUT_OF_RANGE  One of the retrieved parameter is not valid (set to INT32_MAX).
 *  - LE_OK            The function succeeded.
 *
 * @note vSpeedPtr, vSpeedAccuracyPtr can be set to NULL if not needed.
 *
 * @note For a 2D position Fix, the vertical speed will be indicated as invalid
 * and set to INT32_MAX.
 *
 * @note If the caller is passing an invalid Position sample reference into this function,
 *       it is a fatal error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetVerticalSpeed
(
    Sample positionSampleRef IN,         ///< Position sample's reference.
    int32  vspeed OUT,                   ///< Vertical speed in meters/second [resolution 1e-2],
                                         ///< positive up.
    int32  vspeedAccuracy OUT            ///< Vertical speed's accuracy estimate
                                        ///< in meters/second [resolution 1e-1].
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the position sample's direction. Direction of movement is the
 * direction that the vehicle/person is actually moving.
 *
 * @return
 *  - LE_FAULT         Function failed to find the positionSample.
 *  - LE_OUT_OF_RANGE  One of the retrieved parameter is invalid (set to INT32_MAX).
 *  - LE_OK            Function succeeded.
 *
 * @note directionPtr, directionAccuracyPtr can be set to NULL if not needed.
 *
 * @note If the caller is passing an invalid Position sample reference into this function,
 *       it is a fatal error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetDirection
(
    Sample positionSampleRef IN,        ///< Position sample's reference.
    int32  direction OUT,               ///< Direction in degrees [resolution 1e-1].
                                        ///< (where 0 is True North)
    int32  directionAccuracy OUT        ///< Direction's accuracy estimate
                                        ///< in degrees [resolution 1e-1].
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Satellites Vehicle information.
 *
 * @return
 *  - LE_FAULT         Function failed to find the positionSample.
 *  - LE_OUT_OF_RANGE  One of the retrieved parameter is invalid.
 *  - LE_OK            Function succeeded.
 *
 * @note satId[] can be set to 0 if that information list index is not configured, so
 * all satellite parameters (satConst[], satSnr[],satAzim[], satElev[]) are fixed to 0.
 *
 * @note For LE_OUT_OF_RANGE returned code, invalid value depends on field type:
 * UINT16_MAX for satId, LE_GNSS_SV_CONSTELLATION_UNDEFINED for satConst, false for satUsed,
 * UINT8_MAX for satSnr, UINT16_MAX for satAzim, UINT8_MAX for satElev.
 *
 * @note If the caller is passing an invalid Position sample reference into this function,
 *       it is a fatal error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSatellitesInfo
(
    Sample        positionSampleRef IN,             ///< Position sample's reference.
    uint16        satId[SV_INFO_MAX_LEN] OUT,       ///< Satellites in View ID number, referring
                                                    ///< to NMEA standard.
    Constellation satConst[SV_INFO_MAX_LEN] OUT,    ///< GNSS constellation type.
    bool          satUsed[SV_INFO_MAX_LEN] OUT,     ///< TRUE if satellite in View Used
                                                    ///< for Navigation.
    uint8         satSnr[SV_INFO_MAX_LEN] OUT,      ///< Satellites in View Signal To
                                                    ///< Noise Ratio [dBHz].
    uint16        satAzim[SV_INFO_MAX_LEN] OUT,     ///< Satellites in View Azimuth [degrees].
                                                    ///< Range: 0 to 360
                                                    ///< If Azimuth angle is currently unknown,
                                                    ///< the value is set to UINT16_MAX.
    uint8         satElev[SV_INFO_MAX_LEN] OUT      ///< Satellites in View Elevation [degrees].
                                                    ///< Range: 0 to 90
                                                    ///< If Elevation angle is currently unknown,
                                                    ///< the value is set to UINT8_MAX.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Satellites Vehicle status.
 *
 * @return
 *  - LE_FAULT         Function failed to find the positionSample.
 *  - LE_OUT_OF_RANGE  One of the retrieved parameter is invalid.
 *  - LE_OK            Function succeeded.
 *
 * @note If the caller is passing an invalid Position sample reference into this function,
 *       it is a fatal error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSatellitesStatus
(
    Sample        positionSampleRef IN,     ///< Position sample's reference.
    uint8         satsInViewCount OUT,      ///< Number of satellites expected to be in view.
    uint8         satsTrackingCount OUT,    ///< Number of satellites in view, when tracking.
    uint8         satsUsedCount OUT         ///< Number of satellites in view used for Navigation.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the DOP parameters (Dilution Of Precision) for the fixed position.
 *
 * @return
 *  - LE_FAULT         Function failed to find the positionSample.
 *  - LE_OUT_OF_RANGE  One of the retrieved parameter is invalid (set to INT16_MAX).
 *  - LE_OK            Function succeeded.
 *
 * @note The DOP values are given with 3 decimal places like: DOP value 2200 = 2.20
 *
 * @note If the caller is passing an invalid Position sample reference into this function,
 *       it is a fatal error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetDop
(
    Sample positionSampleRef IN,        ///< Position sample's reference.
    uint16 hdop OUT,                    ///< Horizontal Dilution of Precision [resolution 1e-3].
    uint16 vdop OUT,                    ///< Vertical Dilution of Precision [resolution 1e-3].
    uint16 pdop OUT                     ///< Position Dilution of Precision [resolution 1e-3].
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the satellites latency measures. That measure provides the time difference when the
 * satellite measurement is obtained relative to the time the position's sample is
 * provided. A positive value means the satellite measurement precedes the time reference of
 * position report.
 *
 * @return
 *  - LE_FAULT         Function failed to get the satellites latency measures.
 *  - LE_OUT_OF_RANGE  One of the retrieved parameter is invalid (set to UINT16_MAX or INT32_MAX).
 *  - LE_OK            Function succeeded.
 *
 * @note If the caller is passing an invalid Position sample reference into this function,
 *       it is a fatal error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSatellitesLatency
(
    Sample positionSampleRef IN,  ///< Position sample's reference.
    uint16  satId[SV_INFO_MAX_LEN] OUT,      ///< Satellites in View ID number, referring
                                             ///< to NMEA standard.
    int32  latency[SV_INFO_MAX_LEN] OUT     ///< Satellites latency measure in milliseconds
);

//--------------------------------------------------------------------------------------------------
/**
 * This function gets the last updated position sample object reference.
 *
 * @return A reference to last Position's sample.
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Sample GetLastSampleRef
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to release the position sample.
 *
 * @note If the caller is passing an invalid Position sample reference into this function,
 *       it is a fatal error, the function will not return.
 */
 //--------------------------------------------------------------------------------------------------
FUNCTION ReleaseSampleRef
(
    Sample positionSampleRef IN        ///< Position sample's reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function sets the SUPL Assisted-GNSS mode.
 *
 * @return
 *  - LE_OK on success
 *  - LE_FAULT on failure
 *  - LE_UNSUPPORTED request not supported
 *  - LE_TIMEOUT a time-out occurred
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetSuplAssistedMode
(
    AssistedMode  assistedMode      IN  ///< Assisted-GNSS mode.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function gets the SUPL Assisted-GNSS mode.
 *
 * @return
 *  - LE_OK on success
 *  - LE_FAULT on failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSuplAssistedMode
(
    AssistedMode assistedMode      OUT  ///< Assisted-GNSS mode.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function sets the SUPL server URL.
 * That server URL is a NULL-terminated string with a maximum string length (including NULL
 * terminator) equal to 256. Optionally the port number is specified after a colon.
 *
 * @return
 *  - LE_OK on success
 *  - LE_FAULT on failure
 *  - LE_BUSY service is busy
 *  - LE_TIMEOUT a time-out occurred
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetSuplServerUrl
(
    string  suplServerUrl[SUPL_SERVER_URL_MAX_LEN]      IN  ///< SUPL server URL.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function injects the SUPL certificate to be used in A-GNSS sessions.
 *
 * @return
 *  - LE_OK on success
 *  - LE_FAULT on failure
 *  - LE_BUSY service is busy
 *  - LE_TIMEOUT a time-out occurred
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t InjectSuplCertificate
(
    uint8  suplCertificateId      IN,                     ///< ID of the SUPL certificate.
                                                          ///< Certificate ID range is 0 to 9
    uint16 suplCertificateLen     IN,                     ///< SUPL certificate size in Bytes.
    string suplCertificate[SUPL_CERTIFICATE_MAX_LEN] IN   ///< SUPL certificate contents.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function deletes the SUPL certificate.
 *
 * @return
 *  - LE_OK on success
 *  - LE_FAULT on failure
 *  - LE_BUSY service is busy
 *  - LE_TIMEOUT a time-out occurred
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DeleteSuplCertificate
(
    uint8  suplCertificateId      IN  ///< ID of the SUPL certificate.
                                      ///< Certificate ID range is 0 to 9
);
