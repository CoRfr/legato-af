//--------------------------------------------------------------------------------------------------
/**
 * @page c_pm Power Manager
 *
 * @ref le_pm_interface.h "API Reference"
 *
 * <HR>
 *
 * Components need access to the Power Manager to control the system's wake-up state.
 * Operations that need fast response times (e.g., maintaining call state or playing/recording a
 * media stream) result in high interrupt rates; keeping the system awake results in better performance
 * and power efficiency.
 *
 * Power Manager uses kernel wakeup sources to keep the system awake when at least one of the
 * registered components requests a wakeup source to be held. When all wakeup sources are
 * released, the system may enter a suspend state depending on the status of other (unrelated) wakeup
 * sources.
 *
 * @section le_pm_binding IPC interfaces binding
 *
 * All the functions of this API are provided by the @b powerMgr service.
 *
 * Here's a code sample binding to Power Manager services:
 * @verbatim
   bindings:
   {
      clientExe.clientComponent.le_pm -> powerMgr.le_pm
   }
   @endverbatim
 *
 * @section le_pm_request Requesting and releasing a wakeup source
 *
 * The Power Manager service provides basic API for requesting and releasing a wakeup source.
 * Power Manager's clients call @c le_pm_NewWakeupSource() to create a wakeup source. This function
 * returns a @ref le_pm_WakeupSourceRef_t type that can later be used to acquire and release a
 * wakeup source through @c le_pm_StayAwake() and le_pm_Relax(), respectively. Wakeup sources
 * are not reference-counted, which means multiple calls to le_pm_StayAwake() can be canceled
 * by a single call to le_pm_Relax().
 *
 * To have a reference-counted wakeup-source, set the LE_PM_REF_COUNT bit in the opts argument.
 * When this bit is set, each le_pm_StayAwake() increments a counter, and multiple calls to
 * le_pm_Relax() is necessary to release the wakeup source.
 *
 * Power Manager service will automatically release and delete all wakeup sources held on behalf
 * of an exiting or disconnecting client.
 *
 * For deterministic behaviour, clients requesting services of Power Manager should have
 * CAP_EPOLLWAKEUP (or CAP_BLOCK_SUSPEND) capability assigned.
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * @file le_pm_interface.h
 *
 * Legato @ref c_pm include file.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------
/**
 * Some useful constants
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * Maximum string length for a wake-up source tag (not including the null-terminator)
 */
//--------------------------------------------------------------------------------------------------
DEFINE TAG_LEN = 31;

//--------------------------------------------------------------------------------------------------
/**
 * Maximum string length for a wake-up source tag (including the null-terminator)
 */
//--------------------------------------------------------------------------------------------------
DEFINE TAG_LEN_BYTES = TAG_LEN + 1;


//--------------------------------------------------------------------------------------------------
/**
 * Option LE_PM_REF_COUNT to manage a reference counted wakeup source
 */
//--------------------------------------------------------------------------------------------------
DEFINE REF_COUNT = (1 << 0);


//--------------------------------------------------------------------------------------------------
/**
 * Reference to wakeup source used by StayAwake and Relax function
 */
//--------------------------------------------------------------------------------------------------
REFERENCE WakeupSource;


//--------------------------------------------------------------------------------------------------
/**
 * Create a wakeup source
 *
 * @return
 *      - Reference to wakeup source (to be used later for acquiring/releasing)
 *
 * @note The process exits if an invalid or existing tag is passed
 */
//--------------------------------------------------------------------------------------------------
FUNCTION WakeupSource NewWakeupSource
(
    uint32 createOpts IN,       ///< Wakeup source options
    string wsTag[TAG_LEN] IN    ///< Context-specific wakeup source tag
);


//--------------------------------------------------------------------------------------------------
/**
 * Acquire a wakeup source
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION StayAwake
(
    WakeupSource wsRef IN  ///< Reference to a created wakeup source
);


//--------------------------------------------------------------------------------------------------
/**
 * Release a previously acquired wakeup source
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Relax
(
    WakeupSource wsRef IN  ///< Reference to a created wakeup source
);
