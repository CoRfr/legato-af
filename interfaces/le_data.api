//--------------------------------------------------------------------------------------------------
/**
 * @page c_le_data Data Connection
 *
 * @ref le_data_interface.h "API Reference"
 *
 * <HR>
 *
 * A data connection is needed for applications that exchange data with
 * devices where SMS messages are insufficient or not possible.  The data connection can
 * be over a mobile network, over Wi-Fi, or over a fixed link (e.g., Ethernet).
 *
 * The data connection service provides a basic API for requesting and releasing a data connection.
 *
 * @note This interface does not support yet data connection over a fixed link.
 *
 * @section le_data_IPCbinding IPC interfaces binding
 *
 * All the functions of this API are provided by the @b dataConnectionService application service.
 *
 * Here's a code sample binding to Data Connection services:
 * @verbatim
   bindings:
   {
      clientExe.clientComponent.le_data -> dataConnectionService.le_data
   }
   @endverbatim
 *
 * @section c_le_data_default Default Data Connection
 *
 * Default data connection is obtained using le_data_Request().  Before the data
 * connection is requested, an application registers a connection state handler using
 * le_data_AddConnectionStateHandler().  Once the data connection is established, the
 * handler will be called indicating it's now connected.  If the state of the data
 * connection changes, then the handler will be called with the new state. To release a data
 * connection, an application can use le_data_Release().
 *
 * The technology of the established connection can be retrieved with le_data_GetTechnology().
 *
 * If the default data connection is not currently available when le_data_Request() is called,
 * the data connection service first ensures all pre-conditions are satisfied (e.g.,
 * modem is registered on the network), before trying to start the data connection.
 *
 * If the default data connection is already available when le_data_Request() is called, a
 * new connection will not be started.  Instead, the existing data connection will be used.  This
 * happens if another application also requested the default data connection.  This
 * is how multiple applications can share the same data connection.
 *
 * Once an application makes a data connection request, it should monitor the connection state
 * reported to the registered connection state handler.  The application
 * should only try transmitting data when the state is connected, and should stop transmitting
 * data when the state is not connected.  If the state is not connected, the data connection
 * service will try to re-establish the connection. There's no need for an application to
 * issue a new connection request.
 *
 * The default data connection will not necessarily be released when an application calls
 * le_data_Release().  The data connection will be released only after le_data_Release()
 * is called by all applications that previously called le_data_Request().
 *
 * @note When using the cellular technology, the data connection service can use a specific cellular
 * data profile if it has been set with the le_data_SetCellularProfileIndex() API or in the
 * configuration tree. Otherwise the default cellular profile is used. The profile in use can be
 * retrieved by le_data_GetCellularProfileIndex(). The profile to use is loaded when the first data
 * connection is initiated. The cellular data profile can be configured by le_mdc APIs or
 * cm data tool.
 *
 * @section c_le_data_routing Data connection routing
 *
 * @subsection c_le_data_defaultRoute Default route
 *
 * By default, the default route is automatically configured by the data connection service using
 * the modem parameters when the cellular technology is connected. If an application wishes to
 * configure its own default route, it should deactivate it in the data connection service by
 * setting the parameter @c useDefaultRoute to false in the configuration tree (see @ref
 * c_le_data_configdb):
 * @verbatim
   $ config set dataConnectionService:/routing/useDefaultRoute false bool
   @endverbatim
 *
 * @note The default route activation status can be retrieved with le_data_GetDefaultRouteStatus().
 *
 * @warning The default route activation status is only read at start-up and the change will only
 * be effective after a Legato restart.
 *
 * A sample code showing how to set the modem default route if it isn't set by the data connection
 * server is presented below:
 * @snippet "apps/test/dataConnectionService/dataConnectionServiceRouteTest/dcsRouteTestComp/dcsRouteTest.c" DefaultRoute
 *
 * @subsection c_le_data_addRemoveRoute Add or remove a route
 *
 * Specific routes can be added for the cellular connection with le_data_AddRoute(), which is
 * used to route IP packets to a specific address through the data connection service interface.
 * When the routes are not necessary anymore, they can be removed with le_data_DelRoute().
 * @code
   // Add a route to the 8.8.8.8 IP address for the cellular connection
   le_data_AddRoute("8.8.8.8");

   // Remove a route to the 8.8.8.8 IP address for the cellular connection
   le_data_DelRoute("8.8.8.8");
   @endcode
 *
 * @section c_le_data_rank Technology rank
 *
 * The technology to use for the default data connection can be chosen by the applications
 * with an ordered list. If the connection becomes unavailable through a technology, the next
 * one in the list is used for the default data connection. If the connection is also unavailable
 * through the last technology of the list, the first technology will be used again.
 * The default sequence is @ref LE_DATA_WIFI at rank #1 and @ref LE_DATA_CELLULAR at rank #2.
 *
 * @note
 * - Only one list is available and therefore only one application should set the technology
 * preferences for the default data connection.
 * - The list should not be modified while the default data connection is established.
 * .
 *
 *
 * - le_data_SetTechnologyRank() sets the rank of the technology to use for the data connection
 * service.
 * le_data_SetTechnologyRank() inserts a technology into a list, so all the technologies
 * previously set with ranks @c r and @c r+n are automatically shifted to ranks @c r+1
 * and @c r+n+1. Technologies with ranks under @c r are not impacted. If the technology is already
 * in the list, it is removed from its current rank and added to the new rank.
 *
 * - le_data_GetFirstUsedTechnology() and le_data_GetNextUsedTechnology() let you retrieve
 * the different technologies of the ordered list to use for the default connection data.
 *
 * @section c_le_data_configdb Configuration tree
 * @copydoc c_le_data_configdbPage_Hide
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

 /**
 * @interface c_le_data_configdbPage_Hide
 *
 * The configuration of the default routing, the Wi-Fi access point and the cellular profile are
 * stored in the configuration database of the @c dataConnectionService under the following path:
 * @verbatim
    dataConnectionService:/
        routing/
            useDefaultRoute<bool> == true
        wifi/
            SSID<string> == TestSsid
            secProtocol<int> == 3
            passphrase<string> == Passw0rd
        cellular/
            profileIndex<int> == index
   @endverbatim
 *
 * @note The security protocol is one of the supported protocols defined in the
 * @ref le_wifiClient_SecurityProtocol_t enumerator.
 *
 * @todo This solution is temporary, as the list of access points to connect to should be
 * managed by the Wi-Fi client. Until its API is modified, the config tree is used to configure
 * the only access point to use for the default data connection.
 *
 */

//--------------------------------------------------------------------------------------------------
/**
 * @file le_data_interface.h
 *
 * Legato @ref c_le_data include file.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

USETYPES le_mdc.api;

//--------------------------------------------------------------------------------------------------
// Objects references.
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * Reference returned by Request function and used by Release function
 */
//--------------------------------------------------------------------------------------------------
REFERENCE RequestObj;

//--------------------------------------------------------------------------------------------------
// Symbol and Enum definitions.
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * Interface name string length.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  INTERFACE_NAME_MAX_LEN   = 100;

//--------------------------------------------------------------------------------------------------
/**
 * Interface name string length. One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  INTERFACE_NAME_MAX_BYTES = (INTERFACE_NAME_MAX_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * Technologies.
 */
//--------------------------------------------------------------------------------------------------
ENUM Technology
{
    WIFI,       ///< Wi-Fi
    CELLULAR,   ///< Cellular
    MAX         ///< Unknown state.
};

//--------------------------------------------------------------------------------------------------
/**
 * Handler for connection state changes
 */
//--------------------------------------------------------------------------------------------------
HANDLER ConnectionStateHandler
(
    string intfName[INTERFACE_NAME_MAX_LEN] IN,  ///< Interface name for the data connection
    bool   isConnected                      IN   ///< State: connected or disconnected
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on connection state changes
 */
//--------------------------------------------------------------------------------------------------
EVENT ConnectionState
(
    ConnectionStateHandler handler
);


//--------------------------------------------------------------------------------------------------
/**
 * Request the default data connection
 *
 * @return
 *      - Reference to the data connection (to be used later for releasing the connection)
 *      - NULL if the data connection requested could not be processed
 */
//--------------------------------------------------------------------------------------------------
FUNCTION RequestObj Request
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Release a previously requested data connection
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Release
(
    RequestObj requestRef IN  ///< Reference to a previously requested data connection
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the rank of the technology used for the data connection service
 *
 * @return
 *      - @ref LE_OK if the technology is added to the list
 *      - @ref LE_BAD_PARAMETER if the technology is unknown
 *      - @ref LE_UNSUPPORTED if the technology is not available
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetTechnologyRank
(
    uint32      rank        IN,  ///< Rank of the used technology
    Technology  technology  IN   ///< Technology
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the first technology to use
 * @return
 *      - One of the technologies from @ref le_data_Technology_t enumerator if the list is not empty
 *      - @ref LE_DATA_MAX if the list is empty
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Technology GetFirstUsedTechnology
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the next technology to use
 * @return
 *      - One of the technologies from @ref le_data_Technology_t enumerator if the list is not empty
 *      - @ref LE_DATA_MAX if the list is empty or the end of the list is reached
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Technology GetNextUsedTechnology
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the technology currently used for the default data connection
 *
 * @return
 *      - One of the technologies from @ref le_data_Technology_t enumerator
 *      - @ref LE_DATA_MAX if the current technology is not set
 *
 * @note The supported technologies are @ref LE_DATA_WIFI and @ref LE_DATA_CELLULAR
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Technology GetTechnology
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the default route activation status for the data connection service interface.
 *
 * @return
 *      - true:  the default route is set by the data connection service
 *      - false: the default route is not set by the data connection service
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool GetDefaultRouteStatus
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Add a route on the data connection service interface, if the data session is connected using
 * the cellular technology and has an IPv4 or IPv6 address.
 *
 * @return
 *      - LE_OK             on success
 *      - LE_UNSUPPORTED    cellular technology not currently used
 *      - LE_BAD_PARAMETER  incorrect IP address
 *      - LE_FAULT          for all other errors
 *
 * @note Limitations:
 *      - only IPv4 is supported for the moment
 *      - route only added for a cellular connection
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t AddRoute
(
    string  ipDestAddrStr[le_mdc.IPV6_ADDR_MAX_LEN] IN  ///< The destination IP address in dotted
                                                        ///< format
);

//--------------------------------------------------------------------------------------------------
/**
 * Delete a route on the data connection service interface, if the data session is connected using
 * the cellular technology and has an IPv4 or IPv6 address.
 *
 * @return
 *      - LE_OK             on success
 *      - LE_UNSUPPORTED    cellular technology not currently used
 *      - LE_BAD_PARAMETER  incorrect IP address
 *      - LE_FAULT          for all other errors
 *
 * @note Limitations:
 *      - only IPv4 is supported for the moment
 *      - route only removed for a cellular connection
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DelRoute
(
    string  ipDestAddrStr[le_mdc.IPV6_ADDR_MAX_LEN] IN  ///< The destination IP address in dotted
                                                        ///< format
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the cellular profile index used by the data connection service when the cellular technology
 * is active.
 *
 * @return
 *      - Cellular profile index
 */
//--------------------------------------------------------------------------------------------------
FUNCTION int32 GetCellularProfileIndex
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the cellular profile index used by the data connection service when the cellular technology
 * is active.
 *
 * @return
 *      - LE_OK             on success
 *      - LE_BAD_PARAMETER  if the profile index is invalid
 *      - LE_BUSY           the cellular connection is in use
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetCellularProfileIndex
(
    int32      profileIndex        IN       ///< Cellular profile index to be used
);
