//--------------------------------------------------------------------------------------------------
/**
 * @page c_audio Audio
 *
 * @ref le_audio_interface.h "API Reference"
 *
 * <HR>
 *
 * The Audio API handles audio interfaces including play and record supported formats.
 *
 * A Legato device can use several audio interfaces. You choose the input and output
 * interfaces to tie together. The Audio stream related to a particular interface is
 * represented with an 'Audio Stream Reference'.
 *
 * You can create your own audio path by connecting several audio streams together using
 * audio connectors.
 *
 * An audio path can support more than two audio interfaces. You can have a basic output audio
 * path of a voice call to connect the Modem Voice Received interface with the Speaker
 * interface, and at the same time, the Modem Voice Received interface can be also connected to a
 * Recorder Device interface.
 *
 * @section le_audio_binding IPC interfaces binding
 *
 * All the functions of this API are provided by the @b audioService.
 *
 * Here's a code sample binding to audio services:
 * @verbatim
   bindings:
   {
      clientExe.clientComponent.le_audio -> audioService.le_audio
   }
   @endverbatim
 *
 * @section le_audio_configuration Configure the Audio
 *
 * The audio profile can be set with the le_audio_SetProfile() function. The pre-configured
 * profiles are defined with @c le_audio_Profile_t enumeration type.
 *
 * @warning Ensure to check the list of supported audio profiles for your specific platform.
 *
 * An audio profile can be retrieved with le_audio_GetProfile() and set with le_audio_SetProfile().
 *
 * Then, the following functions let you enable or disable the audio settings on the selected audio
 * interface:
 * - le_audio_EnableNoiseSuppressor()/le_audio_DisableNoiseSuppressor(): Noise Suppressor.
 * - le_audio_EnableEchoCanceller()/ le_audio_DisableEchoCanceller(): Echo Canceller.
 * - le_audio_EnableFirFilter()/ le_audio_DisableFirFilter(): downlink FIR Filter (Finite Impulse
 *   Response).
 * - le_audio_EnableIirFilter()/ le_audio_DisableIirFilter(): downlink IIR Filter (Infinite Impulse
 *   Response).
 * - le_audio_EnableAutomaticGainControl()/ le_audio_DisableAutomaticGainControl(): automatic
 * gain on the selected audio stream.
 *
 * To configure the encoding format, use le_audio_GetEncodingFormat() and le_audio_SetEncodingFormat().
 *
 * To configure gain settings, use le_audio_GetGain() and le_audio_SetGain().
 *
 * PCM has the following configuration get/set functions:
 * - le_audio_GetPcmSamplingRate() and le_audio_SetPcmSamplingRate() for Hz rate.
 * - le_audio_GetPcmSamplingResolution() and le_audio_SetPcmSamplingResolution() for bit/sample settings.
 * - le_audio_GetPcmCompanding() and le_audio_SetPcmCompanding() for signal settings.
 * - le_audio_GetSamplePcmChannelNumber() and le_audio_SetSamplePcmChannelNumber() for channel numbers.
 *
 * @section le_audio_interfaces Open/Close an Audio Interface
 *
 * The following functions let you select the desired interface attributes:
 * - le_audio_OpenMic(): returns an Audio Stream Reference of the analog audio signal coming from
 *                       the microphone input.
 * - le_audio_OpenSpeaker(): returns an Audio Stream Reference of the analog audio signal routed
 *                           to the Speaker output.
 * - le_audio_OpenUsbRx(): returns an Audio Stream Reference of the digitized audio signal coming
 *                         from an external device connected via USB Audio Class.
 * - le_audio_OpenUsbTx(): returns an Audio Stream Reference of the digitized audio signal routed
 *                         to an external device connected via USB Audio Class.
 * - le_audio_OpenPcmRx(): it returns an Audio Stream Reference of the digitized audio signal
 *                            coming from an external device connected via the PCM interface.
 * - le_audio_OpenPcmTx(): it returns an Audio Stream Reference of the digitized audio signal
 *                            routed to an external device connected via the PCM interface.
 * - le_audio_OpenI2sRx(): it returns an Audio Stream Reference of the digitized audio signal
 *                            coming from an external device connected via the I2S interface.
 * - le_audio_OpenI2sTx(): it returns an Audio Stream Reference of the digitized audio signal
 *                            routed to an external device connected via the I2S interface.
 * - le_audio_OpenModemVoiceRx(): returns an Audio Stream Reference of the digitized audio signal
 *                                coming from a voice call. The audio format is negotiated with the
 *                                network when the call is established.
 * - le_audio_OpenModemVoiceTx(): returns an Audio Stream Reference of the digitized audio signal
 *                                routed to a voice call. The audio format is negotiated with the
 *                                network when the call is established.
 *
 * Multiple users can own the same stream at the same time.
 *
 * le_audio_GetDefaultPcmTimeSlot() can be called to get the default PCM time slot used on the
 * current platform.
 *
 * le_audio_GetDefaultI2sMode() can be called to get the default I2s channel mode slot used on
 * the current platform.
 *
 * Call le_audio_Close() to release it. If
 * several users own the same, corresponding stream reference, the interface will
 * close only after the last user releases the audio stream.
 *
 * You can configure the PCM interface with the le_audio_SetPcmSamplingRate(),
 * le_audio_SetPcmSamplingResolution() and le_audio_SetPcmCompanding() functions.
 * This function must be called before activating an audio path with the PCM interface, in other
 * words you must call this function before connecting the PCM Stream to a connector.
 *
 * In addition, the le_audio_GetPcmSamplingRate(), le_audio_GetPcmSamplingResolution() and
 * le_audio_GetPcmCompanding() functions allows you to retrieve the PCM interface configuration.
 *
 * @section le_audio_streams Control an Audio Stream
 *
 * Once the users get an Audio Stream reference, they can control it with the following functions:
 *
 * - le_audio_SetGain(): adjust the gain of an audio stream (0 means 'muted', 100 is the maximum
 *                       gain value).
 * - le_audio_GetGain(): retrieve the gain of an audio stream (0 means 'muted', 100 is the maximum
 *                       gain value).
 * - le_audio_Mute(): mute an audio stream.
 * - le_audio_Unmute(): unmute an audio stream.
 *
 * @note Multimedia (playback and recording) must be controled separatly from the main audio path
 * (Microphone/Speaker, I2S, PCM, USB).  Muting/Unmuting a multimedia is done by
 * muting/unmuting the multimedia stream, and not the other connected stream. For example, in case
 * of playback + voice on the speaker, if the user wants to mute all the audio outcoming to the
 * speaker, it must mute both the Speaker stream and the playback stream.
 *
 * @note The hardware may or may not support the full 0-100 resolution, and if you want to see what
 * was actually set call le_audio_GetGain() after le_audio_SetGain() to get the real value.
 *
 * @warning Ensure to check the list of supported audio streams for these functions on your
 * specific platform.
 *
 * In the case your platform can support other gains in your audio subsystem, you can set or get
 * the value of them with the following functions:
 *
 * - le_audio_SetPlatformSpecificGain(): adjust the value of a platform specific gain in the audio
 *                                       subsystem. (0 means 'muted', 100 is the maximum gain
 *                                       value).
 * - le_audio_GetPlatformSpecificGain(): retrieve the value of a platform specific gain in the
 *                                       audio subsystem. (0 means 'muted', 100 is the maximum gain
 *                                       value).
 *
 * @warning Ensure to check the names of supported gains for your specific platform.
 *
 * @section le_audio_connectors Create Audio connectors
 *
 * You can create your own audio path by connecting several audio streams together.
 *
 * le_audio_CreateConnector() function creates a reference to an audio connector.
 *
 * You can tie an audio stream to a connector by calling the le_audio_Connect()
 * function.
 *
 * You can remove an audio stream from a connector by calling the le_audio_Disconnect()
 * function.
 *
 * When finished with it, delete it using the le_audio_DeleteConnector() function.
 *
 * @section le_audio_pb_playback Playback
 *
 * An audio file can be played to any active output interfaces.
 *
 * Open a player interface by calling:
 * - le_audio_OpenPlayer(): returns an Audio Stream Reference for file playback.
 *                          An audio file can be played on the local audio interface like
 *                          Speaker, USB Tx, PCM Tx, I2S Tx or on the remote audio
 *                          interface Modem Voice Tx depending the kind of connector
 *                          (input or output) is tied to.
 *
 * - le_audio_PlayFile(): plays a specified file. WAVE (Waveform audio file) and
 * AMR (Adaptive Multi Rate) are supported.
 * AMR is an audio compression format optimized for speech coding. Two codecs are supported:
 *     - AMR_NB (AMR Narrowband) codec that encodes narrowband (200–3400 Hz) signals at variable bit
 * rates ranging from 4.75 to 12.2 kbit/s. It was adopted as the standard speech codec by 3GPP.
 *     - AMR-WB (AMR Wideband) is an ITU-T standard speech codec which improved speech quality due to a
 * wider speech bandwidth of 50–7000 Hz.
 *
 * - le_audio_PlaySamples(): initiates a playback using an audio flow. A pipe has
 * to be opened first, then the PCM samples are sent throught the opened pipe.
 * A play can be done only on a connected stream. For instance, the
 * "I2S Tx", "Modem Voice Rx" and "Player" must be previously connected before playing a file.
 *
 * @section le_audio_pb_rec Record
 *
  * Audio file recording can be done from any active input interface.
 *
 * Open a "File Recording" interface by calling:
 * - le_audio_OpenRecorder(): returns an Audio Stream Reference for file recording.
 *                            The local audio interface like Microphone, USB Rx, PCM Rx,
 *                            I2S Rx is recorded into an audio file; or the Modem Voice Rx
 *                            remote audio interface is recorded into an audio file,
 *                            depending the kind of connector (input or output) is tied to.
 * - le_audio_RecordFile(): records in a specified file.
 * - le_audio_SetEncodingFormat(): sets the encoding format. The same formats as the
 * player are supported.
 * - le_audio_GetEncodingFormat(): gets the encoding format.
 * - le_audio_GetSamples(): gets the audio PCM samples.  A pipe has
 * to be opened first, then the PCM samples are sent throught the opened pipe.
 * Recording can only be done on a connected stream. For example, the
 * "I2S Rx", "Modem Voice Tx" and "Recorder" must be previously connected before recording a file.
 *
 * A PCM configuration must be set with:
 * - le_audio_SetSamplePcmChannelNumber(): sets the channel number of a PCM
 * sample.
 * - le_audio_SetSamplePcmSamplingRate(): sets the sampling rate of a PCM
 * sample.
 * - le_audio_SetSamplePcmSamplingResolution(): sets the sampling resolution
 * (in bits per sample) of a PCM sample.
 *
 * The PCM samples configuration can be retrieved with:
 *      - le_audio_GetSamplePcmChannelNumber(): gets the channel number of a PCM
 * sample.
 *      - le_audio_GetSamplePcmSamplingRate(): gets the sampling rate of a PCM
 * sample.
 *      - le_audio_GetSamplePcmSamplingResolution(): can be called to get the sampling resolution
 * (in bits per sample) of a PCM sample.
 * The default configuration is PCM 16-bit audio @ 8KHz one channel.
 *
 * An AMR configuration must be set with:
 *      - le_audio_SetSampleAmrMode(): sets the AMR mode (NB/WB, bitrate).
 *      - le_audio_SetSampleAmrDtx(): can be called to activate/deactivate the Discontinuous
 * Transmission (DTX) to reduce bandwidth usage during silence periods.
 * The AMR configuration can be retrieved with:
 *      - le_audio_GetSampleAmrMode(): gets the AMR mode.
 *      - le_audio_GetSampleAmrDtx(): gets the Discontinuous
 * Transmission (DTX).
 *
 * To stop a play/record call le_audio_Stop():
 * - The playback/record stops playing/recording, and the read/write position indicator associated
 * with the file stream is rewound to the beginning of the file. A new file can be played/recorded
 * using le_audio_PlayFile()/le_audio_PlaySamples()/le_audio_RecordFile()/le_audio_GetSamples().
 * - le_audio_Pause(): can be called to pause a play/record. The file playing/recording is put on
 * hold, the read/write position indicator of the file is not moved.
 * - le_audio_Resume(): can be called to resume a paused play/record. The file playing/recording
 * continues at the file's position indicator held after the pause.
 * - le_audio_Flush(): can be called to flush the remaining audio samples before sending
 * them to the audio driver.
 *
 * Here's a code sample showing how to play a file to the Modem Voice Tx output
 * interface. The audio of the voice call is redirected to the I2S interfaces. This function simply
 * plays a voice prompt to the remote party when the voice call is established.
 *
 * @code
 *
 * static void ConnectAudioAndPlayVoicePromptToRemoteParty
 * (
 *     void
 * )
 * {
 *     // I get the audio from the voice call.
 *     le_audio_StreamRef_t mdmRxAudioRef = le_audio_OpenModemVoiceRx();
 *     le_audio_StreamRef_t mdmTxAudioRef = le_audio_OpenModemVoiceTx();
 *
 *     // I get the I2S interface references.
 *     le_audio_StreamRef_t i2sTxRef = le_audio_OpenI2sTx(le_audio_GetDefaultI2sMode());
 *     le_audio_StreamRef_t i2sRxRef = le_audio_OpenI2sRx(le_audio_GetDefaultI2sMode());
 *
 *     // I create the audio connectors.
 *     le_audio_ConnectorRef_t audioInputConnectorRef = le_audio_CreateConnector();
 *     le_audio_ConnectorRef_t audioOutputConnectorRef = le_audio_CreateConnector();
 *
 *     // The voice call's audio is redirected to I2S interfaces.
 *     if (mdmRxAudioRef && mdmTxAudioRef && i2sTxRef && i2sRxRef &&
 *         audioInputConnectorRef && audioOutputConnectorRef)
 *     {
 *         le_audio_Connect(audioInputConnectorRef, i2sRxRef);
 *         le_audio_Connect(audioInputConnectorRef, mdmTxAudioRef);
 *         le_audio_Connect(audioOutputConnectorRef, i2sTxRef);
 *         le_audio_Connect(audioOutputConnectorRef, mdmRxAudioRef);
 *     }
 *
 *     // I get the interface reference for file playback.
 *     int fd = open("/myvoiceprompt.wav", O_RDONLY));
 *     le_audio_StreamRef_t fileAudioRef = le_audio_OpenPlayer();
 *
 *     // The audio file is played on the input connector, the remote party can now hear the voice
 *     // prompt.
 *     if (fileAudioRef && audioInputConnectorRef)
 *     {
 *         le_audio_Connect(audioInputConnectorRef, fileAudioRef);
 *         le_audio_PlayFile(fileAudioRef, fd);
 *     }
 * }
 *
 * @endcode
 *
 * You can also register a handler function for media-related notifications like errors or audio
 * events.
 *
 * le_audio_AddMediaHandler() function installs a handler for player/recorder stream
 * notifications.
 *
 * le_audio_RemoveMediaHandler() function removes the player/recorder handler function.
 *
 * @note The @c LE_AUDIO_MEDIA_NO_MORE_SAMPLES event indicates when all samples put into the pipe
 * by the user's app have been sent to the audio driver (see le_audio_PlaySamples()).
 *
 * Here's a code sample on how to install a file's event handler:
 * @code
 *
 * // Handler function for Stream Event Notifications.
 * static void MyMediaHandler
 * (
 *     le_audio_StreamRef_t          streamRef,
 *     le_audio_MediaEvent_t         event,
 *     void*                         contextPtr
 * )
 * {
 *     switch(event)
 *     {
 *         case LE_AUDIO_MEDIA_ENDED:
 *             LE_INFO("File event is LE_AUDIO_MEDIA_ENDED.");
 *             break;
 *
 *         case LE_AUDIO_MEDIA_ERROR:
 *             LE_INFO("File event is LE_AUDIO_MEDIA_ERROR.");
 *             break;
 *     }
 * }
 *
 *
 * // I must install my audio media event handler as follows:
 * [...]
 *
 * int myAudioFileFd = -1;
 * le_audio_StreamRef_t fileAudioRef = NULL;
 * le_audio_MediaHandlerRef_t mediaHandlerRef = NULL;
 *
 * myAudioFileFd=open("/myAudioFile.wav", O_RDONLY);
 *
 * fileAudioRef = le_audio_OpenPlayer();
 * LE_ERROR_IF((fileAudioRef==NULL), "le_audio_OpenPlayer returns NULL!");
 *
 * mediaHandlerRef = le_audio_AddMediaHandler(fileAudioRef,
 *                                            MyMediaEventHandler,
 *                                            NULL);

 * LE_ERROR_IF((mediaHandlerRef==NULL), "AddMediaHandler returns NULL!");
 *
 *
 * le_audio_Connect(audioInputConnectorRef, fileAudioRef);
 *
 * // Play the file
 * le_audio_Play(fileAudioRef, myAudioFileFd);
 *
 * [...]
 *
 *
 * @endcode
 *
 * @section le_audio_dtmf DTMF
 *
 * The le_audio_PlayDtmf() function allows the application to play one or several DTMF on a playback
 * stream. The duration and the pause of the DTMFs must also be specified with the input parameters.
 *
 * The le_audio_PlaySignallingDtmf() function allows the application to ask the Mobile Network to
 * generate on the remote audio party the DTMFs. Compared with le_audio_PlayDtmf(),
 * le_audio_PlaySignallingDtmf() function may offer a better signal quality, but the the duration
 * and the pause timings may be less accurate.
 *
 * The application must register a handler function to detect incoming DTMF characters on a specific
 * input audio stream. The le_audio_AddDtmfDetectorHandler() function installs a handler for DTMF
 * detection.
 *
 * The le_audio_RemoveDtmfDetectorHandler() function uninstalls the handler function.
 *
 * The DTMFs are: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, *, #, A, B, C, D. Not case sensitive.
 *
 * @note The DTMF decoding works only on an active audio path.
 *
 * @section le_audio_samples Code samples
 *
 * The following two code samples show how to create different audio paths for an
 * incoming voice call.
 *
 * The first example has the audio path depending on an USB Audio handset. The
 * @b ConnectVoiceCallAudio() function creates this audio path. A USB Audio handset
 * plugged in and fully operationnal, will redirect the call audio to the handset; otherwise, it will
 * redirect the call to the default microphone and speaker.
 *
 * Use DisconnectVoiceCallAudio() to delete the audio path.
 *
 * @code
 *
 * le_result_t ConnectVoiceCallAudio
 * (
 *     le_audio_ConnectorRef_t*  audioInputConnectorRefPtr,  // [OUT] Input connector.
 *     le_audio_ConnectorRef_t*  audioOutputConnectorRefPtr, // [OUT] Output connector.
 *     le_audio_StreamRef_t*     mdmRxAudioRefPtr,           // [OUT] Received voice call audio stream.
 *     le_audio_StreamRef_t*     mdmTxAudioRefPtr,           // [OUT] Transmitted voice call audio stream.
 *     le_audio_StreamRef_t*     deviceRxAudioRefPtr,        // [OUT] Received device audio stream.
 *     le_audio_StreamRef_t*     deviceTxAudioRefPtr         // [OUT] Transmitted device audio stream.
 * )
 * {
 *     // I get the audio from the voice call.
 *     *mdmRxAudioRefPtr = le_audio_OpenModemVoiceRx();
 *     *mdmTxAudioRefPtr = le_audio_OpenModemVoiceTx();
 *
 *     // If I cannot get the audio from the voice call, I return an error.
 *     if ((*mdmRxAudioRefPtr == NULL) || (*mdmTxAudioRefPtr == NULL))
 *     {
 *             // I close the audio interfaces that have failed to open.
 *             le_audio_Close(*mdmRxAudioRefPtr);
 *             le_audio_Close(*mdmTxAudioRefPtr);
 *             return LE_FAULT;
 *     }
 *
 *     // I create the audio connectors.
 *     *audioInputConnectorRefPtr = le_audio_CreateConnector();
 *     *audioOutputConnectorRefPtr = le_audio_CreateConnector();
 *
 *     // I verify if my Audio USB handset is plugged and operational before trying to use it.
 *     if(IsMyUSBHandsetPlugged() == TRUE)
 *     {
 *         // I can redirect the audio to my USB handset using linear PCM audio format (PCM 16bits @ 16KHz)
 *         *deviceRxAudioRefPtr = le_audio_OpenUsbRx();
 *         *deviceTxAudioRefPtr = le_audio_OpenUsbTx();
 *
 *         le_audio_Connect(*audioInputConnectorRefPtr, *deviceRxAudioRefPtr);
 *         le_audio_Connect(*audioOutputConnectorRefPtr, *deviceTxAudioRefPtr);
 *     }
 *     else
 *     {
 *         // There is no USB Audio handset, I redirect the audio to the in-built Microphone and Speaker.
 *         *deviceRxAudioRefPtr = le_audio_OpenMic();
 *         *deviceTxAudioRefPtr = le_audio_OpenSpeaker();
 *
 *         le_audio_Connect(*audioInputConnectorRefPtr, *deviceRxAudioRefPtr);
 *         le_audio_Connect(*audioOutputConnectorRefPtr, *deviceTxAudioRefPtr);
 *     }
 *
 *     // I tie the audio from the voice call to the connectors.
 *     le_audio_Connect (*audioInputConnectorRefPtr, *mdmTxAudioRefPtr);
 *     le_audio_Connect (*audioOutputConnectorRefPtr, *mdmRxAudioRefPtr);
 *
 *     return LE_OK;
 * }
 *
 *
 * void DisconnectVoiceCallAudio
 * (
 *     le_audio_ConnectorRef_t  audioInputConnectorRef,  // [IN] Input connector.
 *     le_audio_ConnectorRef_t  audioOutputConnectorRef, // [IN] Output connector.
 *     le_audio_StreamRef_t     mdmRxAudioRef,           // [IN] Received voice call audio stream.
 *     le_audio_StreamRef_t     mdmTxAudioRef,           // [IN] Transmitted voice call audio stream.
 *     le_audio_StreamRef_t     deviceRxAudioRef,        // [IN] Received device audio stream.
 *     le_audio_StreamRef_t     deviceTxAudioRef         // [IN] Transmitted device audio stream.
 * )
 * {
 *     // The call is terminated, I can close its audio interfaces.
 *     le_audio_Close(mdmRxAudioRef);
 *     le_audio_Close(mdmTxAudioRef);
 *
 *     // I close all the device interfaces.
 *     le_audio_Close(deviceRxAudioRef);
 *     le_audio_Close(deviceTxAudioRef);
 *
 *     // I delete the Audio connector references.
 *     le_audio_DeleteConnector(audioInputConnectorRef);
 *     le_audio_DeleteConnector(audioOutputConnectorRef);
 * }
 *
 * @endcode
 *
 * The next code sample uses specific functions to deal with a new 'Incoming call' event during a call
 * already in progress.
 *
 * If no call is in progress,  use the ConnectVoiceCallAudio() function to redirect the
 * call audio to the in-built Microphone and Speaker.
 *
 * If a new call is incoming, and considered a high priority call, you must mute the audio
 * of the first call, and then connect the new call to your current audio path.
 * Use SwitchVoiceCallAudio() for these actions.
 *
 * @warning Duration and pause can be dependent on the platform and/or network capabilities.
 *
 * When the high priority call terminates, you can return back to your previous call and reactivate its
 * audio with the SwitchBackVoiceCallAudio() function.
 *
 * @code
 *
 * le_result_t ConnectVoiceCallAudio
 * (
 *     le_audio_ConnectorRef_t*  audioInputConnectorRefPtr,  // [OUT] Input connector.
 *     le_audio_ConnectorRef_t*  audioOutputConnectorRefPtr, // [OUT] Output connector.
 *     le_audio_StreamRef_t*     mdmRxAudioRefPtr,           // [OUT] Received voice call audio stream.
 *     le_audio_StreamRef_t*     mdmTxAudioRefPtr,           // [OUT] Transmitted voice call audio stream.
 *     le_audio_StreamRef_t*     micRefPtr,                  // [OUT] Microphone stream.
 *     le_audio_StreamRef_t*     speakerRefPtr               // [OUT] Speaker stream.
 * )
 * {
 *     *mdmRxAudioRefPtr = le_audio_OpenModemVoiceRx();
 *     *mdmTxAudioRefPtr = le_audio_OpenModemVoiceTx();
 *
 *     // If I cannot get the audio from the voice call, I return an error.
 *     if ((*mdmRxAudioRefPtr == NULL) || (*mdmTxAudioRefPtr == NULL))
 *     {
 *             // I close the audio interfaces that  have failed to open.
 *             le_audio_Close(*mdmRxAudioRefPtr);
 *             le_audio_Close(*mdmTxAudioRefPtr);
 *             return LE_FAULT;
 *     }
 *
 *     *audioInputConnectorRefPtr = le_audio_CreateConnector();
 *     *audioOutputConnectorRefPtr = le_audio_CreateConnector();
 *
 *     // Redirect audio to the in-built Microphone and Speaker.
 *     *speakerRefPtr = le_audio_OpenSpeaker();
 *     *micRefPtr = le_audio_OpenMic();
 *
 *     le_audio_Connect(*audioInputConnectorRefPtr, *micRefPtr);
 *     le_audio_Connect (*audioInputConnectorRefPtr, *mdmTxAudioRefPtr);
 *     le_audio_Connect(*audioOutputConnectorRefPtr, *speakerRefPtr);
 *     le_audio_Connect (*audioOutputConnectorRefPtr, *mdmRxAudioRefPtr);
 *
 *     return LE_OK;
 * }
 *
 *
 * le_result_t SwitchVoiceCallAudio
 * (
 *     le_audio_ConnectorRef_t  audioInputConnectorRef,  // [IN] Input connector.
 *     le_audio_ConnectorRef_t  audioOutputConnectorRef, // [IN] Output connector.
 *     le_audio_StreamRef_t     oldMdmRxAudioRef,        // [IN] Received audio stream of the previous voice call.
 *     le_audio_StreamRef_t     oldMdmTxAudioRef,        // [IN] Transmitted audio stream of the previous voice call.
 *     le_audio_StreamRef_t*    newMdmRxAudioRefPtr,     // [OUT] Received audio stream of the new voice call.
 *     le_audio_StreamRef_t*    newMdmTxAudioRefPtr      // [OUT] Transmitted audio stream of the new voice call.
 * )
 * {
 *     if ((newMdmRxAudioRefPtr == NULL)     ||
 *         (newMdmTxAudioRefPtr == NULL))
 *     {
 *         return LE_BAD_PARAMETER;
 *     }
 *
 *     *newMdmRxAudioRefPtr = le_audio_OpenModemVoiceRx();
 *     *newMdmTxAudioRefPtr = le_audio_OpenModemVoiceTx();
 *
 *     // If I cannot get the audio from the voice call, I return an error.
 *     if ((*newMdmRxAudioRefPtr == NULL) || (*newMdmTxAudioRefPtr == NULL))
 *     {
 *         // I close the audio interfaces that have failed to open.
 *         le_audio_Close(*newMdmRxAudioRefPtr);
 *         le_audio_Close(*newMdmTxAudioRefPtr);
 *         return LE_FAULT;
 *     }
 *
 *     // I mute the previous call.
 *     le_audio_Mute(oldMdmRxAudioRef);
 *     le_audio_Mute(oldMdmTxAudioRef);
 *
 *     // I connect the new incoming call.
 *     le_audio_Connect (audioInputConnectorRef, *newMdmTxAudioRefPtr);
 *     le_audio_Connect (audioOutputConnectorRef, *newMdmRxAudioRefPtr);
 *
 *     return LE_OK;
 * }
 *
 *
 * le_result_t SwitchBackVoiceCallAudio
 * (
 *     le_audio_StreamRef_t  oldMdmRxAudioRef, // [IN] Received audio stream of the previous voice call.
 *     le_audio_StreamRef_t  oldMdmTxAudioRef, // [IN] Transmitted audio stream of the previous voice call.
 *     le_audio_StreamRef_t  newMdmRxAudioRef, // [IN] Received audio stream of the new voice call.
 *     le_audio_StreamRef_t  newMdmTxAudioRef  // [IN] Transmitted audio stream  of the new voice call.
 * )
 * {
 *     // I can delete the new call audio interfaces.
 *     le_audio_Close(newMdmRxAudioRef);
 *     le_audio_Close(newMdmTxAudioRef);
 *
 *     // I can re-open the previous call streaming.
 *     if (le_audio_Unmute(oldMdmRxAudioRef) != LE_OK)
 *     {
 *         return LE_FAULT;
 *     }
 *     if (le_audio_Unmute(oldMdmTxAudioRef) != LE_OK)
 *     {
 *         return LE_FAULT;
 *     }
 *
 *     return LE_OK;
 * }
 *
 * @endcode
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * @file le_audio_interface.h
 *
 * Legato @ref c_audio include file.
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * Audio recording/playback events.
 */
//--------------------------------------------------------------------------------------------------
ENUM MediaEvent
{
    MEDIA_ENDED,           ///< Playback has reached the end of file.
    MEDIA_NO_MORE_SAMPLES, ///< No more audio samples to play.
    MEDIA_ERROR,           ///< Recording/playback has encountered an error.
    MEDIA_MAX              ///< Enumerate max value.
};

//--------------------------------------------------------------------------------------------------
/**
 * Audio profiles.
 */
//--------------------------------------------------------------------------------------------------
ENUM Profile
{
    HANDSFREE,  ///< Handsfree profile.
    HANDSET,    ///< Handset profile.
    HEADSET,    ///< Headset profile.
    TTY,        ///< Teletypewriter profile (for hearing impaired use cases).
    USB         ///< USB profile.
};

//--------------------------------------------------------------------------------------------------
/**
 * Companding.
 */
//--------------------------------------------------------------------------------------------------
ENUM Companding
{
    COMPANDING_ALAW,  ///< A-law PCM (i.e. Europe and most of the rest of the world).
    COMPANDING_ULAW,  ///< MU-law PCM (i.e. North America and Japan).
    COMPANDING_NONE   ///< Linear PCM.
};

//--------------------------------------------------------------------------------------------------
/**
 * I2S channel mode.
 */
//--------------------------------------------------------------------------------------------------
ENUM I2SChannel
{
    I2S_LEFT,     ///< Left channel.
    I2S_RIGHT,    ///< Right channel.
    I2S_MONO,     ///< Mono mode.
    I2S_STEREO,   ///< Stereo mode.
    I2S_REVERSE   ///< Reverse mode (left & right reversed).
};

//--------------------------------------------------------------------------------------------------
/**
 * Audio format.
 */
//--------------------------------------------------------------------------------------------------
ENUM Format
{
    WAVE,        ///< Waveform audio file
    AMR,         ///< Adaptive Multi Rate
    FORMAT_MAX
};

//--------------------------------------------------------------------------------------------------
/**
 * AMR mode.
 */
//--------------------------------------------------------------------------------------------------
ENUM AmrMode
{
    AMR_NONE,          ///< Not set
    AMR_NB_4_75_KBPS,  ///< AMR Narrowband in 4.75kbps
    AMR_NB_5_15_KBPS,  ///< AMR Narrowband in 5.15kbps
    AMR_NB_5_9_KBPS,   ///< AMR Narrowband in 5.9kbps
    AMR_NB_6_7_KBPS,   ///< AMR Narrowband in 6.7kbps
    AMR_NB_7_4_KBPS,   ///< AMR Narrowband in 7.4kbps (default value)
    AMR_NB_7_95_KBPS,  ///< AMR Narrowband in 7.95kbps
    AMR_NB_10_2_KBPS,  ///< AMR Narrowband in 10.3kbps
    AMR_NB_12_2_KBPS,  ///< AMR Narrowband in 12.2kbps
    AMR_WB_6_6_KBPS,   ///< AMR Wideband in 6.6kbps
    AMR_WB_8_85_KBPS,  ///< AMR Wideband in 8.85kbps
    AMR_WB_12_65_KBPS, ///< AMR Wideband in 12.65kbps
    AMR_WB_14_25_KBPS, ///< AMR Wideband in 14.25kbps
    AMR_WB_15_85_KBPS, ///< AMR Wideband in 15.85kbps
    AMR_WB_18_25_KBPS, ///< AMR Wideband in 18.25kbps
    AMR_WB_19_85_KBPS, ///< AMR Wideband in 19.85kbps
    AMR_WB_23_05_KBPS, ///< AMR Wideband in 23.05kbps
    AMR_WB_23_85_KBPS  ///< AMR Wideband in 23.85kbps
};

//--------------------------------------------------------------------------------------------------
/**
 * Maximum DTMF string length.
 */
//--------------------------------------------------------------------------------------------------
DEFINE DTMF_MAX_LEN   = (100);

//--------------------------------------------------------------------------------------------------
/**
 * Maximum DTMF string length.
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE DTMF_MAX_BYTES = (DTMF_MAX_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * No file descriptor define
 */
//--------------------------------------------------------------------------------------------------
DEFINE NO_FD = (-1);

//--------------------------------------------------------------------------------------------------
/**
 * Maximum gain's name string length.
 */
//--------------------------------------------------------------------------------------------------
DEFINE GAIN_NAME_MAX_LEN   = (100);

//--------------------------------------------------------------------------------------------------
/**
 * Maximum gain's name string length.
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE GAIN_NAME_MAX_BYTES = (GAIN_NAME_MAX_LEN+1);

//--------------------------------------------------------------------------------------------------
/**
 * Reference type for Audio Stream
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Stream;

//--------------------------------------------------------------------------------------------------
/**
 * Reference type for Audio Connector
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Connector;

//--------------------------------------------------------------------------------------------------
/**
 * Open the Microphone.
 *
 * @return Reference to the input audio stream, NULL if the function fails.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Stream OpenMic
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Open the Speakerphone.
 *
 * @return Reference to the output audio stream, NULL if the function fails.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Stream OpenSpeaker
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Open the received audio stream of an USB audio class.
 *
 * @return Reference to the input audio stream, NULL if the function fails.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Stream OpenUsbRx
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Open the transmitted audio stream of an USB audio class.
 *
 * @return Reference to the output audio stream, NULL if the function fails.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Stream OpenUsbTx
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Open the received audio stream of the PCM interface.
 *
 * @return Reference to the input audio stream, NULL if the function fails.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Stream OpenPcmRx
(
    uint32 timeslot  IN ///< The time slot number.
);

//--------------------------------------------------------------------------------------------------
/**
 * Open the transmitted audio stream of the PCM interface.
 *
 * @return Reference to the output audio stream, NULL if the function fails.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Stream OpenPcmTx
(
    uint32 timeslot  IN ///< The time slot number.
);

//--------------------------------------------------------------------------------------------------
/**
 * Open the received audio stream of the I2S interface.
 *
 * @return Reference to the input audio stream, NULL if the function fails.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Stream OpenI2sRx
(
    I2SChannel mode  IN ///< The channel mode.
);

//--------------------------------------------------------------------------------------------------
/**
 * Open the transmitted audio stream of the I2S interface.
 *
 * @return Reference to the output audio stream, NULL if the function fails.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Stream OpenI2sTx
(
    I2SChannel mode  IN ///< The channel mode.
);

//--------------------------------------------------------------------------------------------------
/**
 * Open the audio stream for playback.
 *
 * @return Reference to the audio stream, NULL if the function fails.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Stream OpenPlayer
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Open the audio stream for recording.
 *
 * @return Reference to the audio stream, NULL if the function fails.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Stream OpenRecorder
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Open the received audio stream of a voice call.
 *
 * @return Reference to the input audio stream, NULL if the function fails.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Stream OpenModemVoiceRx
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Open the transmitted audio stream of a voice call.
 *
 * @return Reference to the output audio stream, NULL if the function fails.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Stream OpenModemVoiceTx
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler for audio stream event.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER MediaHandler
(
    Stream               streamRef  IN,       ///< Audio stream reference.
    MediaEvent           event                ///< Event value.
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on player / recorder stream events.
 *
 */
//--------------------------------------------------------------------------------------------------
EVENT Media
(
    Stream               streamRef IN,        ///< The audio stream reference.
    handler              MediaHandler
);

//--------------------------------------------------------------------------------------------------
/**
 * Close an audio stream.
 * If several users own the stream reference, the interface closes only after
 * the last user closes the audio stream.
 *
 * @note If the caller is passing a bad reference into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Close
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the Gain value of an input or output stream.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_BAD_PARAMETER Audio stream reference is invalid.
 * @return LE_OUT_OF_RANGE  Gain parameter is not between 0 and 100
 * @return LE_OK            Function succeeded.
 *
 * @note The hardware may or may not support the full 0-100 resolution, and if you want to see what
 * was actually set call le_audio_GetGain() after le_audio_SetGain() to get the real value.
 *
 * @note If the caller is passing a bad reference into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetGain
(
    Stream streamRef IN,    ///< Audio stream reference.
    uint32 gain IN          ///< Gain value [0..100]
                            ///< (0 means 'muted', 100 is the maximum gain value)
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Gain value of an input or output stream.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_BAD_PARAMETER Audio stream reference is invalid.
 * @return LE_OK            Function succeeded.
 *
 * @note The hardware may or may not support the full 0-100 resolution, and if you want to see what
 * was actually set call le_audio_GetGain() after le_audio_SetGain() to get the real value.
 *
 * @note If the caller is passing a bad reference into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetGain
(
    Stream streamRef IN,    ///< Audio stream reference.
    uint32 gain OUT         ///< Gain value [0..100]
                            ///< (0 means 'muted', 100 is the maximum gain value)
);

//--------------------------------------------------------------------------------------------------
/**
 * Mute an audio stream.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_BAD_PARAMETER Audio stream reference is invalid.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad reference into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Mute
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * Unmute an audio stream.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_BAD_PARAMETER Audio stream reference is invalid.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad reference into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Unmute
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * Create an audio connector reference.
 *
 * @return Reference to the audio connector, NULL if the function fails.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Connector CreateConnector
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Delete an audio connector reference.
 *
 * @note If the caller is passing a bad reference into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION DeleteConnector
(
    Connector connectorRef IN ///< Connector reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * Connect an audio stream to the connector reference.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_BUSY          Insufficient DSP resources available.
 * @return LE_BAD_PARAMETER Connector and/or the audio stream references are invalid.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad reference into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Connect
(
    Connector connectorRef IN,  ///< Connector reference.
    Stream    streamRef IN      ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * Disconnect an audio stream from the connector reference.
 *
 * @note If the caller is passing a bad reference into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Disconnect
(
    Connector connectorRef IN,  ///< Connector reference.
    Stream    streamRef IN      ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler for DTMF decoding.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER DtmfDetectorHandler
(
    Stream      streamRef  IN,    ///< Audio stream reference.
    char        dtmf       IN     ///< Detected DTMF.
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on DTMF decoding for the specified streamRef
 *
 */
//--------------------------------------------------------------------------------------------------
EVENT DtmfDetector
(
    Stream      streamRef IN,     ///< Audio stream reference.
    handler DtmfDetectorHandler
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to enable the Noise Suppressor.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 * @note The process exits, if an invalid audio stream reference is given.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t EnableNoiseSuppressor
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to disable the Noise Suppressor.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 * @note The process exits, if an invalid audio stream reference is given.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DisableNoiseSuppressor
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to enable the Echo Canceller.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 * @note The process exits, if an invalid audio stream reference is given.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t EnableEchoCanceller
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to disable the Echo Canceller.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 * @note The process exits, if an invalid audio stream reference is given.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DisableEchoCanceller
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to enable the FIR (Finite Impulse Response) filter.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 * @note The process exits, if an invalid audio stream reference is given.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t EnableFirFilter
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to disable the FIR (Finite Impulse Response) filter.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 * @note The process exits, if an invalid audio stream reference is given.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DisableFirFilter
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to enable the IIR (Infinite Impulse Response) filter.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 * @note The process exits, if an invalid audio stream reference is given.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t EnableIirFilter
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to disable the IIR (Infinite Impulse Response) filter.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 * @note The process exits, if an invalid audio stream reference is given.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DisableIirFilter
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to enable the automatic gain control on the selected audio stream.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 * @note The process exits, if an invalid audio stream reference is given.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t EnableAutomaticGainControl
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to disable the automatic gain control on the selected audio stream.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 * @note The process exits, if an invalid audio stream reference is given.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t DisableAutomaticGainControl
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to set the audio profile.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetProfile
(
    le_audio_Profile_t profile  IN ///< Audio profile.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the audio profile in use.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetProfile
(
    le_audio_Profile_t profile  OUT ///< Audio profile.
);


//--------------------------------------------------------------------------------------------------
/**
 * Configure the PCM Sampling Rate.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OUT_OF_RANGE  Your platform does not support the setting's value.
 * @return LE_BUSY          PCM interface is already active.
 * @return LE_OK            Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetPcmSamplingRate
(
    uint32      rate   IN  ///< Sampling rate in Hz.
);

//--------------------------------------------------------------------------------------------------
/**
 * Configure the PCM Sampling Resolution.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OUT_OF_RANGE  Your platform does not support the setting's value.
 * @return LE_BUSY          PCM interface is already active.
 * @return LE_OK            Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetPcmSamplingResolution
(
    uint32      bitsPerSample   IN  ///< Sampling resolution (bits/sample).
);

//--------------------------------------------------------------------------------------------------
/**
 * Configure the PCM Companding.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OUT_OF_RANGE  Your platform does not support the setting's value.
 * @return LE_BUSY          PCM interface is already active.
 * @return LE_OK            Function succeeded.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetPcmCompanding
(
    Companding  companding      IN  ///< Companding.
);

//--------------------------------------------------------------------------------------------------
/**
 * Retrieve the PCM Sampling Rate.
 *
 * @return The sampling rate in Hz.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION uint32 GetPcmSamplingRate
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Retrieve the PCM Sampling Resolution.
 *
 * @return The sampling resolution (bits/sample).
 */
//--------------------------------------------------------------------------------------------------
FUNCTION uint32 GetPcmSamplingResolution
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Retrieve the PCM Companding.
 *
 * @return The PCM companding.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Companding GetPcmCompanding
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the default PCM time slot used on the current platform.
 *
 * @return the time slot number.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION uint32 GetDefaultPcmTimeSlot
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the default I2S channel mode used on the current platform.
 *
 * @return the I2S channel mode.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION I2SChannel GetDefaultI2sMode
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Play a file on a playback stream.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_BAD_PARAMETER Audio stream reference is invalid.
 * @return LE_BUSY          Player interface is already active.
 * @return LE_OK            Function succeeded.
 *
 * @note
 *  - The fd is closed by the IPC API. To play again the same file, the fd parameter can be set
 *    to LE_AUDIO_NO_FD: in this case, the previous file descriptor is re-used.
 *    If the fd as to be kept on its side, the application should duplicate the fd (e.g., using
 *    dup() ) before calling the API.
 *
 * @note
 * -  Calling le_audio_PlayFile(<..>, LE_AUDIO_NO_FD) will rewind the audio file to the
 *    beginning when a playback is already in progress.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t PlayFile
(
    Stream streamRef IN, ///< Audio stream reference.
    file fd          IN  ///< File descriptor.
);

//--------------------------------------------------------------------------------------------------
/**
 * Initiate a playback sending samples over a pipe.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_BUSY          Player interface is already active.
 * @return LE_OK            Function succeeded.
 *
 * @note the fd is closed by the IPC API. To use again the same pipe, the fd parameter can be set
 * to LE_AUDIO_NO_FD: in this case, the previous file descriptor is re-used.
 * If the fd as to be kept on its side, the application should duplicate the fd (e.g., using dup() )
 * before calling the API.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t PlaySamples
(
    Stream streamRef IN, ///< Audio stream reference.
    file fd          IN  ///< File descriptor.
);

//--------------------------------------------------------------------------------------------------
/**
 * Record a file on a recorder stream.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_BAD_PARAMETER The audio stream reference is invalid.
 * @return LE_BUSY          Recorder interface is already active.
 * @return LE_OK            Function succeeded.
 *
 * @note the fd is closed by the API. To record again the same file, the fd parameter can be set to
 * LE_AUDIO_NO_FD: in this case, the previous file descriptor is re-used.
 * If the fd as to be kept on its side, the application should duplicate the fd (e.g., using dup() )
 * before calling the API.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RecordFile
(
    Stream streamRef IN, ///< Audio stream reference.
    file fd          IN  ///< File descriptor.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get samples from a recorder stream.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_BUSY          Recorder interface is already active.
 * @return LE_OK            Function succeeded.
 *
 * @note the fd is closed by the API. To use again the same pipe, the fd parameter can be set to
 * LE_AUDIO_NO_FD: in this case, the previous file descriptor is re-used.
 * If the fd as to be kept on its side, the application should duplicate the fd (e.g., using dup() )
 * before calling the API.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSamples
(
    Stream streamRef IN, ///< Audio stream reference.
    file   fd        IN  ///< File descriptor.
);

//--------------------------------------------------------------------------------------------------
/**
 * Stop the file playback/recording.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 * @note The used file descriptor is not deallocated, but is is rewound to the beginning.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Stop
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * Pause the file playback/recording.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Pause
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * Flush the remaining audio samples.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Flush
(
    Stream streamRef IN ///< Audio stream reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * Resume a file playback/recording (need to be in pause state).
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Resume
(
    Stream streamRef IN ///< Audio stream reference.
);


//--------------------------------------------------------------------------------------------------
/**
 * Set the channel number of a PCM sample.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetSamplePcmChannelNumber
(
    Stream      streamRef IN,       ///< Audio stream reference.
    uint32      nbChannel IN        ///< Channel Number
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the channel number of a PCM sample.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSamplePcmChannelNumber
(
    Stream      streamRef   IN,     ///< Audio stream reference.
    uint32      nbChannel   OUT     ///< Channel Number
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the PCM sampling rate of a PCM sample.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetSamplePcmSamplingRate
(
    Stream      streamRef   IN,     ///< Audio stream reference.
    uint32      rate        IN      ///< PCM sampling Rate.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the PCM sampling rate of a PCM sample.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSamplePcmSamplingRate
(
    Stream      streamRef   IN,     ///< Audio stream reference.
    uint32      rate        OUT     ///< PCM sampling Rate.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the sampling resolution (in bits per sample) of a PCM sample.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetSamplePcmSamplingResolution
(
    Stream      streamRef   IN,     ///< Audio stream reference.
    uint32      samplingRes IN      ///< Sampling resolution (in bits per sample).
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the sampling resolution (in bits per sample) of a PCM sample.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSamplePcmSamplingResolution
(
    Stream      streamRef   IN,     ///< Audio stream reference.
    uint32      samplingRes OUT     ///< Sampling resolution (in bits per sample).
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to play a DTMF on a specific audio stream.
 *
 * @return LE_FORMAT_ERROR  The DTMF characters are invalid.
 * @return LE_BUSY          A DTMF playback is already in progress on the playback stream.
 * @return LE_FAULT         Function failed to play the DTMFs.
 * @return LE_OK            Funtion succeeded.
 *
 * @note If the DTMF string is too long (max DTMF_MAX_LEN characters), it is a fatal
 *       error, the function will not return.
 * @note The process exits, if an invalid audio stream reference is given.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t PlayDtmf
(
    Stream  streamRef           IN, ///< Audio stream reference.
    string  dtmf[DTMF_MAX_LEN]  IN, ///< DTMFs to play.
    uint32  duration            IN, ///< DTMF duration in milliseconds.
    uint32  pause               IN  ///< Pause duration between tones in milliseconds.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to ask to the Mobile Network to generate on the remote audio party
 * the DTMFs.
 *
 * @return LE_FORMAT_ERROR  The DTMF characters are invalid.
 * @return LE_BUSY          A DTMF playback is in progress.
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Funtion succeeded.
 *
 * @note If the DTMF string is too long (max DTMF_MAX_LEN characters), it is a fatal
 *       error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t PlaySignallingDtmf
(
    string  dtmf[DTMF_MAX_LEN]  IN, ///< DTMFs to play.
    uint32  duration            IN, ///< DTMF duration in milliseconds.
    uint32  pause               IN  ///< Pause duration between tones in milliseconds.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the encoding format of a recorder stream.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetEncodingFormat
(
    Stream          streamRef   IN,     ///< Audio stream reference.
    Format          format      IN      ///< Encoding format.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the encoding format of a recorder stream.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetEncodingFormat
(
    Stream          streamRef   IN,     ///< Audio stream reference.
    Format          format      OUT      ///< Encoding format.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the AMR mode for AMR encoder.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetSampleAmrMode
(
    Stream          streamRef   IN,     ///< Audio stream reference.
    AmrMode         mode        IN      ///< AMR mode.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the AMR mode for AMR encoder.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSampleAmrMode
(
    Stream          streamRef   IN,     ///< Audio stream reference.
    AmrMode         mode        OUT      ///< AMR mode.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the AMR discontinuous transmission (DTX). The DTX is activated by default.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetSampleAmrDtx
(
    Stream      streamRef   IN,     ///< Audio stream reference.
    bool        dtx         IN      ///< DTX.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the AMR discontinuous transmission (DTX) value.
 *
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeeded.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSampleAmrDtx
(
    Stream      streamRef   IN,     ///< Audio stream reference.
    bool        dtx         OUT     ///< DTX.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the value of a platform specific gain in the audio subsystem.
 *
 * @return LE_FAULT         The function failed.
 * @return LE_NOT_FOUND     The specified gain's name is not recognized in your audio subsystem.
 * @return LE_OUT_OF_RANGE  The gain parameter is out of range
 * @return LE_OK            The function succeeded.
 *
 * @warning Ensure to check the names of supported gains for your specific platform.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetPlatformSpecificGain
(
    string  gainName[GAIN_NAME_MAX_LEN]  IN, ///< Name of the platform specific gain.
    uint32  gain                         IN  ///< The gain value (specific to the platform)
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the value of a platform specific gain in the audio subsystem.
 *
 * @return LE_FAULT         The function failed.
 * @return LE_NOT_FOUND     The specified gain's name is not recognized in your audio subsystem.
 * @return LE_OK            The function succeeded.
 *
 * @warning Ensure to check the names of supported gains for your specific platform.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetPlatformSpecificGain
(
    string  gainName[GAIN_NAME_MAX_LEN] IN,  ///< Name of the platform specific gain.
    uint32  gain                        OUT  ///< The gain value (specific to the platform)
);
