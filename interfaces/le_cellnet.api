//--------------------------------------------------------------------------------------------------
/**
 * @page c_le_cellnet Cellular Network
 *
 * @ref le_cellnet_interface.h "API Reference"
 *
 * <HR>
 *
 * The Cellular Network service ensures that the modem is registered on the network when an user
 * application makes a request for network access. This includes:
 * - ensuring that the radio is turned on.
 * - ensuring that there is a valid SIM, and it is unlocked.
 * - ensuring that the modem is registered on the network.
 *
 * If all of the above conditions are met, then the service indicates that the network is available.
 *
 * @section le_cellnet_binding IPC interfaces binding
 *
 * All the functions of this API are provided by the @b cellNetService application service.
 *
 * Here's a code sample binding to Cellular Network services:
 * @verbatim
   bindings:
   {
      clientExe.clientComponent.le_cellnet -> cellNetService.le_cellnet
   }
   @endverbatim
 *
 * @section c_le_cellnet_requesting Requesting the Cellular Network
 *
 * The Cellular Network can be requested using le_cellnet_Request(). The le_cellnet_Request
 * function will turn on the radio if it is switched off and it will unlock the SIM if a PIN code
 * is required (it will retrieve the needed information from the config tree,
 * cf. @ref c_le_cellnet_config).
 * Before the cellular network is requested, an application should register a network state
 * handler using le_cellnet_AddStateEventHandler(). Once the cellular network becomes available,
 * the handler will be called to indicate that the modem is now registered on the network.
 *
 * If the state of the network changes, then the handler will be called with the new state.
 *
 * To release the cellular network, an application can use le_cellnet_Release(). Once all user
 * applications release the cellular network access, then the service will turn off the radio.
 *
 * All configuration data required for a network registration, such as the PIN code of the SIM,
 * will be stored in the Config tree by the use of the le_cellnet_SetSimPinCode() function.
 *
 *
 * @section c_le_cellnet_config Cellular Network configuration
 *
 * Setting the SIM PIN code in the config tree and retreiving it is performed by two functions:
 * le_cellnet_SetSimPinCode() and le_cellnet_GetSimPinCode().
 *
 * The le_cellnet_SetSimPinCode() function takes two parameters : SIM identifier and SIM card
 * PIN code and stores the PIN code in the rigth path of the config tree.
 * Note that the function erases the previous stored SIM card PIN code.
 * Note that it is possible to set and retry a void entry ("") corresponding to an unlocked SIM.
 *
 * The le_cellnet_GetSimPinCode() function takes one parameter: the SIM identifier and retreives
 * the SIM card PIN code from the config tree.
 *
 * @note
 * when a new SIM is inserted and :
 *   - is locked, Cellular Network Service will read automatically the config tree in order to try
 *     to enter the pin for the SIM card.
 *   - is blocked, Cellular Network Service just log an error and did not try to enter the puk code.
 *   - when setting a too long PIN code (max 8 digits), a fatal error occurs, the function will
 *     not return.
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * @file le_cellnet_interface.h
 *
 * Legato @ref c_le_cellnet include file.
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------

USETYPES le_sim.api;

//--------------------------------------------------------------------------------------------------
/**
 * Reference returned by Request function and used by Release function
 */
//--------------------------------------------------------------------------------------------------
REFERENCE RequestObj;


//--------------------------------------------------------------------------------------------------
/**
 * Cellular Network states.
 *
 */
//--------------------------------------------------------------------------------------------------
ENUM State
{
    RADIO_OFF,      ///< The radio is Off.
    REG_EMERGENCY, ///< Only Emergency calls are allowed.
    REG_HOME,      ///< Registered, home network.
    REG_ROAMING,   ///< Registered to a roaming network.
    REG_UNKNOWN    ///< Unknown state.
};


//--------------------------------------------------------------------------------------------------
/**
 * Handler for network state changes
 */
//--------------------------------------------------------------------------------------------------
HANDLER StateHandler
(
    State  state  IN            ///< The cellular network state
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on network state changes
 */
//--------------------------------------------------------------------------------------------------
EVENT StateEvent
(
    StateHandler handler
);

//--------------------------------------------------------------------------------------------------
/**
 * Request a cellular network
 *
 * @return
 *      - A reference to the cellular network
 *      - 0 (zero) if the network requested could not be processed
 */
//--------------------------------------------------------------------------------------------------
FUNCTION RequestObj Request
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Release a cellular network
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Release
(
    RequestObj cellNetRef IN  ///< Reference to a cellular network request.
);


// -------------------------------------------------------------------------------------------------
/**
 * Set the PIN code in the config tree.
 *
 * @return
 *    LE_OUT_OF_RANGE    Invalid simId
 *  - LE_FORMAT_ERROR    PIN code is not in string format.
 *  - LE_UNDERFLOW       The PIN code is not long enough (min 4 digits).
 *  - LE_OK              The function succeeded.
 *  - LE_FAULT           The function failed on any other errors
 *
 * @note If PIN code is too long (max 8 digits), it is a fatal error, the
 *       function will not return.
 *
 */
// -------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetSimPinCode
(
    le_sim.Id simId                    IN,  ///< SIM identifier.
    string pinCode[le_sim.PIN_MAX_LEN] IN  ///< PIN code to insert in the config tree.
 );

// -------------------------------------------------------------------------------------------------
/**
 * Retreive the PIN code from the config tree.
 *
 * @return
 *    LE_OUT_OF_RANGE    Invalid simId
 *  - LE_NOT_FOUND       PIN code is not found in the config tree.
 *  - LE_OVERFLOW        PIN code exceeds the maximum length of 8 digits.
 *  - LE_UNDERFLOW       The PIN code is not long enough (min 4 digits).
 *  - LE_OK              The function succeeded.
 */
// -------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSimPinCode
(
    le_sim.Id simId                    IN,  ///< SIM identifier.
    string pinCode[le_sim.PIN_MAX_LEN] OUT  ///< Read the PIN code from the config tree.
);


