
// -------------------------------------------------------------------------------------------------
/**
 *  @page api_configAdmin Config Tree Admin API
 *
 *  This API includes functions for importing and exporting subsections of the config tree to and
 *  from a file.
 *
 *  This API also includes an iterator object that can be used to iterate over the list of trees
 *  currently known by the system.
 *
 *  An example of printing the list of trees in a system:
 *
 *  @code
 *  le_cfgAdmin_IteratorRef_t iteratorRef = le_cfgAdmin_CreateTreeIterator();
 *
 *  while (le_cfgAdmin_NextTree(iteratorRef) == LE_OK)
 *  {
 *      char treeName[MAX_TREE_NAME] = { 0 };
 *
 *      if (le_cfgAdmin_GetTreeName(iteratorRef, treeName, sizeof(treeName)) == LE_OK)
 *      {
 *          printf("Tree: \"%s\"\n", treeName);
 *      }
 *      else
 *      {
 *          printf("Tree: \"%s\", truncated.\n", treeName);
 *      }
 *  }
 *
 *  le_cfgAdmin_ReleaseTreeIterator(iteratorRef);
 *  @endcode
 *
 *  Copyright (C) Sierra Wireless, Inc. 2014. All rights reserved. Use of this work is subject to
 *  license.
 */
 /** @file le_cfgAdmin_interface.h
 *
 * Legato @ref c_cfgAdmin include file.
 *
 * Copyright (C) Sierra Wireless, Inc. 2014. Use of this work is subject to license.
 */
// -------------------------------------------------------------------------------------------------


USETYPES le_cfg.api;


/// Reference to an iterator object that can be used to iterate over the list of trees.
REFERENCE Iterator;


// -------------------------------------------------------------------------------------------------
//  Import and export of the tree data.
// -------------------------------------------------------------------------------------------------




// -------------------------------------------------------------------------------------------------
/**
 *  Read a subset of the configuration tree from the given filePath.  The tree then overwrites the
 *  node at the given nodePath.
 *
 *  This function will import a sub-tree as part of the iterator's current transaction.  This allows
 *  you to create an iterator on a given node.  Import a sub-tree, and then examine the contents of
 *  the import before deciding to commit the new data.
 *
 *  @return This function will return one of the following values:
 *
 *          - LE_OK            - The commit was completed successfuly.
 *          - LE_NOT_PERMITTED - Attempted to import to a section of the tree the connection doesn't
 *                               have access to.
 *          - LE_FAULT         - An I/O error occured while reading the data.
 *          - LE_FORMAT_ERROR  - The configuration data being imported appears corrupted.
 */
// -------------------------------------------------------------------------------------------------
FUNCTION le_result_t ImportTree
(
    le_cfg_IteratorRef_t iteratorRef IN,  ///< Write iterator that is being used for the import.
    string filePath[512]             IN,  ///< Import the tree data from the this file.
    string nodePath[512]             IN   ///< Where in the tree should this import happen?  Leave
                                          ///<   as an empty string to use the iterator's current
                                          ///<   node.
);


// -------------------------------------------------------------------------------------------------
/**
 *  Take a node given from nodePath and stream it and it's children to the file given by filePath.
 *
 *  This funciton uses the iterator's read transaction, and takes a snapshot of the current state of
 *  the tree.  The data write happens immediately.
 *
 *  @return This function will return one of the following values:
 *
 *          - LE_OK            - The commit was completed successfuly.
 *          - LE_BAD_PARAMETER - The specified path does not exist in the config tree.
 *          - LE_NOT_PERMITTED - Attempted to export from a section of the tree the connection
 *                               doesn't have access to.
 *          - LE_FAULT         - An I/O error occured while writing the data.
 */
// -------------------------------------------------------------------------------------------------
FUNCTION le_result_t ExportTree
(
    le_cfg_IteratorRef_t iteratorRef IN,  ///< Write iterator that is being used for the export.
    string filePath[512]             IN,  ///< Import the tree data from the this file.
    string nodePath[512]             IN   ///< Where in the tree should this export happen?  Leave
                                          ///<   as an empty string to use the iterator's current
                                          ///<   node.
);




// -------------------------------------------------------------------------------------------------
//  Tree maintenance.
// -------------------------------------------------------------------------------------------------




// -------------------------------------------------------------------------------------------------
/**
 *  Delete a tree from the system, both from the filesystem and from memory.
 */
// -------------------------------------------------------------------------------------------------
FUNCTION DeleteTree
(
    string treeName[64] IN  ///< Name of the tree to delete.
);




// -------------------------------------------------------------------------------------------------
//  Iterating configuration trees.
// -------------------------------------------------------------------------------------------------




// -------------------------------------------------------------------------------------------------
/**
 *  Create a new iterator object for iterating over the list of trees currently managed by the
 *  config tree daemon.
 */
// -------------------------------------------------------------------------------------------------
FUNCTION le_cfgAdmin_IteratorRef_t CreateTreeIterator
(
);


// -------------------------------------------------------------------------------------------------
/**
 *  Release the iterator and free it's memory back to the system.
 */
// -------------------------------------------------------------------------------------------------
FUNCTION ReleaseTreeIterator
(
    le_cfgAdmin_IteratorRef_t iteratorRef IN  ///< Iterator object to release.
);


// -------------------------------------------------------------------------------------------------
/**
 *  Read the name of the tree currently pointed at by the iterator.
 *
 *  @return LE_OK if there is enough room to copy the name into the supplied buffer.  LE_OVERFLOW if
 *          not.  LE_NOT_FOUND is returned if the list is empty or if the iterator hasn't been moved
 *          onto the first item yet.
 */
// -------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetTreeName
(
    le_cfgAdmin_IteratorRef_t iteratorRef IN,  ///< Iterator object to read.
    string name[64] OUT                        ///< Name of the currently referenced tree is
                                               ///<   passed in this out parameter.
);


// -------------------------------------------------------------------------------------------------
/**
 *  Move onto the next tree in the list.  If there are no more trees this function returns false,
 *  otherwise true is returned.
 *
 *  @return LE_OK if there are more trees to iterate through.  LE_NOT_FOUND if not.
 */
// -------------------------------------------------------------------------------------------------
FUNCTION le_result_t NextTree
(
    le_cfgAdmin_IteratorRef_t iteratorRef IN  ///< Iterator to iterate.
);
