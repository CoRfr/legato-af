
//--------------------------------------------------------------------------------------------------
/**
 * @page c_le_avdata AirVantage Data
 *
 * @ref le_avdata_interface.h "API Reference" <br>
 * @ref howToAVData "How To Manage Data"
 *
 * <HR>
 *
 * This API provides a data service to allow apps to manage app-specific
 * data on the AirVantage server.
 *
 * Data is setup as @b assets &mdash;  a collection of fields that can be managed by the AirVantage
 * server.
 *
 * An asset field is a single piece of information that can be managed by the AirVantage server.
 * There can be multiple fields in an asset.
 *
 * A field can be:
 * - @c variable allows an app to set the value, and can be read from the AV server.
 * - @c setting allows the AV server to set the value, and can be read by an app.
 * - @c command allows the AV server to invoke a command or function in the app.
 *
 * All fields have names. Variable and setting fields also have a type. The possible field types,
 * along with the default value are:
 * - string (empty string)
 * - integer (0)
 * - float (0.0)
 * - boolean (false)
 * - binary (zero-length block).
 *
 * Default values can be overwritten in the asset definition. Currently, string, integer, float
 * and boolean fields are supported; binary fields will be supported in the future.
 *
 *
 * @section le_avdata_instance Asset Data Instances
 *
 * An app that needs to send data to the AirVantage server must first create an asset instance
 * using le_avc_Create() with the name of the asset definition.
 * Once an asset instance is created, the app can begin accessing the instance's fields.
 *
 * Multiple instances of the same asset can be created, as well as multiple instances of different
 * assets.
 *
 * Asset definitions are specified in the @ref defFilesCdef_assets section of the app's @c cdef file.
 *
 * @section le_avdata_field Field Values and Activity
 *
 * Set functions are available to set variable field values. Get functions are
 * available to get settings fields' values.
 *
 * An app can register a handler so that it can be called when activity occurs on a field.
 * This is optional for variable and setting fields, but is required for command fields.
 * - @c variable called when the field is read by the AV server. The
 * app can then call the appropriate set function to provide a new value for the field.
 * - @c setting called when the field has been updated by the AV server
 * with a new value. The app can use the appropriate get function to retrieve the new value.
 * - @c command called when the AV server wants to invoke a command. The
 * app should perform an appropriate action or call a function to execute this command.
 *
 * Registered handlers are only called when the server performs the associated activity on
 * a specific field of an asset instance. For example, a handler registered on a variable field will
 * be called if the server reads only that field of an instance; it will not be called if the
 * server reads the whole instance of an asset.
 *
 * Leaving it optional to register handlers for variable and setting fields allows an
 * app to decide how it wants to access variable and setting fields. It can decide to
 * only do something in response to the AV server, or it can work independently of the AV server
 * updating variables when it has a new value, and reading settings only when it needs the value.
 *
 * @section le_avdata_timeseries Time Series
 *
 * This feature enables user apps to collect data when the device is offline. A time series
 * record can be initialized using le_avdata_CreateRecord() and data can be accumulated using
 * le_avdata_RecordInt(), le_avdata_RecordFloat(), le_avdata_RecordBool and le_avdata_RecordString
 * with a specified time stamp (milliseconds elapsed since epoch). User apps can then open an
 * @c avms session, and push the collected history data using le_avdata_PushRecord(). The callback
 * used when calling le_avdata_PushRecord() will indicate whether the push has been successful or not.
 *
 * @note: The push callback is not supported in the current release.
 *
 * This code sample shows how to collect data and send to the server (assuming session is opened)
 *
 * @code
 *
 * static void PushCallbackHandler
 * (
 *     le_avdata_PushStatus_t status,
 *     void* contextPtr
 * )
 * {
 *     if (status == LE_AVDATA_SENT_SUCCESS)
 *     {
 *         // data pushed successfully
 *     }
 * }
 *
 * static void SendData()
 * {
 *     struct timeval tv;
 *     uint64_t utcMilliSec;
 *     le_result_t result;
 *
 *     le_avdata_RecordRef_t recRef = le_avdata_CreateRecord();
 *
 *     gettimeofday(&tv, NULL);
 *     utcMilliSec = (uint64_t)(tv.tv_sec) * 1000 + (uint64_t)(tv.tv_usec) / 1000; // get current time
 *     result = le_avdata_RecordFloat(recRef, "speed", 0.08, utcMilliSec);
 *
 *     if (result != LE_OK)
 *     {
 *          le_avdata_PushRecord(recRef, PushCallbackHandler, NULL);
 *     }
 *
 *     le_avdata_DeleteRecord(recRef);
 * }
 * @endcode
 *
 * @section le_avdata_fatal Fatal Behavior
 *
 * An invalid asset name or field name is treated as a fatal error (i.e. non-recoverable)
 * and will result in the client app being terminated.
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------
/**
 * Define the maximum length of a path name (TODO: verify value)
 */
//--------------------------------------------------------------------------------------------------
DEFINE PATH_NAME_LEN = 128;


//--------------------------------------------------------------------------------------------------
/**
 * Define the maximum length of a string field (TODO: verify value)
 */
//--------------------------------------------------------------------------------------------------
DEFINE STRING_VALUE_LEN = 255;


//--------------------------------------------------------------------------------------------------
/**
 * Resource access modes.
 *   Variable: read
 *   Setting: read, write
 *   Command: execute
 */
//--------------------------------------------------------------------------------------------------
ENUM AccessMode
{
    ACCESS_VARIABLE,
    ACCESS_SETTING,
    ACCESS_COMMAND
};


//--------------------------------------------------------------------------------------------------
/**
 * Resource access types
 */
//--------------------------------------------------------------------------------------------------
BITMASK AccessType
{
    ACCESS_READ,
    ACCESS_WRITE,
    ACCESS_EXEC
};


//--------------------------------------------------------------------------------------------------
/**
 * Data types
 */
//--------------------------------------------------------------------------------------------------
ENUM DataType
{
    DATA_TYPE_NONE,
    DATA_TYPE_INT,
    DATA_TYPE_FLOAT,
    DATA_TYPE_BOOL,
    DATA_TYPE_STRING
};


//--------------------------------------------------------------------------------------------------
/**
 * Argument list reference, for command only.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE ArgumentList;



// TODO:
/*
Problems:
1. Current assumption of user calling a Set/Get function in a "ResourceHandler" is wrong. The 
   Set/Get funtion calls are happening in a separate event so the order of things happening is not
   what I expected.

2. Currently a HANDLER doesn't seem to support OUT params. So the the result of a command execution
   can't be communicated back to the AVC Daemon.


Proposed Actions:
1. Modify ifgen so HANDLER supports OUT params.  Other than command result, the most updated "read"
   value can also be communicated back to AVC daemon in the same event.

2. Somehow make the Set/Get function happen in the same event?  Unsure how this can be done. Also
   curious how Prush handled this.

3. Instead of a generic "ResourceEvent" and "ResourceHandler", have 3 sets of events and handlers
   for read, write, and execute, since their handlers all require different params.  Argument list
   is only for execute, and only the read handler needs the OUT param for the updated value, for
   example.

   ... on second thought #3 might not be a good idea, since we might need 3 different types of 
   AssetData_t.

*/



//--------------------------------------------------------------------------------------------------
/**
 * Handler for resource activity
 */
//--------------------------------------------------------------------------------------------------
HANDLER ResourceHandler
(
    string path[PATH_NAME_LEN] IN,
    AccessType accessType IN,
    ArgumentList ArgumentListRef IN,
    le_result_t result OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Upon resource access on the server side, the registered handler is called.
 *
 * For "variables" (read-only), the handler does NOT require a "set" call to be made.
 *
 * For "settings" (read/write), the same handler is called for both read and write.
 *
 * For read and write, the handlers are there to provide instant value update:
 *
 *  - If the av server is reading, then the handler is called BEFORE the value is read from the
 *    internal storage and sent to av server, so the handler has a chance to get the latest value
 *    from the hardware.
 *
 *  - If the av server is writing, then the handler is called AFTER the value is received from av
 *    server and written to the internal storage, so the handler is able to set the hardware with
 *    the latest value from the av server.
 */
//--------------------------------------------------------------------------------------------------
EVENT ResourceEvent
(
    string path[PATH_NAME_LEN] IN,
    ResourceHandler handler
);


//--------------------------------------------------------------------------------------------------
/**
 * Create a resource. Data type is determined upon the first call to a Set function.
 *
 * @return:
 *      - LE_OK on success
 *      - LE_DUPLICATE if path already being called by CreateResource before.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t CreateResource
(
    string path[PATH_NAME_LEN] IN,
    AccessMode accessMode
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the value of an integer setting field
 *
 * @return:
 *      - LE_BAD_PARAMETER - asset data being accessed is of the wrong data type
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetInt
(
    string path[PATH_NAME_LEN] IN,
    int32 value OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Set the value of an integer variable field
 *
 * @return:
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetInt
(
    string path[PATH_NAME_LEN] IN,
    int32 value IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the value of a float setting field
 *
 * @return:
 *      - LE_BAD_PARAMETER - asset data being accessed is of the wrong data type
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetFloat
(
    string path[PATH_NAME_LEN] IN,
    double value OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Set the value of a float variable field
 *
 * @return:
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetFloat
(
    string path[PATH_NAME_LEN] IN,
    double value IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the value of a boolean setting field
 *
 * @return:
 *      - LE_BAD_PARAMETER - asset data being accessed is of the wrong data type
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetBool
(
    string path[PATH_NAME_LEN] IN,
    bool value OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Set the value of a boolean variable field
 *
 * @return:
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetBool
(
    string path[PATH_NAME_LEN] IN,
    bool value IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the value of a string setting field
 *
 * @return:
 *      - LE_BAD_PARAMETER - asset data being accessed is of the wrong data type
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetString
(
    string path[PATH_NAME_LEN] IN,
    string value[STRING_VALUE_LEN] OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Set the value of a string variable field
 *
 * @return:
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetString
(
    string path[PATH_NAME_LEN] IN,
    string value[STRING_VALUE_LEN] IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the bool argument with the specified name.
 *
 * @return:
 *      - LE_OK on success
 *      - LE_NOT_FOUND if argument doesn't exist, or its data type doesn't match the API.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetBoolArg
(
    ArgumentList argumentListRef IN,
    string argName[STRING_VALUE_LEN] IN,
    bool boolArg OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the float argument with the specified name.
 *
 * @return:
 *      - LE_OK on success
 *      - LE_NOT_FOUND if argument doesn't exist, or its data type doesn't match the API.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetFloatArg
(
    ArgumentList argumentListRef IN,
    string argName[STRING_VALUE_LEN] IN,
    double floatArg OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the int argument with the specified name.
 *
 * @return:
 *      - LE_OK on success
 *      - LE_NOT_FOUND if argument doesn't exist, or its data type doesn't match the API.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetIntArg
(
    ArgumentList argumentListRef IN,
    string argName[STRING_VALUE_LEN] IN,
    int32 intArg OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the string argument with the specified name.
 *
 * @return:
 *      - LE_OK on success
 *      - LE_NOT_FOUND if argument doesn't exist, or its data type doesn't match the API.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetStringArg
(
    ArgumentList argumentListRef IN,
    string argName[STRING_VALUE_LEN] IN,
    string strArg[STRING_VALUE_LEN] OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the length of the string argument of the specified name.
 *
 * @return:
 *      - LE_OK on success
 *      - LE_NOT_FOUND if argument doesn't exist, or its data type doesn't match the API.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetStringArgLength
(
    ArgumentList argumentListRef IN,
    string argName[STRING_VALUE_LEN] IN,
    int32 strArgLen OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * A record reference
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Record;


//--------------------------------------------------------------------------------------------------
/**
 * Status of the data push (TODO: Provide additional status to troubleshoot delivery problems)
 */
//--------------------------------------------------------------------------------------------------
ENUM PushStatus
{
    SENT_SUCCESS,
    SENT_FAILED
};


//--------------------------------------------------------------------------------------------------
/**
 * Handler for pushing data result.
 */
//--------------------------------------------------------------------------------------------------
HANDLER CallbackResult
(
    PushStatus status IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Create a timeseries record
 *
 * @return Reference to the record
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Record CreateRecord
(
);


//--------------------------------------------------------------------------------------------------
/**
 * Delete a timeseries record
 */
//--------------------------------------------------------------------------------------------------
FUNCTION DeleteRecord
(
    Record recordRef IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Accumulate int data
 *
 * @note The client will be terminated if the recordRef is not valid, or the resource doesn't exist
 *
 * @return:
 *      - LE_OK on success
 *      - LE_OVERFLOW if the current entry was NOT added because the time series buffer is full.
 *      - LE_FAULT on any other error
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RecordInt
(
    Record recordRef IN,
    string path[PATH_NAME_LEN] IN,
    int32 value IN,
    uint64 timestamp
);


//--------------------------------------------------------------------------------------------------
/**
 * Accumulate float data
 *
 * @note The client will be terminated if the recordRef is not valid, or the resource doesn't exist
 *
 * @return:
 *      - LE_OK on success
 *      - LE_OVERFLOW if the current entry was NOT added because the time series buffer is full.
 *      - LE_FAULT on any other error
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RecordFloat
(
    Record recordRef IN,
    string path[PATH_NAME_LEN] IN,
    double value IN,
    uint64 timestamp
);


//--------------------------------------------------------------------------------------------------
/**
 * Accumulate boolean data
 *
 * @note The client will be terminated if the recordRef is not valid, or the resource doesn't exist
 *
 * @return:
 *      - LE_OK on success
 *      - LE_OVERFLOW if the current entry was NOT added because the time series buffer is full.
 *      - LE_FAULT on any other error
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RecordBool
(
    Record recordRef IN,
    string path[PATH_NAME_LEN] IN,
    bool value IN,
    uint64 timestamp
);


//--------------------------------------------------------------------------------------------------
/**
 * Accumulate string data
 *
 * @note The client will be terminated if the recordRef is not valid, or the resource doesn't exist
 *
 * @return:
 *      - LE_OK on success
 *      - LE_OVERFLOW if the current entry was NOT added because the time series buffer is full.
 *      - LE_FAULT on any other error
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RecordString
(
    Record recordRef IN,
    string path[PATH_NAME_LEN] IN,
    string value[STRING_VALUE_LEN] IN,
    uint64 timestamp
);


//--------------------------------------------------------------------------------------------------
/**
 * Push record to the server
 *
* @return:
 *      - LE_OK on success.
 *      - LE_FAULT on any other error
 *
 * * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t PushRecord
(
    Record recordRef,
    CallbackResult handler
);
