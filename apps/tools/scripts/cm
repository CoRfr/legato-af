#!/bin/sh

################################################################################
#                                                                              #
# cm is a shell script that wraps the cm binary in order to start a data       #
# session based on cellular modem technology. It sets up the last registered   #
# profile preferences, the ip routing table and tests the connection (just a   #
# ping test to see if we can reach the outside world).                         #
#                                                                              #
# For more information type 'cm help'.                                         #
#                                                                              #
# Copyright (C) Sierra Wireless Inc.                                           #
#                                                                              #
################################################################################

CM=${CM:="/legato/systems/current/apps/tools/read-only/bin/cm"}
IP=${IP:="/sbin/ip"}
IFCONFIG=${IFCONFIG:="/sbin/ifconfig"}
CURL=${CURL:-"/usr/bin/curl"}
RESOLV_CONF=${RESOLV_CONF="/etc/resolv.conf"}
LOG=${LOG:="/tmp/cm.log"}
TEST_SITE=${TEST_SITE:="http://www.akamai.com"}

cm() {
    $CM "$@"
}

ip() {
    $IP $@
}

ifconfig() {
    $IFCONFIG $@
}

curl() {
    $CURL $@
}

handle_err() {
    local err=$1
    local log=$LOG

    sed -i "1s/^/$(date) - /" $log

    if [ $err -ne 0 ]; then
        echo "failed"
        cat $log
        exit 1
    else
        echo "ok"
    fi
}

get_default_gw() {
    local iface=$1
    ip route show dev $iface | grep "default" | cut -d' ' -f3
}

update_dns() {
    for i in $@; do
        if [ "$1" != "N/A" ]; then
            grep $1 $RESOLV_CONF > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                echo -n "Updating /etc/resolv.conf ... "
                echo "nameserver $1" >> $RESOLV_CONF
                echo "ok"
            fi
        fi
        shift 1
    done
}

cm_data_get_param() {
    local info=$1
    local param=$2

    echo "$info" | sed "s/^$param:[ \t]*//;t;d"
}

cm_data_connect () {
    local opt=$1
    local info=$(cm data info)
    local index=$(cm_data_get_param "$info" "Index")
    local apn=$(cm_data_get_param "$info" "APN")
    local pdp=$(cm_data_get_param "$info" "PDP Type")
    local status=$(cm_data_get_param "$info" "Connected")
    local auth_type=$(cm_data_get_param "$info" "Auth type")
    local usr=$(cm_data_get_param "$info" "User name")
    local passwd=$(cm_data_get_param "$info" "Password")

    if [ "$opt" = "-1" ]; then
        echo -n "Disconnecting ... "
        cm data connect $opt > $LOG 2>&1
        handle_err $?
        exit 0
    fi

    if [ "$status" = "no" ]; then
        echo "Setting up profile $index"

        if [ -z "$apn" ]; then
            echo -n "No APN selected, cannot proceed."
            exit 1
        fi

        echo -n "Setting access point name ... "
        cm data apn "$apn" > $LOG 2>&1
        handle_err $?

        echo -n "Setting packet data protocol ... "
        cm data pdp "$pdp" > $LOG 2>&1
        handle_err $?

        if [ -z "$auth_type" ]; then
            auth_type="none"
        fi

        echo -n "Setting Authentication ... "
        cm data auth "$auth_type" "$usr" "$passwd" > $LOG 2>&1
        handle_err $?

        echo -n "Connecting ... "
        cm data connect $opt > $LOG 2>&1
        handle_err $?
    fi

    info=$(cm data info)

    local iface=$(cm_data_get_param "$info" "Interface")

    if [ -z "$iface" ]; then
        echo "No interface, cannot proceed."
        exit 1
    fi

    local family=$(cm_data_get_param "$info" "Family")

    if [ -z "$family" ]; then
        echo "No family, cannot proceed."
        exit 1
    fi

    local gw=$(cm_data_get_param "$info" "Gateway")

    if [ -z "$gw" ]; then
        echo "No gateway."
    fi

    local dns1=$(cm_data_get_param "$info" "Dns1")
    local dns2=$(cm_data_get_param "$info" "Dns2")

    if [ -z "$dns1" ]; then
        echo "No dns1."
    fi

    if [ -z "$dns2" ]; then
        echo "No dns2."
    fi

    local dgw=$(get_default_gw $iface)

    echo -n "Checking if device is up ... "
    ifconfig | grep "$iface" > /dev/null 2>&1
    handle_err $?

    if [ -z "${dgw// }" ]; then
        echo -n "Routing ... "
        ip -family $family route add default via $gw dev $iface \
            > $LOG 2>&1
        handle_err $?
    fi

    update_dns $dns1 $dns2

    echo -n "Testing connection ... "
    curl --silent $TEST_SITE > $LOG 2>&1
    handle_err $?

    exit 0
}

if [ "$1" = "data" ]; then
    if [ "$2" = "connect" ] && [ $# -le 3 ]; then
        shift 2
        cm_data_connect $@
    fi
fi

cm "$@"
