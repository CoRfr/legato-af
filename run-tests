#!/bin/bash

SOURCEDIR=$PWD
BUILDDIR_BASE=$PWD/build
TEST_COVERAGE=${TEST_COVERAGE:-1}

function StartServiceDirectory()
{
    echo -n "Starting Service Directory..."
    serviceDirectory &
    SERVICE_DIRECTORY_PID=$!
    sleep 0.5
    echo " DONE."
}

function StopServiceDirectory()
{
    echo -n "Stopping Service Directory..."
    kill $SERVICE_DIRECTORY_PID > /dev/null 2>&1
    echo " DONE."
}

function CheckServiceDirectory()
{
    if ! kill -0 $SERVICE_DIRECTORY_PID > /dev/null 2>&1
    then
        echo "Service Directory is no longer running!"
        exit 1
    fi
}

function StartLogControlDaemon()
{
    echo -n "Starting Log Control Daemon..."
    logCtrlDaemon &
    LOG_CTRL_DAEMON_PID=$!
    sleep 0.5
    echo " DONE."
}

function StopLogControlDaemon()
{
    echo -n "Stopping Log Control Daemon..."
    kill $LOG_CTRL_DAEMON_PID > /dev/null 2>&1
    sleep 0.5
    echo " DONE."
}

function CheckLogControlDaemon()
{
    if ! kill -0 $LOG_CTRL_DAEMON_PID > /dev/null 2>&1
    then
        echo "Log Control Daemon is no longer running!"
        StopServiceDirectory
        exit 1
    fi
}

function StartConfigTree()
{
    echo -n "Starting Configuration Tree..."
    configTree &
    CONFIG_TREE_PID=$!
    sleep 0.5
    echo " DONE."
}

function StopConfigTree()
{
    echo -n "Stopping Configuration Tree..."
    kill $CONFIG_TREE_PID > /dev/null 2>&1
    echo " DONE."
}

function CheckConfigTree()
{
    if ! kill -0 $CONFIG_TREE_PID > /dev/null 2>&1
    then
        echo "Config Tree is no longer running!"
        exit 1
    fi
}

function StartDaemons()
{
    StartServiceDirectory
    StartLogControlDaemon
    StartConfigTree
}

function StopDaemons()
{
    StopLogControlDaemon
    StopServiceDirectory
    StopConfigTree
}

function CheckDaemons()
{
    CheckLogControlDaemon
    CheckServiceDirectory
    CheckConfigTree
}

function CheckRet()
{
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        echo -e $COLOR_ERROR "Exit Code $RETVAL" $COLOR_RESET
        StopDaemons
        exit $RETVAL
    fi
}

function CleanBuild()
{
    make clean
}

function TargetIdentify()
{
    echo "Identifying target ..."
    TARGET_MODEL=$(ssh -o ConnectTimeout=5 root@$DEST_IP "bsinfo -l | grep \" - \$(bsinfo -s -t)\" | sed -e 's/BS//' -e 's/ - .*$//'" 2> /dev/null)
    if [ -z "$TARGET_MODEL" ]; then
        echo "Unable to determine remote target model"
        exit 1
    fi

    TARGET_TYPE=$($SOURCEDIR/bin/gettargettype $TARGET_MODEL)
    if [ -z "$TARGET_TYPE" ]; then
        echo "Unable to determine remote target type"
        exit 1
    fi

    echo "Testing Legato on $DEST_IP (type = $TARGET_TYPE)"
}

function TargetUpdateLegato()
{
    echo "Updating Legato"

    # if startup scripts are updated target will need to reboot.
    instsys build/$TARGET_TYPE/system.$TARGET_TYPE.update $DEST_IP
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        echo -e $COLOR_ERROR "Exit Code $RETVAL" $COLOR_RESET
        StopDaemons
        exit $RETVAL
    fi

    # Wait for target to bring up the new system.
    sleep 60
}

function TargetUnitTest()
{
    if [ "$DEST_IP" == "" ]; then
        echo "Target IP address is not available. Unit testing on target will be skipped."
        return
    fi

    TargetUpdateLegato

    cd $BUILDDIR_BASE/$TARGET_TYPE
    CheckRet

    # Test
    $SOURCEDIR/apps/test/targetUnitTests $DEST_IP $TARGET_TYPE
    CheckRet

    cd $SOURCEDIR
    CheckRet
}

function HostUnitTest()
{
    # Default timeout to 2 minutes
    #
    # NOTE: Tests can eventually override this timeout using
    #  add_test(MyTest1 ....)
    #  set_tests_properties(MyTest1 PROPERTIES TIMEOUT 100)
    UT_TIMEOUT=${UT_TIMEOUT:-120}

    cd $BUILDDIR_BASE/localhost
    CheckRet

    export PATH=$PWD/framework/bin:$PWD/tests/bin:$PATH

    # Stop any other instances of the legato framework daemons that may already be running.
    # NOTE: Killing the Service Directory should be sufficient to cause everything else to die too.
    serviceDirProcIDs=`pgrep serviceDir`
    if [ $? -eq 0 ]
    then
        for procID in $serviceDirProcIDs
        do
            echo "*** Killing Service Directory process with PID $procID"
            kill $procID
        done
    fi

    StartDaemons

    CheckDaemons

    # Test
    ctest \
        -D ExperimentalTest \
        --no-compress-output \
        --timeout $UT_TIMEOUT \
        -VV
    CheckRet
    CheckDaemons

    StopDaemons

    cd $SOURCEDIR
    CheckRet
}

function Build()
{
    TARGET=$1

    BUILDDIR="$BUILDDIR_BASE/$TARGET"

    echo "Building $TARGET with coverage report set to $TEST_COVERAGE"

    # Check Toolchain path
    # NOTE: Even if the toolchain path is not set, the Makefile should be able to recover.
    if [[ $TARGET != "localhost" ]]; then
        TOOLCHAIN_ENV="${TARGET^^}_TOOLCHAIN_DIR"
        if [ -z "${!TOOLCHAIN_ENV}" ]; then
            echo "$TOOLCHAIN_ENV not set"
        else
            echo "$TOOLCHAIN_ENV=${!TOOLCHAIN_ENV}"
        fi
    fi

    # Build
    make tests_$TARGET TEST_COVERAGE=$TEST_COVERAGE
    CheckRet

    source $SOURCEDIR/bin/configlegatoenv
}

function BuildTools()
{
    echo "Building Tools"

    make tools
    CheckRet
}

function BuildClang()
{
    if ! which clang; then
        echo "Unable to find clang"
        exit 1
    fi

    echo "  Clang version:"
    clang -v 2>&1 |head -1

    # Normal build, with clang
    export USE_CLANG=1
    Build "localhost"
    unset USE_CLANG
    CleanBuild
}

function Job_HostUnitTest()
{
    if [ -n "$SKIP_HOST_TESTING" ]; then
        echo "Skipping host unit tests."
        return
    fi

    CleanBuild
    Build "localhost"
    HostUnitTest
    GenerateReport "localhost"
}

function Job_TargetUnitTest()
{
    if [ -n "$SKIP_TARGET_TESTING" ]; then
        echo "Skipping on-target unit tests."
        return
    fi

    TargetIdentify
    CleanBuild
    Build $TARGET_TYPE
    TargetUnitTest
    GenerateReport $TARGET_TYPE
}

function Manual_DeveloperPrePushTrial()
{
    echo "Cleaning ..."
    CleanBuild

    echo "Building ..."
    Build "localhost"

    echo "Building for virtual target..."
    Build "virt"

    echo "Testing ..."
    HostUnitTest

    echo "Tests complete."
}

function GenerateReport()
{
    TARGET=$1

    BUILDDIR="$BUILDDIR_BASE/$TARGET"

    if [[ "$TEST_COVERAGE" == "1" ]]; then
        echo "Generate report for $TARGET"

        # Build
        gcovr --xml \
            -r . -o $BUILDDIR/coverage.xml \
            --exclude=".*(test|build|codegen)\b.*"
        CheckRet

        mkdir -p $BUILDDIR/coverage/html/
        gcovr --html --html-details \
            -r . -o $BUILDDIR/coverage/html/index.html \
            --exclude=".*(test|build|codegen)\b.*"
        CheckRet
    fi
}

echo -e "== Task: '$1' ==\n"

if [ -e "$SOURCEDIR/bin/configlegatoenv" ]; then
    source $SOURCEDIR/bin/configlegatoenv
fi

case "$1" in
host-ut)
    Job_HostUnitTest
    ;;
run-host-ut)
    HostUnitTest
    GenerateReport "localhost"
    ;;
target-ut)
    Job_TargetUnitTest
    ;;
run-target-ut)
    TargetUnitTest
    GenerateReport $TARGET_TYPE
    ;;
dev-trial)
    Manual_DeveloperPrePushTrial
    ;;
quick-test)
    Build "localhost"
    HostUnitTest
    GenerateReport "localhost"
    ;;
*)
    echo "Invalid argument: '$1'"
    exit 1
    ;;
esac

